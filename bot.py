import telebot
from telebot import types
from math import floor
from datetime import datetime, timedelta
import time
import random
import config
import telebot.types as types
import db
import crypto_pay
import json
from uuid import uuid4
from requests.exceptions import RequestException
import requests
import sqlite3
import db as db_module
import logging
import threading
import schedule
from telebot import TeleBot
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
from db import get_db
from db import add_user, get_db  
import re
from telebot.apihelper import ApiTelegramException
import io
from telebot.handler_backends import State, StatesGroup
from threading import Lock
import uuid


bot = telebot.TeleBot(config.BOT_TOKEN)


treasury_lock = threading.Lock()
active_treasury_admins = {}

def auto_confirm_number(number, user_id, code):
    with db.get_db() as conn:
        cursor = conn.cursor()
        current_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å "–∞–∫—Ç–∏–≤–µ–Ω" –∏ TAKE_DATE
        cursor.execute('''
            UPDATE numbers 
            SET status = "–∞–∫—Ç–∏–≤–µ–Ω", 
                hold_start_time = NULL, 
                VERIFICATION_CODE = NULL, 
                TAKE_DATE = ? 
            WHERE number = ?
        ''', (current_time, number))
        conn.commit()
        print(f"[DEBUG] –ù–æ–º–µ—Ä {number} –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω –≤ {current_time}")

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    safe_send_message(user_id, f"‚úÖ –ù–æ–º–µ—Ä {number} –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ '–≤—Å—Ç–∞–ª' –≤ {current_time}.")

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø–µ
    if number in code_messages:
        message_data = code_messages[number]
        chat_id = message_data["chat_id"]
        message_id = message_data["message_id"]
        tg_number = message_data["tg_number"]
        try:
            bot.edit_message_text(
                f"üì± <b>–¢–ì {tg_number}</b>\n"
                f"‚è∞ –ù–æ–º–µ—Ä {number} –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ '–≤—Å—Ç–∞–ª' –≤ {current_time}.",
                chat_id,
                message_id,
                parse_mode='HTML'
            )
            print(f"[DEBUG] –°–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø–µ {chat_id} –æ–±–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è –Ω–æ–º–µ—Ä–∞ {number}")
        except Exception as e:
            print(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –Ω–æ–º–µ—Ä–∞ {number}: {e}")
        del code_messages[number]

    for mod_id in config.MODERATOR_IDS:
        safe_send_message(mod_id, f"‚è∞ –ù–æ–º–µ—Ä {number} –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ '–≤—Å—Ç–∞–ª' –≤ {current_time}.")

class Database:
    def get_db(self):
        return sqlite3.connect('database.db')

    def is_moderator(self, user_id):
        with self.get_db() as conn:
            cursor = conn.cursor()
            cursor.execute('SELECT * FROM personal WHERE ID = ? AND TYPE = ?', (user_id, 'moder'))
            return cursor.fetchone() is not None

    def update_balance(self, user_id, amount):
        with self.get_db() as conn:
            cursor = conn.cursor()
            cursor.execute('UPDATE users SET BALANCE = BALANCE + ? WHERE ID = ?', (amount, user_id))
            conn.commit()

    def get_group_name(self, group_id):
        return db_module.get_group_name(group_id)


    def update_last_activity(self, user_id):
        with self.get_db() as conn:
            cursor = conn.cursor()
            current_time = datetime.now()

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            cursor.execute('SELECT LAST_ACTIVITY FROM users WHERE ID = ?', (user_id,))
            result = cursor.fetchone()

            if not result:
                # –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
                cursor.execute(
                    'INSERT OR IGNORE INTO users (ID, BALANCE, REG_DATE, IS_AFK, AFK_TYPE, LAST_ACTIVITY) VALUES (?, ?, ?, ?, ?, ?)',
                    (user_id, 0.0, current_time.strftime("%Y-%m-%d %H:%M:%S"), 0, 0, current_time.strftime("%Y-%m-%d %H:%M:%S"))
                )
                print(f"[DEBUG] –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –¥–æ–±–∞–≤–ª–µ–Ω –∏ –≤—Ä–µ–º—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")

            # –¢–æ–ª—å–∫–æ –æ–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏, –Ω–µ —Ç—Ä–æ–≥–∞—è IS_AFK
            cursor.execute('UPDATE users SET LAST_ACTIVITY = ? WHERE ID = ?', 
                        (current_time.strftime("%Y-%m-%d %H:%M:%S"), user_id))
            conn.commit()
            print(f"[DEBUG] –û–±–Ω–æ–≤–ª–µ–Ω–æ –≤—Ä–µ–º—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {current_time}")

db = Database()


# ----------------------------
#  –•–ï–õ–ü–ï–†–´ (–Ω–æ–º–µ—Ä–∞, –±–∞–ª–∞–Ω—Å)
# ----------------------------

def is_russian_number(phone_number):
    phone_number = phone_number.strip()
    phone_number = re.sub(r'[\s\-()]+', '', phone_number)
    if phone_number.startswith('7') or phone_number.startswith('8'):
        phone_number = '+7' + phone_number[1:]
    elif phone_number.startswith('9') and len(phone_number) == 10:
        phone_number = '+7' + phone_number
    if not phone_number.startswith('+'):
        phone_number = '+' + phone_number
    pattern = r'^\+7\d{10}$'
    return phone_number if bool(re.match(pattern, phone_number)) else None

def check_balance_and_fix(user_id):
    with db.get_db() as conn:
        cursor = conn.cursor()
        cursor.execute('SELECT BALANCE FROM users WHERE ID = ?', (user_id,))
        user = cursor.fetchone()
        if user and user[0] < 0:
            cursor.execute('UPDATE users SET BALANCE = 0 WHERE ID = ?', (user_id,))
            conn.commit()

# ----------------------------
#  –°–¢–ò–õ–ï–í–û–ï –û–§–û–†–ú–õ–ï–ù–ò–ï
# ----------------------------
DIV = "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
def header(title_emoji, title_text):
    return f"{title_emoji} <b>{title_text}</b>\n{DIV}\n"

def success_text(txt):
    return f"‚úÖ <b>{txt}</b"

def error_text(txt):
    return f"‚ùå <b>{txt}</b>"


# ----------------------------
#  –ö–û–ú–ê–ù–î–´ / –ú–µ–Ω—é
# ----------------------------

@bot.message_handler(commands=['help'])
def help_command(message):
    user_id = message.from_user.id
    chat_id = message.chat.id
    db.update_last_activity(user_id)  # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    with db_module.get_db() as conn:
        cursor = conn.cursor()
        cursor.execute('SELECT STATUS, BLOCKED FROM requests WHERE ID = ?', (user_id,))
        request = cursor.fetchone()

        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω
        if request and request[1] == 1:
            bot.send_message(chat_id, "üö´ –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –≤ –±–æ—Ç–µ. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –ø–æ–¥–¥–µ—Ä–∂–∫–µ: @{config.PAYOUT_MANAGER}", parse_mode='HTML')
            return

        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –æ–¥–æ–±—Ä–µ–Ω
        if not request or request[0] != 'approved':
            bot.send_message(chat_id, "üëã –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –µ—â—ë –Ω–µ –æ–¥–æ–±—Ä–µ–Ω–∞. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", parse_mode='HTML')
            return

    is_admin = user_id in config.ADMINS_ID
    is_moderator = db_module.is_moderator(user_id)

    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))

    if is_admin:
        help_text = (
            "üëë <b>–°–ø—Ä–∞–≤–∫–∞ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>\n\n"
            "–í—ã –∏–º–µ–µ—Ç–µ –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –±–æ—Ç–æ–º. –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –∏ –¥–µ–π—Å—Ç–≤–∏—è:\n\n"
            "‚öôÔ∏è <b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</b> (–∫–Ω–æ–ø–∫–∞ –≤ –º–µ–Ω—é)\n"
            "   - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∞–º–∏ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ\n"
            "   - –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ê–§–ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
            "   - –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
            "   - –£–º–µ–Ω—å—à–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
            "   - –û—Ç–ø—Ä–∞–≤–∫–∞ —á–µ–∫–æ–≤ (–≤—Å–µ–º –∏–ª–∏ –æ—Ç–¥–µ–ª—å–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º)\n\n"
            "üì± <b>–†–∞–±–æ—Ç–∞ —Å –Ω–æ–º–µ—Ä–∞–º–∏</b>\n"
            "   - –ö–æ–º–∞–Ω–¥–∞ –≤ –≥—Ä—É–ø–ø–µ: <code>—Ç–≥1</code> (–æ—Ç 1 –¥–æ 70) ‚Äî –≤–∑—è—Ç—å –Ω–æ–º–µ—Ä –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É\n"
            "   - –ö–æ–º–∞–Ω–¥–∞: <code>—Å–ª–µ—Ç +79991234567</code> ‚Äî –ø–æ–º–µ—Ç–∏—Ç—å –Ω–æ–º–µ—Ä –∫–∞–∫ —Å–ª–µ—Ç–µ–≤—à–∏–π\n\n"
            "üí∞ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—ã–ø–ª–∞—Ç–∞–º–∏</b>\n"
            "   - –ü—Ä–æ—Å–º–æ—Ç—Ä –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞—è–≤–æ–∫ –Ω–∞ –≤—ã–≤–æ–¥\n"
            "   - –°–æ–∑–¥–∞–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —á–µ–∫–æ–≤ —á–µ—Ä–µ–∑ CryptoBot\n\n"
            "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n"
            "   - –î–æ—Å—Ç—É–ø–Ω–∞ –≤ –ø—Ä–æ—Ñ–∏–ª–µ: –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –Ω–æ–º–µ—Ä–æ–≤\n\n"
            "üìû <b>–ü–æ–¥–¥–µ—Ä–∂–∫–∞</b>\n"
            f"   - –°–≤—è–∑—å —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º: @{config.PAYOUT_MANAGER}"
        )
    elif is_moderator:
        help_text = (
            "üõ° <b>–°–ø—Ä–∞–≤–∫–∞ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞</b>\n\n"
            "–í—ã –º–æ–∂–µ—Ç–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–æ–º–µ—Ä–∞ –≤ —Ä–∞–±–æ—á–∏—Ö –≥—Ä—É–ø–ø–∞—Ö. –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –∏ –¥–µ–π—Å—Ç–≤–∏—è:\n\n"
            "üì± <b>–†–∞–±–æ—Ç–∞ —Å –Ω–æ–º–µ—Ä–∞–º–∏</b>\n"
            "   - –ö–æ–º–∞–Ω–¥–∞ –≤ –≥—Ä—É–ø–ø–µ: <code>—Ç–≥1</code> (–æ—Ç 1 –¥–æ 70) ‚Äî –≤–∑—è—Ç—å –Ω–æ–º–µ—Ä –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É\n"
            "   - –ö–æ–º–∞–Ω–¥–∞: <code>—Å–ª–µ—Ç +79991234567</code> ‚Äî –ø–æ–º–µ—Ç–∏—Ç—å –Ω–æ–º–µ—Ä –∫–∞–∫ —Å–ª–µ—Ç–µ–≤—à–∏–π  \n"
            "   - –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–æ–≤ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏\n\n"
            "üîô <b>–í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é</b>\n"
            "   - –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏–ª–∏ –∫–æ–º–∞–Ω–¥—É /start\n\n"
            "üìû <b>–ü–æ–¥–¥–µ—Ä–∂–∫–∞</b>\n"
            f"   - –°–≤—è–∑—å —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º: @{config.PAYOUT_MANAGER}"
        )
    else:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        with db_module.get_db() as conn:
            cursor = conn.cursor()
            cursor.execute('SELECT PRICE, HOLD_TIME FROM settings')
            result = cursor.fetchone()
            price, hold_time = result if result else (2.0, 5)

        help_text = (
            f"<b>üì¢ –°–ø—Ä–∞–≤–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {config.SERVICE_NAME}</b>\n\n"
            f"<b>‚è≥ –ì—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã:</b> <code>{config.WORK_TIME}</code>\n\n"
            "<b>üíº –ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç?</b>\n"
            "‚Ä¢ –í—ã —Å–¥–∞—ë—Ç–µ –Ω–æ–º–µ—Ä, –º—ã –≤—ã–ø–ª–∞—á–∏–≤–∞–µ–º –≤–∞–º –¥–µ–Ω—å–≥–∏ –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏.\n"
            f"‚Ä¢ –ú–æ–º–µ–Ω—Ç–∞–ª—å–Ω—ã–µ –≤—ã–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ CryptoBot –ø–æ—Å–ª–µ {hold_time} –º–∏–Ω—É—Ç —Ä–∞–±–æ—Ç—ã –Ω–æ–º–µ—Ä–∞.\n\n"
            "<b>üí∞ –¢–∞—Ä–∏—Ñ—ã:</b>\n"
            f"‚ñ™Ô∏è <code>{price}$</code> –∑–∞ –Ω–æ–º–µ—Ä (—Ö–æ–ª–¥ {hold_time} –º–∏–Ω—É—Ç)\n\n"
            "<b>üì± –î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:</b>\n"
            "1. <b>–°–¥–∞—Ç—å –Ω–æ–º–µ—Ä</b> ‚Äî —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É –≤ –º–µ–Ω—é\n"
            "2. <b>–£–¥–∞–ª–∏—Ç—å –Ω–æ–º–µ—Ä</b> ‚Äî –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —É–±—Ä–∞—Ç—å —Å–≤–æ–π –Ω–æ–º–µ—Ä\n"
            "3. <b>–ò–∑–º–µ–Ω–∏—Ç—å –Ω–æ–º–µ—Ä</b> ‚Äî –∑–∞–º–µ–Ω–∏—Ç—å –æ–¥–∏–Ω –Ω–æ–º–µ—Ä –Ω–∞ –¥—Ä—É–≥–æ–π\n"
            "4. <b>–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å</b> ‚Äî –ø—Ä–æ—Å–º–æ—Ç—Ä –±–∞–ª–∞–Ω—Å–∞, –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏ —É—Å–ø–µ—à–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤\n"
            "5. <b>–í—ã–≤–µ—Å—Ç–∏ –¥–µ–Ω—å–≥–∏</b> ‚Äî –∑–∞–ø—Ä–æ—Å –≤—ã–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤\n"
            "6. <b>–ê–§–ö-—Ä–µ–∂–∏–º</b> ‚Äî —Å–∫—Ä—ã—Ç—å –Ω–æ–º–µ—Ä–∞ –Ω–∞ –≤—Ä–µ–º—è –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è\n\n"
            f"<b>üìç –ü–æ—á–µ–º—É –≤—ã–±–∏—Ä–∞—é—Ç {config.SERVICE_NAME}?</b>\n"
            "‚úÖ –ü—Ä–æ–∑—Ä–∞—á–Ω—ã–µ —É—Å–ª–æ–≤–∏—è\n"
            "‚úÖ –í—ã–≥–æ–¥–Ω—ã–µ —Ç–∞—Ä–∏—Ñ—ã –∏ –±—ã—Å—Ç—Ä—ã–µ –≤—ã–ø–ª–∞—Ç—ã\n"
            "‚úÖ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ 24/7\n\n"
            "<b>üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞:</b>\n"
            f"–°–≤—è–∑—å —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º: @{config.PAYOUT_MANAGER}\n\n"
            "<b>üîπ –ù–∞—á–Ω–∏—Ç–µ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!</b>"
        )

    bot.send_message(chat_id, help_text, parse_mode='HTML', reply_markup=markup)
    
cooldowns = {}

@bot.message_handler(commands=['start'])
def start(message):
    user_id = message.from_user.id
    chat_id = message.chat.id
    username = message.from_user.username
    db_module.add_user(user_id=user_id, username=username)
    print(f"[DEBUG] Username –¥–ª—è user_id {user_id}: {username}")  # –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥
    current_date = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –ê–§–ö
    was_afk = db_module.get_afk_status(user_id)
    db_module.update_last_activity(user_id)  # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –ê–§–ö
    
    chat_type = bot.get_chat(message.chat.id).type
    is_group = chat_type in ["group", "supergroup"]
    
    with db_module.get_db() as conn:
        cursor = conn.cursor()
        cursor.execute('SELECT BLOCKED FROM requests WHERE ID = ?', (user_id,))
        user = cursor.fetchone()
        if user and user[0] == 1:
            bot.send_message(
                message.chat.id,
                "üö´ –í–∞—Å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏ –≤ –±–æ—Ç–µ!",
                disable_notification=True
            )
            return
    
    is_moderator = db_module.is_moderator(user_id)
    is_admin = user_id in config.ADMINS_ID

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≤—ã—Ö–æ–¥–µ –∏–∑ –ê–§–ö

    if is_group and is_moderator and not is_admin:
        with db_module.get_db() as conn:
            cursor = conn.cursor()
            cursor.execute('SELECT GROUP_ID FROM personal WHERE ID = ? AND TYPE = ?', (user_id, 'moder'))
            group_id = cursor.fetchone()
            group_name = db_module.get_group_name(group_id[0]) if group_id else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –≥—Ä—É–ø–ø–∞"
        
        moderator_text = (
            f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ ü§ù\n"
            f"–í—ã –Ω–∞–∑–Ω–∞—á–µ–Ω—ã –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º –≤ –≥—Ä—É–ø–ø–µ: <b>{group_name}</b>\n\n"
            "–í–æ—Ç —á—Ç–æ –≤—ã –º–æ–∂–µ—Ç–µ:\n\n"
            "1. –ë—Ä–∞—Ç—å –Ω–æ–º–µ—Ä–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É –∏ —Ä–∞–±–æ—Ç–∞—Ç—å —Å –Ω–∏–º–∏\n\n"
            "2. –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞–∑–Ω–∞—á–∏—Ç—å –Ω–æ–º–µ—Ä —Å–ª–µ—Ç–µ–≤—à–∏–º, –µ—Å–ª–∏ —Å –Ω–∏–º —á—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫\n"
            "–ù–µ –∑–ª–æ—É–ø–æ—Ç—Ä–µ–±–ª—è–π—Ç–µ —ç—Ç–∏–º –≤ —é–º–æ—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏—Ö —Ü–µ–ª—è—Ö!\n\n"
            "<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞–º –∫–æ–º–∞–Ω–¥—ã –≤ —á–∞—Ç–µ:</b>\n"
            "1. <b>–ó–∞–ø—Ä–æ—Å–∏—Ç—å –Ω–æ–º–µ—Ä</b>\n"
            "–ó–∞–ø—Ä–æ—Å –Ω–æ–º–µ—Ä–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è –≤–≤–æ–¥–æ–º —Ç–∞–∫–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤ –∫–∞–∫ ¬´—Ç–≥1¬ª –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º –µ–≥–æ –≤ —Ä–∞–±–æ—á–∏–π —á–∞—Ç\n"
            "–í–≤–æ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π –≤–∞–º –ø—Ä–∏—Å–≤–æ–∏–ª–∏ –∏–ª–∏ –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏–ø–∏—Å–∞–Ω –≤–∞—à–µ–º—É –ü–ö\n"
            "<b>–í–∞–∂–Ω–æ!</b> –ú—ã –Ω–µ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–∞ –ü–ö, –∫–æ—Ç–æ—Ä—ã–º –ø—Ä–∏—Å–≤–æ–µ–Ω –Ω–æ–º–µ—Ä –±–æ–ª—å—à–µ 70\n\n"
            "2. –ï—Å–ª–∏ —Å –Ω–æ–º–µ—Ä–æ–º —á—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫, –≤—ã –≤ —Ç–µ—á–µ–Ω–∏–µ 5 –º–∏–Ω—É—Ç (—ç—Ç–æ –≤—Ä–µ–º—è –≤—ã–¥–µ–ª–µ–Ω–Ω–æ–µ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞) –º–æ–∂–µ—Ç–µ –æ—Ç–º–µ—Ç–∏—Ç—å –µ–≥–æ ¬´—Å–ª–µ—Ç–µ–≤—à–∏–º¬ª\n"
            "–ß—Ç–æ–±—ã —É–∫–∞–∑–∞—Ç—å –Ω–æ–º–µ—Ä —Å–ª–µ—Ç–µ–≤—à–∏–º, –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞–ø–∏—Å–∞—Ç—å —Ç–∞–∫—É—é –∫–æ–º–∞–Ω–¥—É: ¬´—Å–ª–µ—Ç –∏ –Ω–æ–º–µ—Ä —Å –∫–æ—Ç–æ—Ä—ã–º –≤—ã —Ä–∞–±–æ—Ç–∞–ª–∏¬ª\n"
            "–ü—Ä–∏–º–µ—Ä: <code>—Å–ª–µ—Ç +79991112345</code>\n"
            "–ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –Ω–æ–º–µ—Ä –æ—Ç–º–µ—Ç–∏—Ç—Å—è —Å–ª–µ—Ç–µ–≤—à–∏–º, –∏ –≤—ã–π–¥–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –Ω–æ–º–µ—Ä —Å–ª–µ—Ç–µ–ª"
        )
        bot.send_message(
            message.chat.id,
            moderator_text,
            parse_mode='HTML',
            disable_notification=True
        )
        return
    
    if user_id in config.ADMINS_ID:
        with db_module.get_db() as conn:
            cursor = conn.cursor()
            cursor.execute('INSERT OR REPLACE INTO requests (ID, LAST_REQUEST, STATUS, BLOCKED, CAN_SUBMIT_NUMBERS) VALUES (?, ?, ?, ?, ?)',
                          (user_id, current_date, 'approved', 0, 1))
            conn.commit()
        if is_group:
            markup = types.InlineKeyboardMarkup()
            markup.row(
                types.InlineKeyboardButton("üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å", callback_data="profile"),
                types.InlineKeyboardButton("üì± –°–¥–∞—Ç—å –Ω–æ–º–µ—Ä", callback_data="submit_number")
            )
            markup.add(types.InlineKeyboardButton("‚öôÔ∏è –ê–¥–º–∏–Ω–∫–∞", callback_data="admin_panel"))
            is_afk = db_module.get_afk_status(user_id)
            afk_button_text = "üü¢ –í–∫–ª—é—á–∏—Ç—å –ê–§–ö" if not is_afk else "üî¥ –í—ã–∫–ª—é—á–∏—Ç—å –ê–§–ö"
            markup.add(types.InlineKeyboardButton(afk_button_text, callback_data="toggle_afk"))
            bot.send_message(
                message.chat.id,
                f"<b>üì¢ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ {config.SERVICE_NAME}</b>\n\n"
                f"<b>‚è≥ –ì—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã:</b> <code>{config.WORK_TIME}</code>\n\n"
                "<b>üíº –ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç?</b>\n"
                "‚Ä¢ <i>–í—ã –ø—Ä–æ–¥–∞—ë—Ç–µ –Ω–æ–º–µ—Ä</i> ‚Äì <b>–º—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º —Å—Ç–∞–±–∏–ª—å–Ω—ã–µ –≤—ã–ø–ª–∞—Ç—ã.</b>\n"
                f"‚Ä¢ <i>–ú–æ–º–µ–Ω—Ç–∞–ª—å–Ω—ã–µ –≤—ã–ø–ª–∞—Ç—ã</i> ‚Äì <b>–ø–æ—Å–ª–µ 5 –º–∏–Ω—É—Ç —Ä–∞–±–æ—Ç—ã.</b>\n\n"
                "<b>üí∞ –¢–∞—Ä–∏—Ñ—ã –Ω–∞ —Å–¥–∞—á—É –Ω–æ–º–µ—Ä–æ–≤:</b>\n"
                f"‚ñ™Ô∏è <code>2.0$</code> –∑–∞ –Ω–æ–º–µ—Ä (—Ö–æ–ª–¥ 5 –º–∏–Ω—É—Ç)\n"
                f"<b>üìç –ü–æ—á–µ–º—É –≤—ã–±–∏—Ä–∞—é—Ç {config.SERVICE_NAME}?</b>\n"
                "‚úÖ <i>–ü—Ä–æ–∑—Ä–∞—á–Ω—ã–µ —É—Å–ª–æ–≤–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–∞</i>\n"
                "‚úÖ <i>–í—ã–≥–æ–¥–Ω—ã–µ —Ç–∞—Ä–∏—Ñ—ã –∏ –º–æ–º–µ–Ω—Ç–∞–ª—å–Ω—ã–µ –≤—ã–ø–ª–∞—Ç—ã</i>\n"
                "‚úÖ <i>–û–ø–µ—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ 24/7</i>\n\n"
                "<b>üîπ –ù–∞—á–Ω–∏—Ç–µ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!</b>",
                reply_markup=markup,
                parse_mode='HTML',
                disable_notification=True
            )
        else:
            # Send a temporary message to get message_id
            temp_message = bot.send_message(
                chat_id,
                "–ó–∞–≥—Ä—É–∑–∫–∞ –º–µ–Ω—é...",
                parse_mode='HTML',
                disable_notification=True
            )
            show_main_menu(chat_id, temp_message.message_id, user_id)
        return
    
    with db_module.get_db() as conn:
        cursor = conn.cursor()
        cursor.execute('SELECT LAST_REQUEST, STATUS FROM requests WHERE ID = ?', (user_id,))
        request = cursor.fetchone()
        if request and request[1] == 'approved':
            if is_group:
                markup = types.InlineKeyboardMarkup()
                markup.row(
                    types.InlineKeyboardButton("üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å", callback_data="profile"),
                    types.InlineKeyboardButton("üì± –°–¥–∞—Ç—å –Ω–æ–º–µ—Ä", callback_data="submit_number")
                )
                is_afk = db_module.get_afk_status(user_id)
                afk_button_text = "üü¢ –í–∫–ª—é—á–∏—Ç—å –ê–§–ö" if not is_afk else "üî¥ –í—ã–∫–ª—é—á–∏—Ç—å –ê–§–ö"
                markup.add(types.InlineKeyboardButton(afk_button_text, callback_data="toggle_afk"))
                bot.send_message(
                    message.chat.id,
                    f"<b>üì¢ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ {config.SERVICE_NAME}</b>\n\n"
                    f"<b>‚è≥ –ì—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã:</b> <code>{config.WORK_TIME}</code>\n\n"
                    "<b>üíº –ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç?</b>\n"
                    "‚Ä¢ <i>–í—ã –ø—Ä–æ–¥–∞—ë—Ç–µ –Ω–æ–º–µ—Ä</i> ‚Äì <b>–º—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º —Å—Ç–∞–±–∏–ª—å–Ω—ã–µ –≤—ã–ø–ª–∞—Ç—ã.</b>\n"
                    f"‚Ä¢ <i>–ú–æ–º–µ–Ω—Ç–∞–ª—å–Ω—ã–µ –≤—ã–ø–ª–∞—Ç—ã</i> ‚Äì <b>–ø–æ—Å–ª–µ 5 –º–∏–Ω—É—Ç —Ä–∞–±–æ—Ç—ã.</b>\n\n"
                    "<b>üí∞ –¢–∞—Ä–∏—Ñ—ã –Ω–∞ —Å–¥–∞—á—É –Ω–æ–º–µ—Ä–æ–≤:</b>\n"
                    f"‚ñ™Ô∏è <code>2.0$</code> –∑–∞ –Ω–æ–º–µ—Ä (—Ö–æ–ª–¥ 5 –º–∏–Ω—É—Ç)\n"
                    f"<b>üìç –ü–æ—á–µ–º—É –≤—ã–±–∏—Ä–∞—é—Ç {config.SERVICE_NAME}?</b>\n"
                    "‚úÖ <i>–ü—Ä–æ–∑—Ä–∞—á–Ω—ã–µ —É—Å–ª–æ–≤–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–∞</i>\n"
                    "‚úÖ <i>–í—ã–≥–æ–¥–Ω—ã–µ —Ç–∞—Ä–∏—Ñ—ã –∏ –º–æ–º–µ–Ω—Ç–∞–ª—å–Ω—ã–µ –≤—ã–ø–ª–∞—Ç—ã</i>\n"
                    "‚úÖ <i>–û–ø–µ—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ 24/7</i>\n\n"
                    "<b>üîπ –ù–∞—á–Ω–∏—Ç–µ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!</b>",
                    reply_markup=markup,
                    parse_mode='HTML',
                    disable_notification=True
                )
            else:
                # Send a temporary message to get message_id
                temp_message = bot.send_message(
                    chat_id,
                    "–ó–∞–≥—Ä—É–∑–∫–∞ –º–µ–Ω—é...",
                    parse_mode='HTML',
                    disable_notification=True
                )
                show_main_menu(chat_id, temp_message.message_id, user_id)
            return
        if request:
            last_request_time = datetime.strptime(request[0], "%Y-%m-%d %H:%M:%S")
            if datetime.now() - last_request_time < timedelta(minutes=15):
                time_left = 15 - ((datetime.now() - last_request_time).seconds // 60)
                bot.send_message(
                    message.chat.id, 
                    f"‚è≥ –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è. –í—ã —Å–º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ {time_left} –º–∏–Ω—É—Ç.",
                    disable_notification=True
                )
                return
        cursor.execute('INSERT OR REPLACE INTO requests (ID, LAST_REQUEST, STATUS, BLOCKED, CAN_SUBMIT_NUMBERS) VALUES (?, ?, ?, ?, ?)',
                      (user_id, current_date, 'pending', 0, 1))
        conn.commit()
        bot.send_message(
            message.chat.id, 
            "üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –û–∂–∏–¥–∞–π—Ç–µ, –ø–æ–∫–∞ –≤–∞—Å –≤–ø—É—Å—Ç–∏—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä.",
            disable_notification=True
        )
        # Notify admins with approval buttons for non-admin/moderator pending users
        with db_module.get_db() as conn:
            cursor = conn.cursor()
            admin_ids = config.ADMINS_ID
            admin_placeholders = ','.join('?' for _ in admin_ids)
            query = f'SELECT ID, LAST_REQUEST FROM requests WHERE STATUS = ? AND ID NOT IN (SELECT ID FROM requests WHERE ID IN ({admin_placeholders}) OR ID IN (SELECT ID FROM personal WHERE TYPE = ?)) AND ID != ?'
            params = ('pending', *admin_ids, 'moderator', user_id)
            cursor.execute(query, params)
            pending_users = cursor.fetchall()
    if pending_users:
        admin_text = "üîî <b>–ó–∞—è–≤–∫–∏ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è</b>\n\n"
        markup = types.InlineKeyboardMarkup()
        
        for pending_user_id, reg_date in pending_users:
            try:
                user = bot.get_chat_member(pending_user_id, pending_user_id).user
                username = f"@{user.username}" if user.username else "–ù–µ—Ç username"
                username_link = f"<a href=\"tg://user?id={pending_user_id}\">{username}</a>" if user.username else "–ù–µ—Ç username"
            except Exception as e:
                print(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å username –¥–ª—è user_id {pending_user_id}: {e}")
                username_link = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"

            admin_text += (
                f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID: <a href=\"https://t.me/@id{pending_user_id}\">{pending_user_id}</a> (–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: {reg_date})\n"
                f"üë§ Username: {username_link}\n\n"
            )

            approve_button = types.InlineKeyboardButton(f"‚úÖ –û–¥–æ–±—Ä–∏—Ç—å {pending_user_id}", callback_data=f"approve_user_{pending_user_id}")
            reject_button = types.InlineKeyboardButton(f"‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å {pending_user_id}", callback_data=f"reject_user_{pending_user_id}")
            markup.row(approve_button, reject_button)

        try:
            for admin_id in config.ADMINS_ID:
                bot.send_message(
                    admin_id,
                    admin_text,
                    parse_mode='HTML',
                    reply_markup=markup,
                    disable_notification=True
                )
        except Exception as e:
            print(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º: {e}")

def show_main_menu(chat_id, message_id, user_id):
    with db_module.get_db() as conn:
        cursor = conn.cursor()
        cursor.execute('SELECT IS_AFK, AFK_LOCKED FROM users WHERE ID = ?', (user_id,))
        result = cursor.fetchone()
        if not result:
            db_module.add_user(user_id)
            is_afk = False
            afk_locked = False
        else:
            is_afk, afk_locked = result

    is_moderator = db_module.is_moderator(user_id)

    if is_moderator:
        with db_module.get_db() as conn:
            cursor = conn.cursor()
            cursor.execute('SELECT GROUP_ID FROM personal WHERE ID = ? AND TYPE = ?', (user_id, 'moder'))
            group_id = cursor.fetchone()
            group_name = db_module.get_group_name(group_id[0]) if group_id else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –≥—Ä—É–ø–ø–∞"

        moderator_text = (
            f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ ü§ù\n"
            f"–í—ã –Ω–∞–∑–Ω–∞—á–µ–Ω—ã –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º –≤ –≥—Ä—É–ø–ø–µ: <b>{group_name}</b>\n\n"
            "–í–æ—Ç —á—Ç–æ –≤—ã –º–æ–∂–µ—Ç–µ:\n"
            "1. –ë—Ä–∞—Ç—å –Ω–æ–º–µ—Ä–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É –∏ —Ä–∞–±–æ—Ç–∞—Ç—å —Å –Ω–∏–º–∏\n"
            "2. –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞–∑–Ω–∞—á–∏—Ç—å –Ω–æ–º–µ—Ä —Å–ª–µ—Ç–µ–≤—à–∏–º, –µ—Å–ª–∏ —Å –Ω–∏–º —á—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫\n"
            "   –ù–µ –∑–ª–æ—É–ø–æ—Ç—Ä–µ–±–ª—è–π—Ç–µ —ç—Ç–∏–º –≤ —é–º–æ—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏—Ö —Ü–µ–ª—è—Ö!\n\n"
            "–î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞–º –∫–æ–º–∞–Ω–¥—ã –≤ —á–∞—Ç–µ:\n"
            "1. –ó–∞–ø—Ä–æ—Å–∏—Ç—å –Ω–æ–º–µ—Ä\n"
            "   –ó–∞–ø—Ä–æ—Å –Ω–æ–º–µ—Ä–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è –≤–≤–æ–¥–æ–º —Ç–∞–∫–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤ –∫–∞–∫ ¬´—Ç–≥1¬ª –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º –µ–≥–æ –≤ —Ä–∞–±–æ—á–∏–π —á–∞—Ç\n"
            "   –í–≤–æ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π –≤–∞–º –ø—Ä–∏—Å–≤–æ–∏–ª–∏ –∏–ª–∏ –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏–ø–∏—Å–∞–Ω –≤–∞—à–µ–º—É –ü–ö\n"
            "   –í–∞–∂–Ω–æ! –ú—ã –Ω–µ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–∞ –ü–ö, –∫–æ—Ç–æ—Ä—ã–º –ø—Ä–∏—Å–≤–æ–µ–Ω –Ω–æ–º–µ—Ä –±–æ–ª—å—à–µ 70\n\n"
            "2. –ï—Å–ª–∏ —Å –Ω–æ–º–µ—Ä–æ–º —á—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫, –≤—ã –≤ —Ç–µ—á–µ–Ω–∏–µ 5 –º–∏–Ω—É—Ç (—ç—Ç–æ –≤—Ä–µ–º—è –≤—ã–¥–µ–ª–µ–Ω–Ω–æ–µ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞) –º–æ–∂–µ—Ç–µ –æ—Ç–º–µ—Ç–∏—Ç—å –µ–≥–æ ¬´—Å–ª–µ—Ç–µ–≤—à–∏–º¬ª\n"
            "   –ß—Ç–æ–±—ã —É–∫–∞–∑–∞—Ç—å –Ω–æ–º–µ—Ä —Å–ª–µ—Ç–µ–≤—à–∏–º, –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞–ø–∏—Å–∞—Ç—å —Ç–∞–∫—É—é –∫–æ–º–∞–Ω–¥—É: ¬´—Å–ª–µ—Ç –∏ –Ω–æ–º–µ—Ä —Å –∫–æ—Ç–æ—Ä—ã–º –≤—ã —Ä–∞–±–æ—Ç–∞–ª–∏¬ª\n"
            "   –ü—Ä–∏–º–µ—Ä: <code>—Å–ª–µ—Ç +79991112345</code>\n"
            "   –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –Ω–æ–º–µ—Ä –æ—Ç–º–µ—Ç–∏—Ç—Å—è —Å–ª–µ—Ç–µ–≤—à–∏–º, –∏ –≤—ã–π–¥–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –Ω–æ–º–µ—Ä —Å–ª–µ—Ç–µ–ª"
        )
        try:
            bot.edit_message_text(
                moderator_text,
                chat_id,
                message_id,
                parse_mode='HTML'
            )
        except telebot.apihelper.ApiTelegramException as e:
            if "message is not modified" in str(e):
                print(f"[DEBUG] –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–µ–Ω–æ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è chat_id={chat_id}, message_id={message_id}")
            else:
                print(f"[ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                bot.send_message(
                    chat_id,
                    moderator_text,
                    parse_mode='HTML',
                    disable_notification=True
                )
    else:
        price = db_module.get_user_price(user_id)
        with db_module.get_db() as conn:
            cursor = conn.cursor()
            cursor.execute('SELECT HOLD_TIME FROM settings')
            result = cursor.fetchone()
            hold_time = result[0] if result else 5

        welcome_text = (
            f"<b>üì¢ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ {config.SERVICE_NAME}</b>\n\n"
            f"<b>‚è≥ –ì—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã:</b> <code>{config.WORK_TIME}</code>\n\n"
            "<b>üíº –ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç?</b>\n"
            "‚Ä¢ <i>–í—ã –ø—Ä–æ–¥–∞—ë—Ç–µ –Ω–æ–º–µ—Ä</i> ‚Äì <b>–º—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º —Å—Ç–∞–±–∏–ª—å–Ω—ã–µ –≤—ã–ø–ª–∞—Ç—ã.</b>\n"
            f"‚Ä¢ <i>–ú–æ–º–µ–Ω—Ç–∞–ª—å–Ω—ã–µ –≤—ã–ø–ª–∞—Ç—ã</i> ‚Äì <b>–ø–æ—Å–ª–µ {hold_time} –º–∏–Ω—É—Ç —Ä–∞–±–æ—Ç—ã.</b>\n\n"
            "<b>üí∞ –¢–∞—Ä–∏—Ñ—ã –Ω–∞ —Å–¥–∞—á—É –Ω–æ–º–µ—Ä–æ–≤:</b>\n"
            f"‚ñ™Ô∏è <code>{price}$</code> –∑–∞ –Ω–æ–º–µ—Ä (—Ö–æ–ª–¥ {hold_time} –º–∏–Ω—É—Ç)\n"
            f"<b>üìç –ü–æ—á–µ–º—É –≤—ã–±–∏—Ä–∞—é—Ç {config.SERVICE_NAME}?</b>\n"
            "‚úÖ <i>–ü—Ä–æ–∑—Ä–∞—á–Ω—ã–µ —É—Å–ª–æ–≤–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–∞</i>\n"
            "‚úÖ <i>–í—ã–≥–æ–¥–Ω—ã–µ —Ç–∞—Ä–∏—Ñ—ã –∏ –º–æ–º–µ–Ω—Ç–∞–ª—å–Ω—ã–µ –≤—ã–ø–ª–∞—Ç—ã</i>\n"
            "‚úÖ <i>–û–ø–µ—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ 24/7</i>\n\n"
            "<b>üîπ –ù–∞—á–Ω–∏—Ç–µ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!</b>"
        )
        markup = types.InlineKeyboardMarkup()
        markup.row(
            types.InlineKeyboardButton("üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å", callback_data="profile"),
            types.InlineKeyboardButton("üì± –°–¥–∞—Ç—å –Ω–æ–º–µ—Ä", callback_data="submit_number")
        )

        is_admin = user_id in config.ADMINS_ID
        if not is_admin and not is_moderator:
            markup.add(types.InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –Ω–æ–º–µ—Ä", callback_data="delete_number"))
            markup.add(types.InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –Ω–æ–º–µ—Ä", callback_data="change_number"))
            markup.add(types.InlineKeyboardButton("üîê 2FA", callback_data="manage_2fa"))
            markup.add(types.InlineKeyboardButton("üì© –ê–ø–µ–ª–ª—è—Ü–∏—è –Ω–æ–º–µ—Ä–∞", callback_data="appeal_number"))
            markup.add(types.InlineKeyboardButton("üîì –°–±—Ä–æ—Å–∏—Ç—å 2FA", callback_data="reset_2fa"))

        if is_admin:
            markup.add(types.InlineKeyboardButton("‚öôÔ∏è –ê–¥–º–∏–Ω–∫–∞", callback_data="admin_panel"))

        afk_button_text = "üî¥ –í—ã–∫–ª—é—á–∏—Ç—å –ê–§–ö" if is_afk and not afk_locked else "üü¢ –í–∫–ª—é—á–∏—Ç—å –ê–§–ö"
        if afk_locked:
            markup.add(types.InlineKeyboardButton(f"üîí –ê–§–ö –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω (–∞–¥–º–∏–Ω)", callback_data="afk_locked_info"))
        else:
            markup.add(types.InlineKeyboardButton(afk_button_text, callback_data="toggle_afk"))

        try:
            bot.edit_message_text(
                welcome_text,
                chat_id,
                message_id,
                parse_mode='HTML',
                reply_markup=markup
            )
        except telebot.apihelper.ApiTelegramException as e:
            if "message is not modified" in str(e):
                print(f"[DEBUG] –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–µ–Ω–æ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è chat_id={chat_id}, message_id={message_id}")
            else:
                print(f"[ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                bot.send_message(
                    chat_id,
                    welcome_text,
                    parse_mode='HTML',
                    reply_markup=markup,
                    disable_notification=True
                )

        if is_afk and afk_locked:
            bot.send_message(
                chat_id,
                "üîî –í—ã –≤ —Ä–µ–∂–∏–º–µ –ê–§–ö, –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º. –ù–æ–º–µ—Ä–∞ —Å–∫—Ä—ã—Ç—ã.",
                parse_mode='HTML',
                disable_notification=True
            )

# ==========================
# üìå –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ê–§–ö –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω (–∞–¥–º–∏–Ω)"
# ==========================

@bot.callback_query_handler(func=lambda call: call.data == "afk_locked_info")
def afk_locked_info(call):
    bot.answer_callback_query(
        call.id,
        "üö´ –†–µ–∂–∏–º –ê–§–ö –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.\nüì© –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
        show_alert=True  # –ß—Ç–æ–±—ã —Ç–µ–∫—Å—Ç –ø–æ–∫–∞–∑–∞–ª—Å—è –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –æ–∫–Ω–µ
    )


@bot.callback_query_handler(func=lambda call: call.data == "back_to_main")
def back_to_main(call):
    user_id = call.from_user.id
    chat_id = call.message.chat.id
    message_id = call.message.message_id
    print(f"[DEBUG] –û–±—Ä–∞–±–æ—Ç—á–∏–∫ back_to_main –≤—ã–∑–≤–∞–Ω –¥–ª—è user_id={user_id}, chat_id={chat_id}")
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    clear_state(user_id)
    
    try:
        bot.answer_callback_query(call.id, "‚Ü© –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        temp_message = bot.send_message(
            chat_id,
            "–ó–∞–≥—Ä—É–∑–∫–∞ –º–µ–Ω—é...",
            parse_mode='HTML',
            disable_notification=True
        )
        show_main_menu(chat_id, temp_message.message_id, user_id)
    except Exception as e:
        print(f"[ERROR] –û—à–∏–±–∫–∞ –≤ back_to_main: {e}")
        bot.send_message(
            chat_id,
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –≤ –º–µ–Ω—é. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            parse_mode='HTML'
        )

# ==========================
# üìå –°–∏—Å—Ç–µ–º–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π (–¥–ª—è –≤–≤–æ–¥–∞ –∏ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥")
# ==========================
user_states = {}  # {user_id: {"state": str, "data": {...}}}

def set_state(user_id, state, data=None):
    user_states[user_id] = {"state": state, "data": data or {}}

def clear_state(user_id):
    user_states.pop(user_id, None)

# ==========================
# üîô –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
# ==========================
@bot.callback_query_handler(func=lambda call: call.data == "go_back")
def go_back(call):
    clear_state(call.from_user.id)
    bot.answer_callback_query(call.id, "‚Ü© –í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é")
    show_main_menu(call.message.chat.id, call.message.message_id, call.from_user.id)


# ==========================
# ‚úÖ –û–î–û–ë–†–ï–ù–ò–ï –ó–ê–Ø–í–ö–ò
# ==========================
@bot.callback_query_handler(func=lambda call: call.data.startswith("approve_user_"))
def approve_user_callback(call):
    if call.from_user.id not in config.ADMINS_ID:
        bot.answer_callback_query(call.id, "üö´ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤!")
        return

    user_id = int(call.data.split("_")[2])
    with db.get_db() as conn:
        cursor = conn.cursor()
        cursor.execute('UPDATE requests SET STATUS = ? WHERE ID = ?', ('approved', user_id))
        conn.commit()

    try:
        bot.send_message(
            user_id,
            "‚úÖ <b>–ó–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞!</b>\n"
            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
            "üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –¢–µ–ø–µ—Ä—å —É –≤–∞—Å –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É.\n"
            "–í–≤–µ–¥–∏—Ç–µ <code>/start</code> –¥–ª—è –Ω–∞—á–∞–ª–∞.",
            parse_mode='HTML'
        )
        text = (
            "‚úÖ <b>–ó–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞</b>\n"
            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <a href='tg://user?id={user_id}'>–ü—Ä–æ—Ñ–∏–ª—å</a>\n"
            "–ü–æ–ª—É—á–∏–ª –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø."
        )
    except:
        text = (
            "‚úÖ <b>–ó–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞</b>\n"
            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <a href='tg://user?id={user_id}'>–ü—Ä–æ—Ñ–∏–ª—å</a>\n"
            "–î–æ—Å—Ç—É–ø –≤—ã–¥–∞–Ω.\n"
            "‚ö†Ô∏è –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ."
        )

    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("üìù –ö —Å–ø–∏—Å–∫—É –∑–∞—è–≤–æ–∫", callback_data="pending_requests"))
    bot.edit_message_text(text, call.message.chat.id, call.message.message_id, parse_mode='HTML', reply_markup=markup)

# ==========================
# ‚ùå –û–¢–ö–õ–û–ù–ï–ù–ò–ï –ó–ê–Ø–í–ö–ò
# ==========================
@bot.callback_query_handler(func=lambda call: call.data.startswith("reject_user_"))
def reject_user_callback(call):
    if call.from_user.id not in config.ADMINS_ID:
        bot.answer_callback_query(call.id, "üö´ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤!")
        return

    user_id = int(call.data.split("_")[2])
    with db.get_db() as conn:
        cursor = conn.cursor()
        cursor.execute(
            'UPDATE requests SET STATUS = ?, LAST_REQUEST = ? WHERE ID = ?',
            ('rejected', datetime.now().strftime("%Y-%m-%d %H:%M:%S"), user_id)
        )
        conn.commit()

    try:
        bot.send_message(
            user_id,
            "‚ùå <b>–î–æ—Å—Ç—É–ø –æ—Ç–∫–ª–æ–Ω—ë–Ω</b>\n"
            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
            "‚è≥ –ü–æ–≤—Ç–æ—Ä–Ω–æ –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –º–æ–∂–Ω–æ —á–µ—Ä–µ–∑ <b>15 –º–∏–Ω—É—Ç</b>.",
            parse_mode='HTML'
        )
        text = (
            "‚ùå <b>–ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞</b>\n"
            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <a href='tg://user?id={user_id}'>–ü—Ä–æ—Ñ–∏–ª—å</a>\n"
            "–ú–æ–∂–µ—Ç –ø–æ–¥–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ —á–µ—Ä–µ–∑ 15 –º–∏–Ω—É—Ç."
        )
    except:
        text = (
            "‚ùå <b>–ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞</b>\n"
            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <a href='tg://user?id={user_id}'>–ü—Ä–æ—Ñ–∏–ª—å</a>\n"
            "‚ö†Ô∏è –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ."
        )

    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("üìù –ö —Å–ø–∏—Å–∫—É –∑–∞—è–≤–æ–∫", callback_data="pending_requests"))
    bot.edit_message_text(text, call.message.chat.id, call.message.message_id, parse_mode='HTML', reply_markup=markup)



# ==========================
# üîî –ó–ê–Ø–í–ö–ò –ù–ê –í–°–¢–£–ü–õ–ï–ù–ò–ï
# ==========================
@bot.callback_query_handler(func=lambda call: call.data == "pending_requests")
def pending_requests(call):
    if call.from_user.id not in config.ADMINS_ID:
        bot.answer_callback_query(call.id, "üö´ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤!")
        return

    with db_module.get_db() as conn:
        cursor = conn.cursor()
        admin_ids = config.ADMINS_ID
        if not admin_ids:
            query = 'SELECT ID, LAST_REQUEST FROM requests WHERE STATUS = ? AND ID NOT IN (SELECT ID FROM personal WHERE TYPE = ?)'
            params = ('pending', 'moderator')
        else:
            placeholders = ','.join('?' for _ in admin_ids)
            query = f'''
                SELECT ID, LAST_REQUEST FROM requests
                WHERE STATUS = ?
                AND ID NOT IN (
                    SELECT ID FROM requests WHERE ID IN ({placeholders})
                    OR ID IN (SELECT ID FROM personal WHERE TYPE = ?)
                )
            '''
            params = ('pending', *admin_ids, 'moderator')
        cursor.execute(query, params)
        pending_users = cursor.fetchall()

    text = "üîî <b>–ó–∞—è–≤–∫–∏ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ</b>\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
    markup = types.InlineKeyboardMarkup()

    if pending_users:
        for uid, date in pending_users:
            try:
                user = bot.get_chat_member(uid, uid).user
                uname = f"@{user.username}" if user.username else "–ë–µ–∑ username"
                link = f"<a href='tg://user?id={uid}'>{uname}</a>"
            except:
                link = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"

            text += f"üë§ {link}\nüÜî <code>{uid}</code>\nüìÖ –ó–∞—è–≤–∫–∞: {date}\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
            markup.row(
                types.InlineKeyboardButton("‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"approve_user_{uid}"),
                types.InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_user_{uid}")
            )
    else:
        text += "üì≠ –ù–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫ –Ω–µ—Ç."

    markup.add(types.InlineKeyboardButton("üîô –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel"))
    markup.add(types.InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))

    bot.edit_message_text(text, call.message.chat.id, call.message.message_id, parse_mode='HTML', reply_markup=markup)




# ==========================
# üì® –ê–ü–ï–õ–õ–Ø–¶–ò–Ø –ù–û–ú–ï–†–ê
# ==========================
@bot.callback_query_handler(func=lambda call: call.data == "appeal_number")
def start_appeal_number(call):
    set_state(call.from_user.id, "appeal_number")
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="go_back"))
    bot.send_message(
        call.message.chat.id,
        "‚úè <b>–ê–ø–µ–ª–ª—è—Ü–∏—è –Ω–æ–º–µ—Ä–∞</b>\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –¥–ª—è –∞–ø–µ–ª–ª—è—Ü–∏–∏:",
        parse_mode='HTML',
        reply_markup=markup
    )

@bot.message_handler(func=lambda m: user_states.get(m.from_user.id, {}).get("state") == "appeal_number")
def process_appeal_number(message):
    user_id = message.from_user.id
    number = message.text.strip()
    clear_state(user_id)

    with db_module.get_db() as conn:
        cursor = conn.cursor()
        cursor.execute('SELECT STATUS FROM numbers WHERE NUMBER = ?', (number,))
        row = cursor.fetchone()

    if not row:
        bot.send_message(message.chat.id, f"‚ùå <b>–û—à–∏–±–∫–∞</b>\nüì± {number} ‚Äî –Ω–µ –Ω–∞–π–¥–µ–Ω.", parse_mode='HTML')
        return

    if row[0] != "–Ω–µ–≤–∞–ª–∏–¥":
        bot.send_message(message.chat.id, f"‚ö†Ô∏è <b>–û—Ç–∫–∞–∑</b>\nüì± {number} ‚Äî –∞–ø–µ–ª–ª—è—Ü–∏—è –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞.")
        return

    with db_module.get_db() as conn:
        cursor = conn.cursor()
        cursor.execute('INSERT INTO appeals (NUMBER, USER_ID, STATUS) VALUES (?, ?, "pending")', (number, user_id))
        conn.commit()

    bot.send_message(message.chat.id, f"üì® <b>–ê–ø–µ–ª–ª—è—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞</b>\nüì± {number} ‚Äî –æ–∂–∏–¥–∞–µ—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è.")



# ==========================
# üìû –£–î–ê–õ–ï–ù–ò–ï –ù–û–ú–ï–†–ê
# ==========================
@bot.callback_query_handler(func=lambda call: call.data == "delete_number")
def handle_delete_number(call):
    user_id = call.from_user.id
    if user_id in config.ADMINS_ID or db_module.is_moderator(user_id):
        bot.answer_callback_query(call.id, "‚ùå –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        return

    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="go_back"))

    set_state(user_id, "delete_number")
    bot.send_message(
        call.message.chat.id,
        "üóë <b>–£–¥–∞–ª–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–æ–≤</b>\n"
        "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è (–ø–æ –æ–¥–Ω–æ–º—É –≤ —Å—Ç—Ä–æ–∫–µ):\n"
        "üìå –ü—Ä–∏–º–µ—Ä:\n+79991234567\n79091234567\n9021234567",
        parse_mode='HTML',
        reply_markup=markup
    )

@bot.message_handler(func=lambda m: user_states.get(m.from_user.id, {}).get("state") == "delete_number")
def process_delete_number(message):
    user_id = message.from_user.id
    text = message.text.strip()
    if not text:
        bot.send_message(message.chat.id, "‚ö†Ô∏è –í–≤–æ–¥ –ø—É—Å—Ç–æ–π. –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        clear_state(user_id)
        return

    nums = [n.strip() for n in text.split("\n") if n.strip()]
    deleted, not_found, invalid = 0, 0, 0

    with db_module.get_db() as conn:
        cursor = conn.cursor()
        for num in nums:
            norm = is_russian_number(num)
            if not norm:
                invalid += 1
                continue
            cursor.execute('SELECT * FROM numbers WHERE ID_OWNER = ? AND NUMBER = ?', (user_id, norm))
            if not cursor.fetchone():
                not_found += 1
                continue
            cursor.execute('DELETE FROM numbers WHERE ID_OWNER = ? AND NUMBER = ?', (user_id, norm))
            conn.commit()
            deleted += 1

    bot.send_message(
        message.chat.id,
        f"üìä <b>–ò—Ç–æ–≥:</b>\n"
        f"üóë –£–¥–∞–ª–µ–Ω–æ: {deleted}\n"
        f"‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ: {not_found}\n"
        f"‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö: {invalid}",
        parse_mode='HTML'
    )
    clear_state(user_id)
    start(message)


# ==========================
# üîÑ –°–ú–ï–ù–ê –ù–û–ú–ï–†–ê
# ==========================

@bot.callback_query_handler(func=lambda call: call.data == "change_number")
def handle_change_number(call):
    if call.from_user.id in config.ADMINS_ID or db_module.is_moderator(call.from_user.id):
        bot.answer_callback_query(call.id, "üö´ –¢–æ–ª—å–∫–æ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π!")
        return
    set_state(call.from_user.id, "change_number_old")
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="go_back"))
    bot.send_message(
        call.message.chat.id,
        "üîÑ <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞</b>\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n–í–≤–µ–¥–∏—Ç–µ —Å—Ç–∞—Ä—ã–π –Ω–æ–º–µ—Ä:",
        parse_mode='HTML',
        reply_markup=markup
    )

@bot.message_handler(func=lambda m: user_states.get(m.from_user.id, {}).get("state") == "change_number_old")
def process_old_number(message):
    num = is_russian_number(message.text.strip())
    if not num:
        bot.send_message(message.chat.id, "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä!")
        clear_state(message.from_user.id)
        return
    with db_module.get_db() as conn:
        c = conn.cursor()
        c.execute('SELECT * FROM numbers WHERE ID_OWNER = ? AND NUMBER = ?', (message.from_user.id, num))
        if not c.fetchone():
            bot.send_message(message.chat.id, "‚ö†Ô∏è –ù–æ–º–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            clear_state(message.from_user.id)
            return
    set_state(message.from_user.id, "change_number_new", {"old": num})
    bot.send_message(message.chat.id, f"‚úè –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä –¥–ª—è –∑–∞–º–µ–Ω—ã {num}:")

@bot.message_handler(func=lambda m: user_states.get(m.from_user.id, {}).get("state") == "change_number_new")
def process_new_number(message):
    old = user_states[message.from_user.id]["data"]["old"]
    num = is_russian_number(message.text.strip())
    if not num:
        bot.send_message(message.chat.id, "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä!")
        clear_state(message.from_user.id)
        return
    with db_module.get_db() as conn:
        c = conn.cursor()
        c.execute('SELECT * FROM numbers WHERE NUMBER = ? AND ID_OWNER != ?', (num, message.from_user.id))
        if c.fetchone():
            bot.send_message(message.chat.id, "‚ùå –≠—Ç–æ—Ç –Ω–æ–º–µ—Ä —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º!")
            clear_state(message.from_user.id)
            return
        c.execute('UPDATE numbers SET NUMBER = ? WHERE ID_OWNER = ? AND NUMBER = ?', (num, message.from_user.id, old))
        conn.commit()
    bot.send_message(message.chat.id, f"‚úÖ –ù–æ–º–µ—Ä –∏–∑–º–µ–Ω—ë–Ω\nüì¥ –ë—ã–ª: {old}\nüì± –°—Ç–∞–ª: {num}")
    clear_state(message.from_user.id)



# ==========================
# üîê 2FA
# ==========================
@bot.callback_query_handler(func=lambda call: call.data == "manage_2fa")
def manage_2fa(call):
    set_state(call.from_user.id, "set_2fa")
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="go_back"))
    bot.send_message(call.message.chat.id, "üîê <b>–£—Å—Ç–∞–Ω–æ–≤–∫–∞ 2FA</b>\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–∞—Ä–æ–ª—å:", parse_mode='HTML', reply_markup=markup)

@bot.message_handler(func=lambda m: user_states.get(m.from_user.id, {}).get("state") == "set_2fa")
def process_2fa_input(message):
    fa = message.text.strip()
    if not fa:
        bot.send_message(message.chat.id, "‚ùå –ü–∞—Ä–æ–ª—å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!")
        return
    with db_module.get_db() as conn:
        c = conn.cursor()
        c.execute('UPDATE users SET fa = ? WHERE ID = ?', (fa, message.from_user.id))
        c.execute('UPDATE numbers SET fa = ? WHERE ID_OWNER = ?', (fa, message.from_user.id))
        conn.commit()
    bot.send_message(message.chat.id, f"‚úÖ 2FA —Å–æ—Ö—Ä–∞–Ω—ë–Ω\nüîë –ü–∞—Ä–æ–ª—å: {fa}")
    clear_state(message.from_user.id)

@bot.callback_query_handler(func=lambda call: call.data == "reset_2fa")
def reset_2fa(call):
    with db_module.get_db() as conn:
        c = conn.cursor()
        c.execute('UPDATE users SET fa = NULL WHERE ID = ?', (call.from_user.id,))
        c.execute('UPDATE numbers SET fa = NULL WHERE ID_OWNER = ?', (call.from_user.id,))
        conn.commit()
    bot.send_message(call.message.chat.id, "üîì 2FA —Å–±—Ä–æ—à–µ–Ω")

#===========================================================================
#======================–ü–†–û–§–ò–õ–¨=====================–ü–†–û–§–ò–õ–¨==================
#===========================================================================




@bot.callback_query_handler(func=lambda call: call.data == "profile")
def show_profile(call):
    user_id = call.from_user.id
    db.update_last_activity(user_id)
    check_balance_and_fix(user_id)
    bot.answer_callback_query(
        call.id, "üë§–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å")

    with db.get_db() as conn:
        cursor = conn.cursor()
        cursor.execute('SELECT * FROM users WHERE ID = ?', (user_id,))
        user = cursor.fetchone()

        cursor.execute('SELECT PRICE, HOLD_TIME FROM settings')
        result = cursor.fetchone()
        price, hold_time = result if result else (2.0, 5)

        if user:
            cursor.execute('SELECT COUNT(*) FROM numbers WHERE ID_OWNER = ? AND SHUTDOWN_DATE = "0"', (user_id,))
            active_numbers = cursor.fetchone()[0]

            cursor.execute('SELECT COUNT(*) FROM numbers WHERE ID_OWNER = ? AND STATUS = "–æ—Ç—Å—Ç–æ—è–ª"', (user_id,))
            successful_numbers = cursor.fetchone()[0]

            roles = []
            if user_id in config.ADMINS_ID:
                roles.append("üëë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä")
            if db.is_moderator(user_id):
                roles.append("üõ° –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä")
            if not roles:
                roles.append("üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")

            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—É—é —Ü–µ–Ω—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            price = db_module.get_user_price(user_id)

            profile_text = (
                f"ü™™ <b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å</b>\n"
                f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
                f"üîó <b>ID —Å—Å—ã–ª–∫–æ–π:</b> <code>https://t.me/@id{user_id}</code>\n"
                f"üÜî <b>ID:</b> <code>{user[0]}</code>\n"
                f"üí∞ <b>–ë–∞–ª–∞–Ω—Å:</b> {user[1]} $\n"
                f"üì± <b>–ê–∫—Ç–∏–≤–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤:</b> {active_numbers}\n"
                f"‚úÖ <b>–£—Å–ø–µ—à–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤:</b> {successful_numbers}\n"
                f"üé≠ <b>–†–æ–ª—å:</b> {' | '.join(roles)}\n"
                f"üìÖ <b>–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:</b> {user[2]}\n"
                f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
                f"<i>üíµ –¢–∞—Ä–∏—Ñ: {price}$ | ‚è± –•–æ–ª–¥: {hold_time} –º–∏–Ω—É—Ç</i>"
            )

            markup = types.InlineKeyboardMarkup()
            markup.add(
                types.InlineKeyboardButton("üí≥ –í—ã–≤–µ—Å—Ç–∏", callback_data="withdraw"),
                types.InlineKeyboardButton("üì± –ú–æ–∏ –Ω–æ–º–µ—Ä–∞", callback_data="my_numbers")
            )

            if user_id in config.ADMINS_ID:
                cursor.execute('SELECT COUNT(*) FROM users')
                total_users = cursor.fetchone()[0]
                cursor.execute('SELECT COUNT(*) FROM numbers WHERE SHUTDOWN_DATE = "0"')
                active_total = cursor.fetchone()[0]
                cursor.execute('SELECT COUNT(*) FROM numbers')
                total_numbers = cursor.fetchone()[0]

                profile_text += (
                    f"\n\nüìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞</b>\n"
                    f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
                    f"üì± –ê–∫—Ç–∏–≤–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤: {active_total}\n"
                    f"üìû –í—Å–µ–≥–æ –Ω–æ–º–µ—Ä–æ–≤: {total_numbers}"
                )

            markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main"))

            try:
                bot.delete_message(call.message.chat.id, call.message.message_id)
            except:
                pass

            bot.send_message(
                call.message.chat.id,
                profile_text,
                reply_markup=markup,
                parse_mode='HTML'
            )



@bot.callback_query_handler(func=lambda call: call.data == "withdraw")
def start_withdrawal_request(call):
    user_id = call.from_user.id
    db.update_last_activity(user_id)
    
    with db.get_db() as conn:
        cursor = conn.cursor()
        cursor.execute('SELECT BALANCE FROM users WHERE ID = ?', (user_id,))
        balance = cursor.fetchone()[0]
        
        if balance > 0:
            msg = bot.edit_message_text(f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {balance}$\nüí≥ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –≤—ã–≤–æ–¥–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–î–∞' –¥–ª—è –≤—ã–≤–æ–¥–∞ –≤—Å–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞:",
                                      call.message.chat.id,
                                      call.message.message_id)
            bot.register_next_step_handler(msg, handle_withdrawal_request, balance)
        else:
            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton("üë§ –°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º", url=f"https://t.me/{config.PAYOUT_MANAGER}"))
            markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –ø—Ä–æ—Ñ–∏–ª—å", callback_data="profile"))
            markup.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
            bot.edit_message_text(f"‚ùå –ù–∞ –≤–∞—à–µ–º –±–∞–ª–∞–Ω—Å–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –≤—ã–≤–æ–¥–∞.\n\n"
                               f"–ï—Å–ª–∏ –≤—ã —Å—á–∏—Ç–∞–µ—Ç–µ, —á—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –∏–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã –ø–æ –≤—ã–≤–æ–¥—É, "
                               f"—Å–≤—è–∂–∏—Ç–µ—Å—å —Å –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–º –∑–∞ –≤—ã–ø–ª–∞—Ç—ã: @{config.PAYOUT_MANAGER}",
                                call.message.chat.id,
                                call.message.message_id,
                                reply_markup=markup)


def handle_withdrawal_request(message, amount):
    user_id = message.from_user.id
    chat_id = message.chat.id  # –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è get_chat_member

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –¥–ª—è username
    try:
        user_info = bot.get_chat_member(chat_id, user_id).user
        username = f"@{user_info.username}" if user_info.username else "–ù–µ—Ç username"
        username_link = f"<a href=\"tg://user?id={user_id}\">{username}</a>" if user_info.username else "–ù–µ—Ç username"
    except Exception as e:
        print(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å username –¥–ª—è user_id {user_id}: {e}")
        username_link = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"

    with db.get_db() as conn:
        cursor = conn.cursor()
        cursor.execute('SELECT BALANCE FROM users WHERE ID = ?', (user_id,))
        user = cursor.fetchone()

        if not user or user[0] <= 0:
            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –ø—Ä–æ—Ñ–∏–ª—å", callback_data="profile"))
            markup.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
            bot.send_message(message.chat.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ –¥–ª—è –≤—ã–≤–æ–¥–∞.", reply_markup=markup)
            return
        withdrawal_amount = user[0]
        
        try:
            if message.text != "–î–∞" and message.text != "–¥–∞":
                try:
                    requested_amount = float(message.text)
                    if requested_amount <= 0:
                        markup = types.InlineKeyboardMarkup()
                        markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –ø—Ä–æ—Ñ–∏–ª—å", callback_data="profile"))
                        markup.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
                        bot.send_message(message.chat.id, "‚ùñ –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ.", reply_markup=markup)
                        return
                        
                    if requested_amount > withdrawal_amount:
                        markup = types.InlineKeyboardMarkup()
                        markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –ø—Ä–æ—Ñ–∏–ª—å", callback_data="profile"))
                        markup.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
                        bot.send_message(message.chat.id, 
                                      f"‚ùå –ó–∞–ø—Ä–æ—à–µ–Ω–Ω–∞—è —Å—É–º–º–∞ ({requested_amount}$) –ø—Ä–µ–≤—ã—à–∞–µ—Ç –≤–∞—à –±–∞–ª–∞–Ω—Å ({withdrawal_amount}$).", 
                                      reply_markup=markup)
                        return
                        
                    withdrawal_amount = requested_amount
                except ValueError:
                    pass
            
            processing_message = bot.send_message(message.chat.id, 
                                        f"‚è≥ <b>–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –≤—ã–≤–æ–¥ {withdrawal_amount}$...</b>\n\n"
                                        f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ, –º—ã —Ñ–æ—Ä–º–∏—Ä—É–µ–º –≤–∞—à —á–µ–∫.",
                                        parse_mode='HTML')
            
            # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å –∫–∞–∑–Ω—ã –∏–∑ API CryptoBot
            treasury_balance = db_module.get_treasury_balance()
            logging.info(f"[DEBUG] Treasury balance: {treasury_balance}, Withdrawal amount: {withdrawal_amount}")
            
            if withdrawal_amount > treasury_balance:
                markup = types.InlineKeyboardMarkup()
                markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –ø—Ä–æ—Ñ–∏–ª—å", callback_data="profile"))
                markup.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
                bot.edit_message_text(
                    f"‚ùå <b>–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –≤—ã–≤–æ–¥ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω</b>\n\n"
                    f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                    message.chat.id, 
                    processing_message.message_id,
                    parse_mode='HTML',
                    reply_markup=markup
                )
                
                admin_message = (
                    f"‚ö†Ô∏è <b>–ü–æ–ø—ã—Ç–∫–∞ –≤—ã–≤–æ–¥–∞ –ø—Ä–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤–∞—Ö</b>\n\n"
                    f"üë§ ID: <a href=\"https://t.me/@id{user_id}\">{user_id}</a>\n"
                    f"üë§ Username: {username_link}\n"
                    f"üíµ –ó–∞–ø—Ä–æ—à–µ–Ω–Ω–∞—è —Å—É–º–º–∞: {withdrawal_amount}$\n"
                    f"üí∞ –ë–∞–ª–∞–Ω—Å –∫–∞–∑–Ω—ã: {treasury_balance}$\n\n"
                    f"‚õîÔ∏è –í—ã–≤–æ–¥ –±—ã–ª –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∏–∑-–∑–∞ –Ω–µ—Ö–≤–∞—Ç–∫–∏ —Å—Ä–µ–¥—Å—Ç–≤ –≤ –∫–∞–∑–Ω–µ."
                )
                for admin_id in config.ADMINS_ID:
                    try:
                        bot.send_message(admin_id, admin_message, parse_mode='HTML')
                    except:
                        continue
                return
            
            auto_input_status = db_module.get_auto_input_status()
            
            if not auto_input_status:
                cursor.execute('INSERT INTO withdraws (ID, AMOUNT, DATE, STATUS) VALUES (?, ?, ?, ?)', 
                             (user_id, withdrawal_amount, datetime.now().strftime("%Y-%m-%d %H:%M:%S"), "pending"))
                conn.commit()
                new_balance = user[0] - withdrawal_amount
                cursor.execute('UPDATE users SET BALANCE = ? WHERE ID = ?', (new_balance, user_id))
                conn.commit()
                # –í—ã—á–∏—Å–ª—è–µ–º –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å –∫–∞–∑–Ω—ã –¥–ª—è –¥—Ä—É–≥–∏—Ö —Ü–µ–ª–µ–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è)
                treasury_new_balance = treasury_balance - withdrawal_amount
                # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–∑—É, –µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è
                db_module.update_treasury_balance(-withdrawal_amount)
                
                markup = types.InlineKeyboardMarkup()
                markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –ø—Ä–æ—Ñ–∏–ª—å", callback_data="profile"))
                markup.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
                
                bot.edit_message_text(
                    f"‚úÖ <b>–ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ –ø—Ä–∏–Ω—è—Ç!</b>\n\n"
                    f"–°—É–º–º–∞: <code>{withdrawal_amount}$</code>\n"
                    f"–ù–æ–≤–æ–π –±–∞–ª–∞–Ω—Å: <code>{new_balance}$</code>\n\n"
                    f"‚ö†Ô∏è –ê–≤—Ç–æ-–≤—ã–≤–æ–¥ –æ—Ç–∫–ª—é—á–µ–Ω. –°—Ä–µ–¥—Å—Ç–≤–∞ –±—É–¥—É—Ç –≤—ã–≤–µ–¥–µ–Ω—ã –≤—Ä—É—á–Ω—É—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.",
                    message.chat.id, 
                    processing_message.message_id,
                    parse_mode='HTML',
                    reply_markup=markup
                )
                
                admin_message = (
                    f"üí∞ <b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–ø–ª–∞—Ç—É</b>\n\n"
                    f"üë§ ID: <a href=\"https://t.me/@id{user_id}\">{user_id}</a>\n"
                    f"üë§ Username: {username_link}\n"
                    f"üíµ –°—É–º–º–∞: {withdrawal_amount}$\n"
                    f"üí∞ –ë–∞–ª–∞–Ω—Å –∫–∞–∑–Ω—ã: {treasury_balance}$"  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—ã–π –±–∞–ª–∞–Ω—Å
                )
                admin_markup = types.InlineKeyboardMarkup()
                admin_markup.add(
                    types.InlineKeyboardButton("‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —á–µ–∫", callback_data=f"send_check_{user_id}_{withdrawal_amount}"),
                    types.InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_withdraw_{user_id}_{withdrawal_amount}")
                )
                for admin_id in config.ADMINS_ID:
                    try:
                        bot.send_message(admin_id, admin_message, reply_markup=admin_markup, parse_mode='HTML')
                    except:
                        continue
                return
            
            try:
                crypto_api = crypto_pay.CryptoPay()
                cheque_result = crypto_api.create_check(
                    amount=withdrawal_amount,
                    asset="USDT",
                    description=f"–í—ã–ø–ª–∞—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}"
                )
                
                if cheque_result.get("ok", False):
                    cheque = cheque_result.get("result", {})
                    cheque_link = cheque.get("bot_check_url", "")
                    
                    if cheque_link:
                        new_balance = user[0] - withdrawal_amount
                        cursor.execute('UPDATE users SET BALANCE = ? WHERE ID = ?', (new_balance, user_id))
                        conn.commit()
                        # –í—ã—á–∏—Å–ª—è–µ–º –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å –∫–∞–∑–Ω—ã –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
                        treasury_new_balance = treasury_balance - withdrawal_amount
                        # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–∑—É, –µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è
                        db_module.update_treasury_balance(-withdrawal_amount)
                        db_module.log_treasury_operation("–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–≤–æ–¥", withdrawal_amount, treasury_new_balance)
                        
                        markup = types.InlineKeyboardMarkup()
                        markup.add(types.InlineKeyboardButton("üí≥ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —á–µ–∫", url=cheque_link))
                        markup.add(types.InlineKeyboardButton("üë§ –ü—Ä–æ—Ñ–∏–ª—å", callback_data="profile"))
                        markup.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
                        
                        bot.edit_message_text(
                            f"‚úÖ <b>–í–∞—à –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!</b>\n\n"
                            f"–°—É–º–º–∞: <code>{withdrawal_amount}$</code>\n"
                            f"–ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: <code>{new_balance}$</code>\n\n"
                            f"–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —á–µ–∫:",
                            message.chat.id, 
                            processing_message.message_id,
                            parse_mode='HTML',
                            reply_markup=markup
                        )
                        
                        log_entry = f"[{datetime.now().strftime('%Y-%m-%d %H:%M:%S')}] | –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–≤–æ–¥ | –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} | –°—É–º–º–∞ {withdrawal_amount}$"
                        with open("withdrawals_log.txt", "a", encoding="utf-8") as log_file:
                            log_file.write(log_entry + "\n")
                        
                        admin_message = (
                            f"üí∏ <b>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–≤–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω</b>\n\n"
                            f"üë§ ID: <a href=\"https://t.me/@id{user_id}\">{user_id}</a>\n"
                            f"üë§ Username: {username_link}\n"
                            f"üíµ –°—É–º–º–∞: {withdrawal_amount}$\n"
                            f"üí∞ –ë–∞–ª–∞–Ω—Å –∫–∞–∑–Ω—ã: {treasury_new_balance}$\n\n"
                            f"üîó –ß–µ–∫: {cheque_link}"
                        )
                        for admin_id in config.ADMINS_ID:
                            try:
                                bot.send_message(admin_id, admin_message, parse_mode='HTML')
                            except:
                                continue
                    else:
                        markup = types.InlineKeyboardMarkup()
                        markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –ø—Ä–æ—Ñ–∏–ª—å", callback_data="profile"))
                        markup.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
                        bot.edit_message_text(
                            f"‚ùå <b>–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —á–µ–∫ –¥–ª—è –≤—ã–≤–æ–¥–∞</b>\n\n"
                            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                            message.chat.id, 
                            processing_message.message_id,
                            parse_mode='HTML',
                            reply_markup=markup
                        )
                else:
                    markup = types.InlineKeyboardMarkup()
                    markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –ø—Ä–æ—Ñ–∏–ª—å", callback_data="profile"))
                    markup.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
                    bot.edit_message_text(
                        f"‚ùå <b>–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —á–µ–∫ –¥–ª—è –≤—ã–≤–æ–¥–∞</b>\n\n"
                        f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                        message.chat.id, 
                        processing_message.message_id,
                        parse_mode='HTML',
                        reply_markup=markup
                    )
            except Exception as e:
                print(f"[ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —á–µ–∫–∞ –¥–ª—è user_id {user_id}: {e}")
                markup = types.InlineKeyboardMarkup()
                markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –ø—Ä–æ—Ñ–∏–ª—å", callback_data="profile"))
                markup.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
                bot.edit_message_text(
                    f"‚ùå <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—ã–≤–æ–¥–∞</b>\n\n"
                    f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                    message.chat.id, 
                    processing_message.message_id,
                    parse_mode='HTML',
                    reply_markup=markup
                )
                admin_message = (
                    f"‚ö†Ô∏è <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º –≤—ã–≤–æ–¥–µ</b>\n\n"
                    f"üë§ ID: <a href=\"https://t.me/@id{user_id}\">{user_id}</a>\n"
                    f"üë§ Username: {username_link}\n"
                    f"üíµ –°—É–º–º–∞: {withdrawal_amount}$\n"
                    f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"
                )
                for admin_id in config.ADMINS_ID:
                    try:
                        bot.send_message(admin_id, admin_message, parse_mode='HTML')
                    except:
                        continue
        except Exception as e:
            print(f"[ERROR] –û–±—â–∞—è –æ—à–∏–±–∫–∞ –≤ handle_withdrawal_request –¥–ª—è user_id {user_id}: {e}")
            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –ø—Ä–æ—Ñ–∏–ª—å", callback_data="profile"))
            markup.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
            bot.send_message(message.chat.id, 
                           f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", 
                           reply_markup=markup)
            
@bot.callback_query_handler(func=lambda call: call.data.startswith("send_check_"))
def send_check_callback(call):
    if call.from_user.id not in config.ADMINS_ID:
        bot.answer_callback_query(call.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è!")
        return

    try:
        parts = call.data.split("_")
        user_id = int(parts[2])
        amount = float(parts[3])

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –¥–ª—è username
        try:
            user_info = bot.get_chat_member(user_id, user_id).user
            username = f"@{user_info.username}" if user_info.username else "–ù–µ—Ç username"
            username_link = f"<a href=\"tg://user?id={user_id}\">{username}</a>" if user_info.username else "–ù–µ—Ç username"
        except Exception as e:
            print(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å username –¥–ª—è user_id {user_id}: {e}")
            username_link = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        with db.get_db() as conn:
            cursor = conn.cursor()
            cursor.execute('SELECT BALANCE FROM users WHERE ID = ?', (user_id,))
            user = cursor.fetchone()
            if not user or user[0] < amount:
                bot.answer_callback_query(call.id, f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}!")
                bot.edit_message_text(
                    f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —á–µ–∫ –Ω–∞ {amount}$ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ.",
                    call.message.chat.id,
                    call.message.message_id,
                    parse_mode='HTML'
                )
                return

        # –°–æ–∑–¥–∞—ë–º —á–µ–∫ —á–µ—Ä–µ–∑ CryptoBot API
        crypto_api = crypto_pay.CryptoPay()
        cheque_result = crypto_api.create_check(
            amount=amount,
            asset="USDT",
            description=f"–í—ã–ø–ª–∞—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}"
        )

        if cheque_result.get("ok", False):
            cheque = cheque_result.get("result", {})
            cheque_link = cheque.get("bot_check_url", "")

            if cheque_link:
                # –£–º–µ–Ω—å—à–∞–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                with db.get_db() as conn:
                    cursor = conn.cursor()
                    cursor.execute('UPDATE users SET BALANCE = BALANCE - ? WHERE ID = ?', (amount, user_id))
                    cursor.execute('SELECT BALANCE FROM users WHERE ID = ?', (user_id,))
                    new_balance = cursor.fetchone()[0]
                    conn.commit()
                    print(f"[DEBUG] –ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —É–º–µ–Ω—å—à–µ–Ω –Ω–∞ {amount}$, –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {new_balance}")

                # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –∫–∞–∑–Ω—ã
                db_module.update_treasury_balance(-amount)

                # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                markup_user = types.InlineKeyboardMarkup()
                markup_user.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –ø—Ä–æ—Ñ–∏–ª—å", callback_data="profile"))
                safe_send_message(
                    user_id,
                    f"‚úÖ –í–∞–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —á–µ–∫ –Ω–∞ {amount}$!\n"
                    f"üîó –°—Å—ã–ª–∫–∞ –Ω–∞ —á–µ–∫: {cheque_link}\n"
                    f"üí∞ –í–∞—à –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {new_balance}$",
                    parse_mode='HTML',
                    reply_markup=markup_user
                )

                # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
                markup_admin = types.InlineKeyboardMarkup()
                markup_admin.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –∑–∞—è–≤–∫–∏", callback_data="pending_withdrawals"))
                bot.edit_message_text(
                    f"‚úÖ –ß–µ–∫ –Ω–∞ {amount}$ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} ({username_link}).\n"
                    f"üí∞ –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {new_balance}$",
                    call.message.chat.id,
                    call.message.message_id,
                    parse_mode='HTML',
                    reply_markup=markup_admin
                )

                # –õ–æ–≥–∏—Ä—É–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é
                db_module.log_treasury_operation("–í—ã–≤–æ–¥ (—á–µ–∫)", -amount, db_module.get_treasury_balance())
            else:
                bot.edit_message_text(
                    f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —á–µ–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}.",
                    call.message.chat.id,
                    call.message.message_id,
                    parse_mode='HTML'
                )
        else:
            bot.edit_message_text(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —á–µ–∫–∞: {cheque_result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}",
                call.message.chat.id,
                call.message.message_id,
                parse_mode='HTML'
            )

        bot.answer_callback_query(call.id, f"–ß–µ–∫ –Ω–∞ {amount}$ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}.")
    except Exception as e:
        print(f"[ERROR] –û—à–∏–±–∫–∞ –≤ send_check_callback: {e}")
        bot.answer_callback_query(call.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —á–µ–∫–∞!")
        bot.edit_message_text(
            f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —á–µ–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}.",
            call.message.chat.id,
            call.message.message_id,
            parse_mode='HTML'
        )

@bot.callback_query_handler(func=lambda call: call.data.startswith("manual_check_"))
def manual_check_request(call):
    if call.from_user.id in config.ADMINS_ID:
        _, _, user_id, amount = call.data.split("_")
        
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_panel"))
        msg = bot.edit_message_text(
            f"üì§ –í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —á–µ–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–∞ —Å—É–º–º—É {amount}$:",
            call.message.chat.id,
            call.message.message_id,
            reply_markup=markup
        )
        bot.register_next_step_handler(msg, process_check_link, user_id, amount)

def process_check_link_success(call, user_id, amount, check_link):
    with db.get_db() as conn:
        cursor = conn.cursor()
        cursor.execute('DELETE FROM withdraws WHERE ID = ? AND AMOUNT = ?', (int(user_id), float(amount)))
        conn.commit()
    
    markup_admin = types.InlineKeyboardMarkup()
    markup_admin.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_panel"))
    markup_admin.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
    bot.edit_message_text(
        f"‚úÖ –ß–µ–∫ –Ω–∞ —Å—É–º–º—É {amount}$ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}",
        call.message.chat.id,
        call.message.message_id,
        reply_markup=markup_admin
    )
    
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("üí≥ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —á–µ–∫", url=check_link))
    markup.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
    try:
        bot.send_message(int(user_id),
                       f"‚úÖ –í–∞—à–∞ –≤—ã–ø–ª–∞—Ç–∞ {amount}$ –≥–æ—Ç–æ–≤–∞!\nüí≥ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —á–µ–∫–∞",
                       reply_markup=markup)
    except Exception as e:
        print(f"Error sending message to user {user_id}: {e}")

def process_check_link(message, user_id, amount):
    if message.from_user.id in config.ADMINS_ID:
        check_link = message.text.strip()
        
        if not check_link.startswith("https://") or "t.me/" not in check_link:
            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton("üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data=f"manual_check_{user_id}_{amount}"))
            markup.add(types.InlineKeyboardButton("üîô –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel"))
            bot.send_message(message.chat.id, 
                           "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Å—ã–ª–∫–∏ –Ω–∞ —á–µ–∫. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞–ª–∏ –ø–æ–ª–Ω—É—é —Å—Å—ã–ª–∫—É.",
                           reply_markup=markup)
            return
        
        with db.get_db() as conn:
            cursor = conn.cursor()
            cursor.execute('DELETE FROM withdraws WHERE ID = ? AND AMOUNT = ?', (int(user_id), float(amount)))
            conn.commit()
        
        markup_admin = types.InlineKeyboardMarkup()
        markup_admin.add(types.InlineKeyboardButton("üîô –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel"))
        markup_admin.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
        bot.send_message(message.chat.id,
                       f"‚úÖ –ß–µ–∫ –Ω–∞ —Å—É–º–º—É {amount}$ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}",
                       reply_markup=markup_admin)
        
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("üí≥ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —á–µ–∫", url=check_link))
        markup.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
        try:
            bot.send_message(int(user_id),
                           f"‚úÖ –í–∞—à–∞ –≤—ã–ø–ª–∞—Ç–∞ {amount}$ –≥–æ—Ç–æ–≤–∞!\nüí≥ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —á–µ–∫–∞",
                           reply_markup=markup)
        except Exception as e:
            print(f"Error sending message to user {user_id}: {e}")


@bot.callback_query_handler(func=lambda call: call.data.startswith("reject_withdraw_"))
def reject_withdraw(call):
    if call.from_user.id in config.ADMINS_ID:
        _, _, user_id, amount = call.data.split("_")
        amount = float(amount)
        
        with db.get_db() as conn:
            cursor = conn.cursor()
            cursor.execute('UPDATE users SET BALANCE = BALANCE + ? WHERE ID = ?', (amount, int(user_id)))
            cursor.execute('DELETE FROM withdraws WHERE ID = ? AND AMOUNT = ?', (int(user_id), amount))
            conn.commit()
        
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("üí≥ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="withdraw"))
        markup.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
        try:
            bot.send_message(int(user_id),
                           f"‚ùå –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ {amount}$ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞\nüí∞ –°—Ä–µ–¥—Å—Ç–≤–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –Ω–∞ –±–∞–ª–∞–Ω—Å",
                           reply_markup=markup)
        except:
            pass
        
        markup_admin = types.InlineKeyboardMarkup()
        markup_admin.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_panel"))
        markup_admin.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
        bot.edit_message_text("‚úÖ –í—ã–ø–ª–∞—Ç–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞, —Å—Ä–µ–¥—Å—Ç–≤–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã",
                            call.message.chat.id,
                            call.message.message_id,
                            reply_markup=markup_admin)


#===========================================================================
#=======================–ö–ê–ó–ù–ê====================–ö–ê–ó–ù–ê======================
#===========================================================================

 

@bot.callback_query_handler(func=lambda call: call.data == "treasury")
def show_treasury(call):
    if call.from_user.id not in config.dostup:
        bot.answer_callback_query(call.id, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.", show_alert=True)
        return
    
    auto_input_status = db_module.get_auto_input_status()
    
    try:
        crypto_api = crypto_pay.CryptoPay()
        balance_result = crypto_api.get_balance()
        
        if not balance_result.get("ok", False):
            raise Exception(f"–û—à–∏–±–∫–∞ API CryptoBot: {balance_result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
        
        crypto_balance = 0
        for currency in balance_result.get("result", []):
            if currency.get("currency_code") == "USDT":
                crypto_balance = float(currency.get("available", "0"))
                break
        
        print(f"–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å CryptoBot: {crypto_balance} USDT")
        
        treasury_text = f"üí∞ <b>–ü—Ä–∏–≤–µ—Ç, —ç—Ç–æ –∫–∞–∑–Ω–∞!</b>\n\n–í –Ω–µ–π –ª–µ–∂–∏—Ç: <code>{crypto_balance}</code> USDT"
    
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞ CryptoBot: {e}")
        treasury_text = f"üí∞ <b>–ü—Ä–∏–≤–µ—Ç, —ç—Ç–æ –∫–∞–∑–Ω–∞!</b>\n\n–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞: <code>{str(e)}</code>"
    
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("üì§ –í—ã–≤–µ—Å—Ç–∏", callback_data="treasury_withdraw"))
    markup.add(types.InlineKeyboardButton("üì• –ü–æ–ø–æ–ª–Ω–∏—Ç—å", callback_data="treasury_deposit"))
    auto_input_text = "üî¥ –í–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ-–≤–≤–æ–¥" if not auto_input_status else "üü¢ –í—ã–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ-–≤–≤–æ–¥"
    markup.add(types.InlineKeyboardButton(auto_input_text, callback_data="treasury_toggle_auto"))
    markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_panel"))
    markup.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
    
    bot.edit_message_text(
        treasury_text,
        call.message.chat.id,
        call.message.message_id,
        parse_mode='HTML',
        reply_markup=markup
    )

@bot.callback_query_handler(func=lambda call: call.data == "treasury_withdraw")
def treasury_withdraw_request(call):
    if call.from_user.id not in config.ADMINS_ID:
        bot.answer_callback_query(call.id, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.", show_alert=True)
        return
    
    admin_id = call.from_user.id
    
    try:
        crypto_api = crypto_pay.CryptoPay()
        balance_result = crypto_api.get_balance()
        
        if not balance_result.get("ok", False):
            raise Exception(f"–û—à–∏–±–∫–∞ API CryptoBot: {balance_result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
        
        crypto_balance = 0
        for currency in balance_result.get("result", []):
            if currency.get("currency_code") == "USDT":
                crypto_balance = float(currency.get("available", "0"))
                break
        
        print(f"–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å CryptoBot: {crypto_balance} USDT")
        
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –∫–∞–∑–Ω–µ", callback_data="treasury"))
        markup.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
        
        msg = bot.edit_message_text(
            f"üì§ <b>–í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ –∏–∑ –∫–∞–∑–Ω—ã</b>\n\n–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: <code>{crypto_balance}</code> USDT\n\n–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –≤—ã–≤–æ–¥–∞:",
            call.message.chat.id,
            call.message.message_id,
            parse_mode='HTML',
            reply_markup=markup
        )
        
        bot.register_next_step_handler(msg, process_treasury_withdraw)
    
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞ CryptoBot: {e}")
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –∫–∞–∑–Ω–µ", callback_data="treasury"))
        markup.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
        
        bot.edit_message_text(
            f"‚ö†Ô∏è <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞:</b> {str(e)}",
            call.message.chat.id,
            call.message.message_id,
            parse_mode='HTML',
            reply_markup=markup
        )

def process_treasury_withdraw(message):
    if message.from_user.id not in config.ADMINS_ID:
        bot.send_message(message.chat.id, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.", parse_mode='HTML')
        return
    
    admin_id = message.from_user.id
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –∫–∞–∑–Ω–µ", callback_data="treasury"))
    markup.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
    
    try:
        amount = float(message.text)
        
        if amount <= 0:
            bot.send_message(
                message.chat.id,
                "‚ùå <b>–û—à–∏–±–∫–∞!</b> –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É (–±–æ–ª—å—à–µ –Ω—É–ª—è).",
                parse_mode='HTML',
                reply_markup=markup
            )
            return
        
        with treasury_lock:
            crypto_api = crypto_pay.CryptoPay()
            balance_result = crypto_api.get_balance()
            
            if not balance_result.get("ok", False):
                raise Exception(f"–û—à–∏–±–∫–∞ API CryptoBot: {balance_result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
            
            crypto_balance = 0
            for currency in balance_result.get("result", []):
                if currency.get("currency_code") == "USDT":
                    crypto_balance = float(currency.get("available", "0"))
                    break
            
            print(f"–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å CryptoBot: {crypto_balance} USDT")
            
            if amount > crypto_balance:
                bot.send_message(
                    message.chat.id,
                    f"‚ùå <b>–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ CryptoBot!</b>\n–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: <code>{crypto_balance}</code> USDT",
                    parse_mode='HTML',
                    reply_markup=markup
                )
                return
            
            amount_to_send = calculate_amount_to_send(amount)
            
            check_result = crypto_api.create_check(
                amount=amount_to_send,
                asset="USDT",
                description=f"–í—ã–≤–æ–¥ –∏–∑ –∫–∞–∑–Ω—ã –æ—Ç {admin_id}"
            )
            
            if check_result.get("ok", False):
                check = check_result.get("result", {})
                check_link = check.get("bot_check_url", "")
                
                if check_link:
                    new_balance = db_module.update_treasury_balance(-amount)
                    db_module.log_treasury_operation("–ê–≤—Ç–æ–≤—ã–≤–æ–¥ —á–µ—Ä–µ–∑ —á–µ–∫", amount, new_balance)
                    
                    markup = types.InlineKeyboardMarkup()
                    markup.add(types.InlineKeyboardButton("üí∏ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —á–µ–∫", url=check_link))
                    markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –∫–∞–∑–Ω–µ", callback_data="treasury"))
                    markup.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
                    
                    bot.send_message(
                        message.chat.id,
                        f"‚úÖ <b>–°—Ä–µ–¥—Å—Ç–≤–∞ —É—Å–ø–µ—à–Ω–æ –≤—ã–≤–µ–¥–µ–Ω—ã —Å –ø–æ–º–æ—â—å—é —á–µ–∫–∞!</b>\n\n"
                        f"–°—É–º–º–∞: <code>{amount}</code> USDT\n"
                        f"–û—Å—Ç–∞—Ç–æ–∫ –≤ –∫–∞–∑–Ω–µ: <code>{new_balance}</code> USDT\n\n"
                        f"–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤ –∞–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ —á–µ–∫ –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ:",
                        parse_mode='HTML',
                        reply_markup=markup
                    )
                    return
            else:
                error_details = check_result.get("error_details", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
                raise Exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —á–µ–∫–∞: {error_details}")
    
    except ValueError:
        bot.send_message(
            message.chat.id,
            "‚ùå <b>–û—à–∏–±–∫–∞!</b> –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.",
            parse_mode='HTML',
            reply_markup=markup
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–≤–æ–¥–µ —á–µ—Ä–µ–∑ CryptoBot: {e}")
        bot.send_message(
            message.chat.id,
            f"‚ö†Ô∏è <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ–≤—ã–≤–æ–¥–µ —Å—Ä–µ–¥—Å—Ç–≤:</b> {str(e)}",
            parse_mode='HTML',
            reply_markup=markup
        )

@bot.callback_query_handler(func=lambda call: call.data == "treasury_deposit")
def treasury_deposit_request(call):
    if call.from_user.id not in config.ADMINS_ID:
        bot.answer_callback_query(call.id, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.", show_alert=True)
        return
    
    admin_id = call.from_user.id
    
    try:
        crypto_api = crypto_pay.CryptoPay()
        balance_result = crypto_api.get_balance()
        
        if not balance_result.get("ok", False):
            raise Exception(f"–û—à–∏–±–∫–∞ API CryptoBot: {balance_result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
        
        crypto_balance = 0
        for currency in balance_result.get("result", []):
            if currency.get("currency_code") == "USDT":
                crypto_balance = float(currency.get("available", "0"))
                break
        
        print(f"–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å CryptoBot: {crypto_balance} USDT")
        
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –∫–∞–∑–Ω–µ", callback_data="treasury"))
        markup.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
        
        msg = bot.edit_message_text(
            f"üì• <b>–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–∞–∑–Ω—ã</b>\n\n–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: <code>{crypto_balance}</code> USDT\n\n–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:",
            call.message.chat.id,
            call.message.message_id,
            parse_mode='HTML',
            reply_markup=markup
        )
        
        bot.register_next_step_handler(msg, process_treasury_deposit)
    
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞ CryptoBot: {e}")
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –∫–∞–∑–Ω–µ", callback_data="treasury"))
        markup.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
        
        bot.edit_message_text(
            f"‚ö†Ô∏è <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞:</b> {str(e)}",
            call.message.chat.id,
            call.message.message_id,
            parse_mode='HTML',
            reply_markup=markup
        )

def process_treasury_deposit(message):
    if message.from_user.id not in config.ADMINS_ID:
        bot.send_message(message.chat.id, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.", parse_mode='HTML')
        return
    
    admin_id = message.from_user.id
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –∫–∞–∑–Ω–µ", callback_data="treasury"))
    markup.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
    
    try:
        amount = float(message.text)
        
        if amount <= 0:
            bot.send_message(
                message.chat.id,
                "‚ùå <b>–û—à–∏–±–∫–∞!</b> –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É (–±–æ–ª—å—à–µ –Ω—É–ª—è).",
                parse_mode='HTML',
                reply_markup=markup
            )
            return
        
        markup_crypto = types.InlineKeyboardMarkup()
        markup_crypto.add(types.InlineKeyboardButton("üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å —á–µ—Ä–µ–∑ CryptoBot", callback_data=f"treasury_deposit_crypto_{amount}"))
        markup_crypto.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –∫–∞–∑–Ω–µ", callback_data="treasury"))
        markup_crypto.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
        
        bot.send_message(
            message.chat.id,
            f"üí∞ <b>–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–∞–∑–Ω—ã –Ω–∞ {amount}$</b>\n\n"
            f"–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —á–µ—Ä–µ–∑ CryptoBot:",
            parse_mode='HTML',
            reply_markup=markup_crypto
        )
    
    except ValueError:
        bot.send_message(
            message.chat.id,
            "‚ùå <b>–û—à–∏–±–∫–∞!</b> –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.",
            parse_mode='HTML',
            reply_markup=markup
        )

@bot.callback_query_handler(func=lambda call: call.data.startswith("treasury_deposit_crypto_"))
def treasury_deposit_crypto(call):
    if call.from_user.id not in config.ADMINS_ID:
        bot.answer_callback_query(call.id, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.", show_alert=True)
        return
    
    admin_id = call.from_user.id
    amount = float(call.data.split("_")[-1])
    
    try:
        crypto_api = crypto_pay.CryptoPay()
        amount_with_fee = calculate_amount_to_send(amount)
        
        invoice_result = crypto_api.create_invoice(
            amount=amount_with_fee,
            asset="USDT",
            description=f"–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–∞–∑–Ω—ã –æ—Ç {admin_id}",
            hidden_message="–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–∞–∑–Ω—ã!",
            paid_btn_name="callback",
            paid_btn_url=f"https://t.me/{bot.get_me().username}",
            expires_in=300
        )
        
        if invoice_result.get("ok", False):
            invoice = invoice_result.get("result", {})
            invoice_link = invoice.get("pay_url", "")
            invoice_id = invoice.get("invoice_id")
            
            if invoice_link and invoice_id:
                markup = types.InlineKeyboardMarkup()
                markup.add(types.InlineKeyboardButton("üí∏ –û–ø–ª–∞—Ç–∏—Ç—å –∏–Ω–≤–æ–π—Å", url=invoice_link))
                markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –∫–∞–∑–Ω–µ", callback_data="treasury"))
                markup.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
                
                message = bot.edit_message_text(
                    f"üí∞ <b>–ò–Ω–≤–æ–π—Å –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–∞–∑–Ω—ã —Å–æ–∑–¥–∞–Ω</b>\n\n"
                    f"–°—É–º–º–∞: <code>{amount}</code> USDT\n\n"
                    f"1. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É '–û–ø–ª–∞—Ç–∏—Ç—å –∏–Ω–≤–æ–π—Å'\n"
                    f"2. –û–ø–ª–∞—Ç–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–Ω—ã–π –∏–Ω–≤–æ–π—Å\n\n"
                    f"‚ö†Ô∏è <i>–ò–Ω–≤–æ–π—Å –¥–µ–π—Å—Ç–≤—É–µ—Ç 5 –º–∏–Ω—É—Ç</i>\n\n"
                    f"‚è≥ <b>–û–∂–∏–¥–∞–Ω–∏–µ –æ–ø–ª–∞—Ç—ã...</b>",
                    call.message.chat.id,
                    call.message.message_id,
                    parse_mode='HTML',
                    reply_markup=markup
                )
                
                check_payment_thread = threading.Thread(
                    target=check_invoice_payment,
                    args=(invoice_id, amount, admin_id, call.message.chat.id, call.message.message_id)
                )
                check_payment_thread.daemon = True
                check_payment_thread.start()
                return
        
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –∫–∞–∑–Ω–µ", callback_data="treasury"))
        markup.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
        
        error_message = invoice_result.get("error", {}).get("message", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
        bot.edit_message_text(
            f"‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–Ω–≤–æ–π—Å–∞</b>\n\n"
            f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∏–Ω–≤–æ–π—Å —á–µ—Ä–µ–∑ CryptoBot.\n"
            f"–û—à–∏–±–∫–∞: {error_message}",
            call.message.chat.id,
            call.message.message_id,
            parse_mode='HTML',
            reply_markup=markup
        )
    
    except Exception as e:
        print(f"Error creating invoice for treasury deposit: {e}")
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –∫–∞–∑–Ω–µ", callback_data="treasury"))
        markup.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
        
        bot.edit_message_text(
            f"‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å CryptoBot</b>\n\n"
            f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}",
            call.message.chat.id,
            call.message.message_id,
            parse_mode='HTML',
            reply_markup=markup
        )

def check_invoice_payment(invoice_id, amount, admin_id, chat_id, message_id):
    crypto_api = crypto_pay.CryptoPay()
    start_time = datetime.now()
    timeout = timedelta(minutes=5)
    check_interval = 5
    check_counter = 0
    
    try:
        while datetime.now() - start_time < timeout:
            print(f"Checking invoice {invoice_id} (attempt {check_counter + 1})...")
            invoices_result = crypto_api.get_invoices(invoice_ids=[invoice_id])
            print(f"Invoice API response: {invoices_result}")
            
            if invoices_result.get("ok", False):
                invoices = invoices_result.get("result", {}).get("items", [])
                
                if not invoices:
                    print(f"No invoices found for ID {invoice_id}")
                    time.sleep(check_interval)
                    check_counter += 1
                    continue
                
                status = invoices[0].get("status", "")
                print(f"Invoice {invoice_id} status: {status}")
                
                if status in ["paid", "completed"]:
                    print(f"Invoice {invoice_id} paid successfully!")
                    try:
                        with treasury_lock:
                            new_balance = db_module.update_treasury_balance(amount)
                            print(f"Updated treasury balance: {new_balance}")
                            db_module.log_treasury_operation("–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Crypto Pay", amount, new_balance)
                            print(f"Logged treasury operation: amount={amount}, new_balance={new_balance}")
                        
                        balance_result = crypto_api.get_balance()
                        crypto_balance = 0
                        if balance_result.get("ok", False):
                            for currency in balance_result.get("result", []):
                                if currency.get("currency_code") == "USDT":
                                    crypto_balance = float(currency.get("available", "0"))
                                    break
                        print(f"–ë–∞–ª–∞–Ω—Å CryptoBot –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã: {crypto_balance} USDT")
                        
                        markup = types.InlineKeyboardMarkup()
                        markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –∫–∞–∑–Ω–µ", callback_data="treasury"))
                        markup.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
                        
                        bot.edit_message_text(
                            f"‚úÖ <b>–ö–∞–∑–Ω–∞ —É—Å–ø–µ—à–Ω–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∞!</b>\n\n"
                            f"–°—É–º–º–∞: <code>{amount}</code> USDT\n"
                            f"–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –∫–∞–∑–Ω—ã: <code>{new_balance}</code> USDT\n"
                            f"–ë–∞–ª–∞–Ω—Å CryptoBot: <code>{crypto_balance}</code> USDT",
                            chat_id,
                            message_id,
                            parse_mode='HTML',
                            reply_markup=markup
                        )
                        print(f"Payment confirmation message updated for invoice {invoice_id}")
                        return
                    
                    except Exception as db_error:
                        print(f"Error updating treasury balance or logging operation: {db_error}")
                        markup = types.InlineKeyboardMarkup()
                        markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –∫–∞–∑–Ω–µ", callback_data="treasury"))
                        markup.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
                        
                        bot.edit_message_text(
                            f"‚ö†Ô∏è <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–∞–∑–Ω—ã:</b> {str(db_error)}\n"
                            f"–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–∞ —Å—É–º–º—É <code>{amount}</code> USDT –≤—ã–ø–æ–ª–Ω–µ–Ω–æ, –Ω–æ –∫–∞–∑–Ω–∞ –Ω–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∞.",
                            chat_id,
                            message_id,
                            parse_mode='HTML',
                            reply_markup=markup
                        )
                        return
                
                elif status == "expired":
                    print(f"Invoice {invoice_id} expired.")
                    markup = types.InlineKeyboardMarkup()
                    markup.add(types.InlineKeyboardButton("üîÑ –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∏–Ω–≤–æ–π—Å", callback_data=f"treasury_deposit_crypto_{amount}"))
                    markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –∫–∞–∑–Ω–µ", callback_data="treasury"))
                    markup.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
                    
                    bot.edit_message_text(
                        f"‚è± <b>–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ–ø–ª–∞—Ç—ã –∏—Å—Ç–µ–∫–ª–æ</b>\n\n"
                        f"–ò–Ω–≤–æ–π—Å –Ω–∞ —Å—É–º–º—É {amount} USDT –Ω–µ –±—ã–ª –æ–ø–ª–∞—á–µ–Ω –≤ —Ç–µ—á–µ–Ω–∏–µ 5 –º–∏–Ω—É—Ç.\n"
                        f"–í—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∏–Ω–≤–æ–π—Å.",
                        chat_id,
                        message_id,
                        parse_mode='HTML',
                        reply_markup=markup
                    )
                    return
                
                check_counter += 1
                if check_counter % 5 == 0:
                    elapsed = datetime.now() - start_time
                    remaining_seconds = int(timeout.total_seconds() - elapsed.total_seconds())
                    minutes = remaining_seconds // 60
                    seconds = remaining_seconds % 60
                    
                    markup = types.InlineKeyboardMarkup()
                    markup.add(types.InlineKeyboardButton("üí∏ –û–ø–ª–∞—Ç–∏—Ç—å –∏–Ω–≤–æ–π—Å", url=invoices[0].get("pay_url", "")))
                    markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –∫–∞–∑–Ω–µ", callback_data="treasury"))
                    markup.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
                    
                    bot.edit_message_text(
                        f"üí∞ <b>–ò–Ω–≤–æ–π—Å –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–∞–∑–Ω—ã —Å–æ–∑–¥–∞–Ω</b>\n\n"
                        f"–°—É–º–º–∞: <code>{amount}</code> USDT\n\n"
                        f"1. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É '–û–ø–ª–∞—Ç–∏—Ç—å –∏–Ω–≤–æ–π—Å'\n"
                        f"2. –û–ø–ª–∞—Ç–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–Ω—ã–π –∏–Ω–≤–æ–π—Å\n\n"
                        f"‚è± <b>–û—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è:</b> {minutes}:{seconds:02d}\n"
                        f"‚è≥ <b>–û–∂–∏–¥–∞–Ω–∏–µ –æ–ø–ª–∞—Ç—ã...</b>",
                        chat_id,
                        message_id,
                        parse_mode='HTML',
                        reply_markup=markup
                    )
                    print(f"Waiting message updated: {minutes}:{seconds:02d} remaining")
            
            else:
                print(f"API request failed: {invoices_result}")
            
            time.sleep(check_interval)
        
        print(f"Invoice {invoice_id} not paid after timeout.")
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("üîÑ –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∏–Ω–≤–æ–π—Å", callback_data=f"treasury_deposit_crypto_{amount}"))
        markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –∫–∞–∑–Ω–µ", callback_data="treasury"))
        markup.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
        
        bot.edit_message_text(
            f"‚è± <b>–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ–ø–ª–∞—Ç—ã –∏—Å—Ç–µ–∫–ª–æ</b>\n\n"
            f"–ò–Ω–≤–æ–π—Å –Ω–∞ —Å—É–º–º—É {amount} USDT –Ω–µ –±—ã–ª –æ–ø–ª–∞—á–µ–Ω –≤ —Ç–µ—á–µ–Ω–∏–µ 5 –º–∏–Ω—É—Ç.\n"
            f"–í—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∏–Ω–≤–æ–π—Å.",
            chat_id,
            message_id,
            parse_mode='HTML',
            reply_markup=markup
        )
    
    except Exception as e:
        print(f"Error in check_invoice_payment thread: {e}")
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –∫–∞–∑–Ω–µ", callback_data="treasury"))
        markup.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
        
        bot.edit_message_text(
            f"‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ–ø–ª–∞—Ç—ã</b>\n\n"
            f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}\n"
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            chat_id,
            message_id,
            parse_mode='HTML',
            reply_markup=markup
        )

@bot.callback_query_handler(func=lambda call: call.data == "treasury_toggle_auto")
def treasury_toggle_auto_input(call):
    if call.from_user.id not in config.ADMINS_ID:
        bot.answer_callback_query(call.id, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.", show_alert=True)
        return
    
    admin_id = call.from_user.id
    
    new_status = db_module.toggle_auto_input()
    
    try:
        crypto_api = crypto_pay.CryptoPay()
        balance_result = crypto_api.get_balance()
        
        if not balance_result.get("ok", False):
            raise Exception(f"–û—à–∏–±–∫–∞ API CryptoBot: {balance_result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
        
        crypto_balance = 0
        for currency in balance_result.get("result", []):
            if currency.get("currency_code") == "USDT":
                crypto_balance = float(currency.get("available", "0"))
                break
        
        print(f"–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å CryptoBot: {crypto_balance} USDT")
        
        status_text = "–≤–∫–ª—é—á–µ–Ω" if new_status else "–≤—ã–∫–ª—é—á–µ–Ω"
        operation = f"–ê–≤—Ç–æ-–≤–≤–æ–¥ {status_text}"
        db_module.log_treasury_operation(operation, 0, crypto_balance)
        
        status_emoji = "üü¢" if new_status else "üî¥"
        auto_message = f"{status_emoji} <b>–ê–≤—Ç–æ-–≤–≤–æ–¥ {status_text}!</b>\n"
        if new_status:
            auto_message += "–°—Ä–µ–¥—Å—Ç–≤–∞ –±—É–¥—É—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ—Å—Ç—É–ø–∞—Ç—å –≤ –∫–∞–∑–Ω—É."
        else:
            auto_message += "–°—Ä–µ–¥—Å—Ç–≤–∞ –±–æ–ª—å—à–µ –Ω–µ –±—É–¥—É—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ—Å—Ç—É–ø–∞—Ç—å –≤ –∫–∞–∑–Ω—É."
        
        treasury_text = f"üí∞ <b>–ü—Ä–∏–≤–µ—Ç, —ç—Ç–æ –∫–∞–∑–Ω–∞!</b>\n\n–í –Ω–µ–π –ª–µ–∂–∏—Ç: <code>{crypto_balance}</code> USDT\n\n{auto_message}"
        
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("üì§ –í—ã–≤–µ—Å—Ç–∏", callback_data="treasury_withdraw"))
        markup.add(types.InlineKeyboardButton("üì• –ü–æ–ø–æ–ª–Ω–∏—Ç—å", callback_data="treasury_deposit"))
        
        auto_input_text = "üî¥ –í–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ-–≤–≤–æ–¥" if not new_status else "üü¢ –í—ã–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ-–≤–≤–æ–¥"
        markup.add(types.InlineKeyboardButton(auto_input_text, callback_data="treasury_toggle_auto"))
        
        markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_panel"))
        markup.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
        
        bot.edit_message_text(
            treasury_text,
            call.message.chat.id,
            call.message.message_id,
            parse_mode='HTML',
            reply_markup=markup
        )
    
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞ CryptoBot: {e}")
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –∫–∞–∑–Ω–µ", callback_data="treasury"))
        markup.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
        
        bot.edit_message_text(
            f"‚ö†Ô∏è <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞:</b> {str(e)}",
            call.message.chat.id,
            call.message.message_id,
            parse_mode='HTML',
            reply_markup=markup
        )

@bot.callback_query_handler(func=lambda call: call.data.startswith("treasury_withdraw_all_"))
def treasury_withdraw_all(call):
    if call.from_user.id not in config.ADMINS_ID:
        bot.answer_callback_query(call.id, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.", show_alert=True)
        return
    
    admin_id = call.from_user.id
    amount = float(call.data.split("_")[-1])
    
    if amount <= 0:
        bot.answer_callback_query(call.id, "‚ö†Ô∏è –ë–∞–ª–∞–Ω—Å –∫–∞–∑–Ω—ã –ø—É—Å—Ç. –ù–µ—á–µ–≥–æ –≤—ã–≤–æ–¥–∏—Ç—å.", show_alert=True)
        return
    
    with treasury_lock:
        operation_success = False
        
        try:
            crypto_api = crypto_pay.CryptoPay()
            balance_result = crypto_api.get_balance()
            
            if not balance_result.get("ok", False):
                raise Exception(f"–û—à–∏–±–∫–∞ API CryptoBot: {balance_result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
            
            crypto_balance = 0
            for currency in balance_result.get("result", []):
                if currency.get("currency_code") == "USDT":
                    crypto_balance = float(currency.get("available", "0"))
                    break
            
            print(f"–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å CryptoBot: {crypto_balance} USDT")
            
            if crypto_balance < amount:
                markup = types.InlineKeyboardMarkup()
                markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –∫–∞–∑–Ω–µ", callback_data="treasury"))
                markup.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
                
                bot.edit_message_text(
                    f"‚ùå <b>–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ CryptoBot!</b>\n"
                    f"–ë–∞–ª–∞–Ω—Å: <code>{crypto_balance}</code> USDT, —Ç—Ä–µ–±—É–µ—Ç—Å—è: <code>{amount}</code> USDT.",
                    call.message.chat.id,
                    call.message.message_id,
                    parse_mode='HTML',
                    reply_markup=markup
                )
                return
            
            amount_to_send = calculate_amount_to_send(amount)
            
            check_result = crypto_api.create_check(
                amount=amount_to_send,
                asset="USDT",
                description=f"–í—ã–≤–æ–¥ –≤—Å–µ–π –∫–∞–∑–Ω—ã –æ—Ç {admin_id}"
            )
            
            if check_result.get("ok", False):
                check = check_result.get("result", {})
                check_link = check.get("bot_check_url", "")
                
                if check_link:
                    new_balance = db_module.update_treasury_balance(-amount)
                    db_module.log_treasury_operation("–í—ã–≤–æ–¥ –≤—Å–µ–π –∫–∞–∑–Ω—ã —á–µ—Ä–µ–∑ —á–µ–∫", amount, new_balance)
                    
                    markup = types.InlineKeyboardMarkup()
                    markup.add(types.InlineKeyboardButton("üí∏ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —á–µ–∫", url=check_link))
                    markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –∫–∞–∑–Ω–µ", callback_data="treasury"))
                    markup.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
                    
                    bot.edit_message_text(
                        f"‚úÖ <b>–í—Å–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ —É—Å–ø–µ—à–Ω–æ –≤—ã–≤–µ–¥–µ–Ω—ã —Å –ø–æ–º–æ—â—å—é —á–µ–∫–∞!</b>\n\n"
                        f"–°—É–º–º–∞: <code>{amount}</code> USDT\n"
                        f"–û—Å—Ç–∞—Ç–æ–∫ –≤ –∫–∞–∑–Ω–µ: <code>{new_balance}</code> USDT\n\n"
                        f"–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤ –∞–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ —á–µ–∫ –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ:",
                        call.message.chat.id,
                        call.message.message_id,
                        parse_mode='HTML',
                        reply_markup=markup
                    )
                    operation_success = True
                    return
                else:
                    error_details = check_result.get("error_details", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
                    raise Exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —á–µ–∫–∞: {error_details}")
        
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–≤–æ–¥–µ —á–µ—Ä–µ–∑ CryptoBot: {e}")
            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –∫–∞–∑–Ω–µ", callback_data="treasury"))
            markup.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
            
            bot.edit_message_text(
                f"‚ö†Ô∏è <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å CryptoBot:</b> {str(e)}",
                call.message.chat.id,
                call.message.message_id,
                parse_mode='HTML',
                reply_markup=markup
            )
        
        if not operation_success:
            new_balance = db_module.update_treasury_balance(-amount)
            db_module.log_treasury_operation("–í—ã–≤–æ–¥ –≤—Å–µ–π –∫–∞–∑–Ω—ã", amount, new_balance)
            
            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –∫–∞–∑–Ω–µ", callback_data="treasury"))
            markup.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
            
            bot.edit_message_text(
                f"‚úÖ <b>–í—Å–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ —É—Å–ø–µ—à–Ω–æ –≤—ã–≤–µ–¥–µ–Ω—ã!</b>\n\n"
                f"–°—É–º–º–∞: <code>{amount}</code> USDT\n"
                f"–û—Å—Ç–∞—Ç–æ–∫ –≤ –∫–∞–∑–Ω–µ: <code>{new_balance}</code> USDT",
                call.message.chat.id,
                call.message.message_id,
                parse_mode='HTML',
                reply_markup=markup
            )

def calculate_amount_to_send(target_amount):
    """
    –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Å—É–º–º—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å —É—á—ë—Ç–æ–º –∫–æ–º–∏—Å—Å–∏–∏ CryptoBot (3%).
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—É–º–º—É, –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å, —á—Ç–æ–±—ã –ø–æ—Å–ª–µ –∫–æ–º–∏—Å—Å–∏–∏ –ø–æ–ª—É—á–∏—Ç—å target_amount.
    """
    commission_rate = 0.03  # –ö–æ–º–∏—Å—Å–∏—è 3%
    amount_with_fee = target_amount / (1 - commission_rate) 
    rounded_amount = round(amount_with_fee, 2)  
    
    received_amount = rounded_amount * (1 - commission_rate)
    if received_amount < target_amount:
        rounded_amount += 0.01  
    
    return round(rounded_amount, 2)



# ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
# ‚ïë        üì¢ –ë–õ–û–ö: –†–ê–°–°–´–õ–ö–ê             ‚ïë
# ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

broadcast_state = {}

@bot.callback_query_handler(func=lambda call: call.data == "broadcast")
def request_broadcast_message(call):
    """–ó–∞–ø—Ä–æ—Å –Ω–∞ –≤–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏"""
    if call.from_user.id not in config.ADMINS_ID:
        bot.answer_callback_query(call.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏!")
        return

    broadcast_state[call.from_user.id] = {"active": True}

    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
    markup.add(InlineKeyboardButton("üìã –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel"))

    msg = bot.edit_message_text(
        "üì¢ <b>–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:</b>\n\n"
        "‚ÑπÔ∏è –°–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º (–∫—Ä–æ–º–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤ –∏ –∞–¥–º–∏–Ω–æ–≤).",
        call.message.chat.id,
        call.message.message_id,
        reply_markup=markup,
        parse_mode="HTML"
    )
    bot.register_next_step_handler(msg, process_broadcast_message)


def process_broadcast_message(message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏"""
    user_id = message.from_user.id

    if user_id not in broadcast_state or not broadcast_state[user_id].get("active", False):
        return
    if user_id not in config.ADMINS_ID:
        bot.reply_to(message, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏!")
        return

    broadcast_text = message.text
    try:
        with get_db() as conn:
            cursor = conn.cursor()
            cursor.execute('''
                SELECT u.ID
                FROM users u
                LEFT JOIN personal p ON u.ID = p.ID
                WHERE p.TYPE IS NULL OR p.TYPE NOT IN ('moder', 'ADMIN')
            ''')
            users = cursor.fetchall()

        success, failed = 0, 0
        for user in users:
            try:
                bot.send_message(user[0], broadcast_text)
                success += 1
                time.sleep(0.05)
            except Exception as e:
                logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user[0]}: {e}")
                failed += 1

        stats_text = (
            "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏</b>\n"
            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
            f"‚úÖ –£—Å–ø–µ—à–Ω–æ: <b>{success}</b>\n"
            f"‚ùå –û—à–∏–±–æ–∫: <b>{failed}</b>\n"
            f"üë• –í—Å–µ–≥–æ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π: <b>{len(users)}</b>"
        )

        markup = InlineKeyboardMarkup()
        markup.add(InlineKeyboardButton("üì¢ –ù–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞", callback_data="broadcast"))
        markup.add(InlineKeyboardButton("üìã –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel"))
        markup.add(InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))

        bot.send_message(message.chat.id, stats_text, reply_markup=markup, parse_mode='HTML')

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—Å—ã–ª–∫–µ: {e}")
        bot.send_message(message.chat.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—Å—ã–ª–∫–µ.")
    finally:
        broadcast_state.pop(user_id, None)


# ----------------------------
#  –ù–ê–°–¢–†–û–ô–ö–ò -----------------
# ----------------------------
@bot.callback_query_handler(func=lambda call: call.data == "settings")
def show_settings(call):
    if call.from_user.id not in config.ADMINS_ID:
        bot.answer_callback_query(call.id, "üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞!")
        return
    with db.get_db() as conn:
        cursor = conn.cursor()
        cursor.execute('SELECT PRICE, HOLD_TIME FROM settings')
        r = cursor.fetchone()
        price, hold_time = r if r else (2.0, 5)
    text = header("‚öôÔ∏è", "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–ø–ª–∞—Ç—ã") + f"üíµ <b>–°—Ç–∞–≤–∫–∞:</b> <code>{price}$</code>\n‚è± <b>–•–æ–ª–¥:</b> <code>{hold_time} –º–∏–Ω</code>"
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("üí∞ –ò–∑–º–µ–Ω–∏—Ç—å —Å—É–º–º—É", callback_data="change_amount"))
    markup.add(types.InlineKeyboardButton("‚è± –ò–∑–º–µ–Ω–∏—Ç—å —Ö–æ–ª–¥", callback_data="change_hold_time"))
    markup.add(types.InlineKeyboardButton("üìã –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel"))
    markup.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
    try:
        bot.edit_message_text(text, call.message.chat.id, call.message.message_id, parse_mode='HTML', reply_markup=markup)
    except Exception:
        bot.send_message(call.message.chat.id, text, parse_mode='HTML', reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data == "change_amount")
def change_amount_request(call):
    if call.from_user.id not in config.ADMINS_ID:
        bot.answer_callback_query(call.id, "üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞!")
        return
    msg = bot.edit_message_text("üí∞ <b>–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—É–º–º—É (–≤ $):</b>\n" + DIV, call.message.chat.id, call.message.message_id, parse_mode='HTML')
    bot.register_next_step_handler(msg, process_change_amount)

def process_change_amount(message):
    if message.from_user.id not in config.ADMINS_ID:
        return
    try:
        v = float(message.text.strip())
        if v <= 0:
            raise ValueError
        with db.get_db() as conn:
            cursor = conn.cursor()
            cursor.execute('UPDATE settings SET PRICE = ?', (v,))
            conn.commit()
        bot.send_message(message.chat.id, f"‚úÖ <b>–ù–æ–≤–∞—è —Å—Ç–∞–≤–∫–∞:</b> <code>{v}$</code>", parse_mode='HTML',
                         reply_markup=types.InlineKeyboardMarkup().add(types.InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings")))
    except Exception:
        bot.send_message(message.chat.id, "‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ.", reply_markup=types.InlineKeyboardMarkup().add(types.InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings")))

@bot.callback_query_handler(func=lambda call: call.data == "change_hold_time")
def change_hold_time_request(call):
    if call.from_user.id not in config.ADMINS_ID:
        bot.answer_callback_query(call.id, "üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞!")
        return
    msg = bot.edit_message_text("‚è± <b>–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è —Ö–æ–ª–¥–∞ (–º–∏–Ω):</b>\n" + DIV, call.message.chat.id, call.message.message_id, parse_mode='HTML')
    bot.register_next_step_handler(msg, process_change_hold_time)

def process_change_hold_time(message):
    if message.from_user.id not in config.ADMINS_ID:
        return
    try:
        v = int(message.text.strip())
        if v <= 0:
            raise ValueError
        with db.get_db() as conn:
            cursor = conn.cursor()
            cursor.execute('UPDATE settings SET HOLD_TIME = ?', (v,))
            conn.commit()
        bot.send_message(message.chat.id, f"‚úÖ <b>–ù–æ–≤—ã–π —Ö–æ–ª–¥:</b> <code>{v} –º–∏–Ω</code>", parse_mode='HTML',
                         reply_markup=types.InlineKeyboardMarkup().add(types.InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings")))
    except Exception:
        bot.send_message(message.chat.id, "‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.", reply_markup=types.InlineKeyboardMarkup().add(types.InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings")))

# ----------------------------
#  –ú–û–î–ï–†–ê–¢–û–†–´ ‚Äî –°–ü–ò–°–û–ö / –î–û–ë–ê–í–ò–¢–¨ / –£–î–ê–õ–ò–¢–¨
# ----------------------------
@bot.callback_query_handler(func=lambda call: call.data == "moderators")
def moderators_menu(call):
    if call.from_user.id not in config.ADMINS_ID:
        bot.answer_callback_query(call.id, "üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞!")
        return
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å", callback_data="add_moder"))
    markup.add(types.InlineKeyboardButton("‚ûñ –£–¥–∞–ª–∏—Ç—å", callback_data="remove_moder"))
    markup.add(types.InlineKeyboardButton("üóÇ –£–¥–∞–ª–∏—Ç—å —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É", callback_data="delete_moderator"))
    markup.add(types.InlineKeyboardButton("üë• –°–ø–∏—Å–æ–∫ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤", callback_data="all_moderators_1"))
    markup.add(types.InlineKeyboardButton("üìã –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel"))
    markup.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
    try:
        bot.delete_message(call.message.chat.id, call.message.message_id)
    except Exception:
        pass
    bot.send_message(call.message.chat.id, header("üë•", "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º–∏"), parse_mode='HTML', reply_markup=markup)




@bot.callback_query_handler(func=lambda call: call.data == "add_moder")
def add_moder_request(call):
    if call.from_user.id not in config.ADMINS_ID:
        bot.answer_callback_query(call.id, "üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞!")
        return
    try:
        bot.delete_message(call.message.chat.id, call.message.message_id)
    except Exception:
        pass
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="moderators"))
    msg = bot.send_message(call.message.chat.id, "üë§ <b>–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º:</b>", parse_mode='HTML', reply_markup=markup)
    bot.register_next_step_handler(msg, process_add_moder, msg.message_id)

def process_add_moder(message, initial_message_id):
    try:
        new_moder_id = int(message.text.strip())
    except Exception:
        bot.send_message(message.chat.id, "‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —á–∏—Å–ª–æ–≤–æ–π ID!", reply_markup=types.InlineKeyboardMarkup().add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="moderators")))
        return

    with db.get_db() as conn:
        cursor = conn.cursor()
        cursor.execute('SELECT * FROM personal WHERE ID = ? AND TYPE = ?', (new_moder_id, 'moder'))
        if cursor.fetchone() is not None:
            bot.send_message(message.chat.id, "‚ö†Ô∏è –≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä!", reply_markup=types.InlineKeyboardMarkup().add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="moderators")))
            return
        cursor.execute('SELECT COUNT(*) FROM groups')
        if cursor.fetchone()[0] == 0:
            bot.send_message(message.chat.id, "‚ùå –ù–µ—Ç –≥—Ä—É–ø–ø. –°–æ–∑–¥–∞–π—Ç–µ –≥—Ä—É–ø–ø—É –ø—Ä–µ–∂–¥–µ —á–µ–º –Ω–∞–∑–Ω–∞—á–∞—Ç—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞.", reply_markup=types.InlineKeyboardMarkup().add(types.InlineKeyboardButton("üë• –ì—Ä—É–ø–ø—ã", callback_data="groups")))
            return

    try:
        bot.delete_message(message.chat.id, message.message_id)
        bot.delete_message(message.chat.id, initial_message_id)
    except Exception:
        pass

    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="moderators"))
    msg = bot.send_message(message.chat.id, f"üë§ ID: <code>{new_moder_id}</code>\nüìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è:", parse_mode='HTML', reply_markup=markup)
    bot.register_next_step_handler(msg, process_assign_group, new_moder_id, msg.message_id)


def process_assign_group(message, new_moder_id, group_message_id):
    group_name = message.text.strip()
    if not group_name:
        bot.send_message(message.chat.id, "‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.", reply_markup=types.InlineKeyboardMarkup().add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="moderators")))
        return

    with db.get_db() as conn:
        cursor = conn.cursor()
        cursor.execute('SELECT ID FROM groups WHERE NAME = ?', (group_name,))
        row = cursor.fetchone()
        if not row:
            bot.send_message(message.chat.id, f"‚ùå –ì—Ä—É–ø–ø–∞ '{group_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", reply_markup=types.InlineKeyboardMarkup().add(types.InlineKeyboardButton("üë• –ì—Ä—É–ø–ø—ã", callback_data="groups")))
            return
        group_id = row[0]
        try:
            cursor.execute('INSERT INTO personal (ID, TYPE, GROUP_ID) VALUES (?, ?, ?)', (new_moder_id, 'moder', group_id))
            conn.commit()
        except Exception as e:
            logging.error(f"[MODER] {e}")
            bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞.")
            return

    try:
        moder_msg = bot.send_message(new_moder_id, f"üéâ –í–∞–º –≤—ã–¥–∞–Ω—ã –ø—Ä–∞–≤–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ –≤ –≥—Ä—É–ø–ø–µ '{group_name}'! –ù–∞–ø–∏—à–∏—Ç–µ /start")
        threading.Timer(30.0, lambda: bot.delete_message(new_moder_id, moder_msg.message_id)).start()
    except Exception:
        pass

    bot.send_message(message.chat.id, f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <code>{new_moder_id}</code> –Ω–∞–∑–Ω–∞—á–µ–Ω –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º –≥—Ä—É–ø–ø—ã <b>{group_name}</b>.", parse_mode='HTML', reply_markup=types.InlineKeyboardMarkup().add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="moderators")))



@bot.callback_query_handler(func=lambda call: call.data == "remove_moder")
def remove_moder_request(call):
    if call.from_user.id not in config.ADMINS_ID:
        bot.answer_callback_query(call.id, "üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞!")
        return
    try:
        bot.delete_message(call.message.chat.id, call.message.message_id)
    except Exception:
        pass
    msg = bot.send_message(call.message.chat.id, "üë§ <b>–í–≤–µ–¥–∏—Ç–µ ID –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:</b>", parse_mode='HTML', reply_markup=types.InlineKeyboardMarkup().add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="moderators")))
    bot.register_next_step_handler(msg, process_remove_moder)

def process_remove_moder(message):
    try:
        moder_id = int(message.text.strip())
    except Exception:
        bot.send_message(message.chat.id, "‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID.", reply_markup=types.InlineKeyboardMarkup().add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="moderators")))
        return

    with db.get_db() as conn:
        cursor = conn.cursor()
        cursor.execute('DELETE FROM personal WHERE ID = ? AND TYPE = ?', (moder_id, 'moder'))
        conn.commit()
        affected = cursor.rowcount

    if affected > 0:
        try:
            msg = bot.send_message(moder_id, "‚ö†Ô∏è –í–∞–º –æ—Ç–æ–∑–≤–∞–ª–∏ –ø—Ä–∞–≤–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞.")
            threading.Timer(30.0, lambda: bot.delete_message(moder_id, msg.message_id)).start()
        except Exception:
            pass
        bot.send_message(message.chat.id, f"‚úÖ –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä <code>{moder_id}</code> —É–¥–∞–ª—ë–Ω.", parse_mode='HTML', reply_markup=types.InlineKeyboardMarkup().add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="moderators")))
    else:
        bot.send_message(message.chat.id, "‚ö†Ô∏è –î–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –±—ã–ª –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º.", reply_markup=types.InlineKeyboardMarkup().add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="moderators")))


@bot.callback_query_handler(func=lambda call: call.data == "delete_moderator")
def delete_moderator_request(call):
    if call.from_user.id not in config.ADMINS_ID:
        bot.answer_callback_query(call.id, "üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞!")
        return
    with db.get_db() as conn:
        cursor = conn.cursor()
        cursor.execute("SELECT ID FROM personal WHERE TYPE = 'moder'")
        moderators = cursor.fetchall()
    if not moderators:
        bot.send_message(call.message.chat.id, "üì≠ –ù–µ—Ç –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.", reply_markup=types.InlineKeyboardMarkup().add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="moderators")))
        return
    text = "üë• <b>–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:</b>\n" + DIV + "\n"
    markup = types.InlineKeyboardMarkup()
    for m in moderators:
        mid = m[0]
        text += f"‚Ä¢ <code>{mid}</code>\n"
        markup.add(types.InlineKeyboardButton(f"–£–¥–∞–ª–∏—Ç—å {mid}", callback_data=f"confirm_delete_moder_{mid}"))
    markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="moderators"))
    try:
        bot.delete_message(call.message.chat.id, call.message.message_id)
    except Exception:
        pass
    bot.send_message(call.message.chat.id, text, parse_mode='HTML', reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith("confirm_delete_moder_"))
def confirm_delete_moderator(call):
    if call.from_user.id not in config.ADMINS_ID:
        bot.answer_callback_query(call.id, "üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞!")
        return
    try:
        mid = int(call.data.split("_")[3])
    except Exception:
        bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö!")
        return
    with db.get_db() as conn:
        cursor = conn.cursor()
        cursor.execute("DELETE FROM personal WHERE ID = ? AND TYPE = 'moder'", (mid,))
        affected = cursor.rowcount
        conn.commit()
    if affected > 0:
        try:
            mmsg = bot.send_message(mid, "‚ö†Ô∏è –í–∞–º –æ—Ç–æ–∑–≤–∞–Ω—ã –ø—Ä–∞–≤–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞.")
            threading.Timer(30.0, lambda: bot.delete_message(mid, mmsg.message_id)).start()
        except Exception:
            pass
        bot.send_message(call.message.chat.id, f"‚úÖ –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä <code>{mid}</code> —É–¥–∞–ª—ë–Ω.", parse_mode='HTML')
    else:
        bot.send_message(call.message.chat.id, f"‚ùå –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä <code>{mid}</code> –Ω–µ –Ω–∞–π–¥–µ–Ω.", parse_mode='HTML')



@bot.callback_query_handler(func=lambda call: call.data.startswith("all_moderators_"))
def all_moderators_callback(call):
    if call.from_user.id not in config.ADMINS_ID:
        bot.answer_callback_query(call.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤!")
        return
    
    try:
        page = int(call.data.split("_")[2])
        if page < 1:
            page = 1
    except (IndexError, ValueError):
        page = 1
    
    with get_db() as conn:
        cursor = conn.cursor()
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤ –∏ –∏—Ö –≥—Ä—É–ø–ø—ã (–±–µ–∑ USERNAME)
        cursor.execute('''
            SELECT p.ID, g.NAME
            FROM personal p
            LEFT JOIN groups g ON p.GROUP_ID = g.ID
            WHERE p.TYPE = 'moder'
            ORDER BY p.ID
        ''')
        moderators = cursor.fetchall()
    
    if not moderators:
        markup = InlineKeyboardMarkup()
        markup.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="moderators"))
        bot.edit_message_text(
            "üì≠ –ù–µ—Ç –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤.",
            call.message.chat.id,
            call.message.message_id,
            reply_markup=markup
        )
        bot.answer_callback_query(call.id)
        return
    
    items_per_page = 10
    total_pages = (len(moderators) + items_per_page - 1) // items_per_page
    page = max(1, min(page, total_pages))
    start_idx = (page - 1) * items_per_page
    end_idx = start_idx + items_per_page
    page_moderators = moderators[start_idx:end_idx]
    
    text = f"<b>üë• –°–ø–∏—Å–æ–∫ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤ (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page}/{total_pages}):</b>\n\n"
    with get_db() as conn:
        cursor = conn.cursor()
        for idx, (moder_id, group_name) in enumerate(page_moderators, start=start_idx + 1):
            # –ü–æ–¥—Å—á—ë—Ç —É—Å–ø–µ—à–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
            cursor.execute('''
                SELECT COUNT(*) 
                FROM numbers 
                WHERE CONFIRMED_BY_MODERATOR_ID = ? AND STATUS = '–æ—Ç—Å—Ç–æ—è–ª'
            ''', (moder_id,))
            accepted_numbers = cursor.fetchone()[0]
            
            # –ü–æ–ª—É—á–∞–µ–º username —á–µ—Ä–µ–∑ Telegram API
            try:
                user = bot.get_chat(moder_id)
                username = user.username if user.username else "–ù–µ—Ç username"
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ username –¥–ª—è user_id {moder_id}: {e}")
                username = "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è"
            
            group_display = group_name if group_name else "–ë–µ–∑ –≥—Ä—É–ø–ø—ã"
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º UserID –∫–∞–∫ —Å—Å—ã–ª–∫—É
            text += f"{idx}. üÜîUserID: <a href=\"tg://user?id={moder_id}\">{moder_id}</a>\n"
            text += f"Username: @{username}\n"
            text += f"üè† –ì—Ä—É–ø–ø–∞: {group_display}\n"
            text += f"üì± –ü—Ä–∏–Ω—è—Ç–æ –Ω–æ–º–µ—Ä–æ–≤: {accepted_numbers}\n"
            text += "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
    
    TELEGRAM_MESSAGE_LIMIT = 4096
    if len(text) > TELEGRAM_MESSAGE_LIMIT:
        text = text[:TELEGRAM_MESSAGE_LIMIT - 100] + "\n... (–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –¥–∞–Ω–Ω—ã—Ö, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–∞–≥–∏–Ω–∞—Ü–∏—é)"
    
    markup = InlineKeyboardMarkup()
    if total_pages > 1:
        row = []
        if page > 1:
            row.append(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"all_moderators_{page-1}"))
        row.append(InlineKeyboardButton(f"{page}/{total_pages}", callback_data="noop"))
        if page < total_pages:
            row.append(InlineKeyboardButton("–í–ø–µ—Ä—ë–¥ ‚û°Ô∏è", callback_data=f"all_moderators_{page+1}"))
        markup.row(*row)
    
    markup.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_panel"))
    
    try:
        bot.edit_message_text(
            text,
            call.message.chat.id,
            call.message.message_id,
            parse_mode='HTML',
            reply_markup=markup
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è all_moderators: {e}")
        bot.send_message(call.message.chat.id, text, parse_mode='HTML', reply_markup=markup)
    
    bot.answer_callback_query(call.id)




#=======================================================================================
#=======================================================================================
#===================================–ì–†–£–ü–ü–´==============================================
#=======================================================================================
#=======================================================================================
#=======================================================================================




# ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
# ‚ïë   üë• –£–ü–†–ê–í–õ–ï–ù–ò–ï –ì–†–£–ü–ü–ê–ú–ò - –ê–î–ú–ò–ù    ‚ïë
# ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

@bot.callback_query_handler(func=lambda call: call.data == "groups")
def groups_menu(call):
    bot.clear_step_handler_by_chat_id(call.message.chat.id)

    if call.from_user.id not in config.ADMINS_ID:
        bot.answer_callback_query(call.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø–∞–º–∏!")
        return

    text = (
        "üìÇ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø–∞–º–∏</b>\n"
        "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
        "üí° –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–ª—è—Ç—å, —É–¥–∞–ª—è—Ç—å –≥—Ä—É–ø–ø—ã, –∞ —Ç–∞–∫–∂–µ —Å–º–æ—Ç—Ä–µ—Ç—å –∏—Ö —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É.\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ üëá"
    )

    markup = types.InlineKeyboardMarkup()
    markup.add(
        types.InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –≥—Ä—É–ø–ø—É", callback_data="add_group"),
        types.InlineKeyboardButton("‚ûñ –£–¥–∞–ª–∏—Ç—å –≥—Ä—É–ø–ø—É", callback_data="remove_group")
    )
    markup.add(types.InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≥—Ä—É–ø–ø", callback_data="group_statistics"))
    markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_panel"))
    markup.add(types.InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))

    try:
        bot.delete_message(call.message.chat.id, call.message.message_id)
    except:
        pass
    bot.send_message(call.message.chat.id, text, parse_mode='HTML', reply_markup=markup)

# ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
# ‚ïë   üÜï –°–û–ó–î–ê–ù–ò–ï –ì–†–£–ü–ü–´                ‚ïë
# ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

@bot.callback_query_handler(func=lambda call: call.data == "create_group")
def create_group_request(call):
    if call.from_user.id not in config.ADMINS_ID:
        bot.answer_callback_query(call.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä—É–ø–ø—ã!")
        return

    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="groups"))

    try:
        bot.delete_message(call.message.chat.id, call.message.message_id)
    except:
        pass

    msg = bot.send_message(
        call.message.chat.id,
        "üÜï <b>–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –≥—Ä—É–ø–ø—ã</b>\n"
        "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
        "üìù –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ <u>–Ω–∞–∑–≤–∞–Ω–∏–µ</u> –¥–ª—è –Ω–æ–≤–æ–π –≥—Ä—É–ø–ø—ã:",
        parse_mode="HTML",
        reply_markup=markup
    )
    bot.register_next_step_handler(msg, process_create_group, msg.message_id)

def process_create_group(message, initial_message_id):
    if message.from_user.id not in config.ADMINS_ID:
        return

    group_name = message.text.strip()
    if not group_name:
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="groups"))
        bot.send_message(message.chat.id, "‚ö†Ô∏è –ù–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!", reply_markup=markup)
        return

    try:
        with db.get_db() as conn:
            cursor = conn.cursor()
            cursor.execute('INSERT INTO groups (NAME) VALUES (?)', (group_name,))
            conn.commit()

        try:
            bot.delete_message(message.chat.id, message.message_id)
            bot.delete_message(message.chat.id, initial_message_id)
        except:
            pass

        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("üë• –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≥—Ä—É–ø–ø–∞–º", callback_data="groups"))
        markup.add(types.InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))

        bot.send_message(
            message.chat.id,
            f"‚úÖ –ì—Ä—É–ø–ø–∞ <b>{group_name}</b> —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!\n"
            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
            "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞–∑–Ω–∞—á–∞—Ç—å –≤ –Ω–µ—ë –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤ üìã",
            parse_mode="HTML",
            reply_markup=markup
        )

    except sqlite3.IntegrityError:
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="groups"))
        bot.send_message(
            message.chat.id,
            f"‚ö†Ô∏è –ì—Ä—É–ø–ø–∞ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º <b>{group_name}</b> —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!",
            parse_mode="HTML",
            reply_markup=markup
        )

# ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
# ‚ïë   ‚ùå –£–î–ê–õ–ï–ù–ò–ï –ì–†–£–ü–ü–´                ‚ïë
# ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

@bot.callback_query_handler(func=lambda call: call.data == "delete_group")
def delete_group_request(call):
    if call.from_user.id not in config.ADMINS_ID:
        bot.answer_callback_query(call.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø—ã!")
        return

    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="groups"))

    try:
        bot.delete_message(call.message.chat.id, call.message.message_id)
    except:
        pass

    msg = bot.send_message(
        call.message.chat.id,
        "üóë <b>–£–¥–∞–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø—ã</b>\n"
        "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
        "–í–≤–µ–¥–∏—Ç–µ <u>–Ω–∞–∑–≤–∞–Ω–∏–µ</u> –≥—Ä—É–ø–ø—ã, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å:",
        parse_mode="HTML",
        reply_markup=markup
    )
    bot.register_next_step_handler(msg, process_delete_group)

def process_delete_group(message):
    if message.from_user.id not in config.ADMINS_ID:
        return

    group_name = message.text.strip()
    if not group_name:
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="groups"))
        bot.send_message(message.chat.id, "‚ö†Ô∏è –ù–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!", reply_markup=markup)
        return

    with db.get_db() as conn:
        cursor = conn.cursor()
        cursor.execute('SELECT ID FROM groups WHERE NAME = ?', (group_name,))
        group = cursor.fetchone()

        if group:
            group_id = group[0]
            cursor.execute('UPDATE personal SET GROUP_ID = NULL WHERE GROUP_ID = ?', (group_id,))
            cursor.execute('DELETE FROM groups WHERE ID = ?', (group_id,))
            conn.commit()

            bot.send_message(
                message.chat.id,
                f"‚úÖ –ì—Ä—É–ø–ø–∞ <b>{group_name}</b> —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!",
                parse_mode="HTML"
            )
        else:
            bot.send_message(
                message.chat.id,
                f"‚ö†Ô∏è –ì—Ä—É–ø–ø–∞ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º <b>{group_name}</b> –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!",
                parse_mode="HTML"
            )


@bot.callback_query_handler(func=lambda call: call.data.startswith("view_group_stats_"))
def view_group_stats(call):
    user_id = call.from_user.id
    if user_id not in config.ADMINS_ID:
        bot.answer_callback_query(call.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏!")
        return

    try:
        _, _, group_id, page = call.data.split("_")
        group_id = int(group_id)
        page = int(page)
        if page < 1:
            page = 1
    except (IndexError, ValueError):
        bot.answer_callback_query(call.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö!")
        return

    with db.get_db() as conn:
        cursor = conn.cursor()
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ (–º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤) –≥—Ä—É–ø–ø—ã
        cursor.execute('SELECT COUNT(*) FROM personal WHERE GROUP_ID = ? AND TYPE = "moder"', (group_id,))
        member_count = cursor.fetchone()[0]

        # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä–∞ —Å —Å—Ç–∞—Ç—É—Å–æ–º "–æ—Ç—Å—Ç–æ—è–ª" –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –≥—Ä—É–ø–ø—ã
        cursor.execute('''
            SELECT n.NUMBER, n.TAKE_DATE, n.SHUTDOWN_DATE
            FROM numbers n
            LEFT JOIN personal p ON p.ID = n.ID_OWNER
            WHERE n.STATUS = '–æ—Ç—Å—Ç–æ—è–ª'
            AND (p.GROUP_ID = ? OR p.GROUP_ID IS NULL)
            ORDER BY n.SHUTDOWN_DATE DESC
        ''', (group_id,))
        numbers = cursor.fetchall()

    # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
    items_per_page = 20
    total_pages = max(1, (len(numbers) + items_per_page - 1) // items_per_page)
    page = max(1, min(page, total_pages))
    start_idx = (page - 1) * items_per_page
    end_idx = start_idx + items_per_page
    page_numbers = numbers[start_idx:end_idx]

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    text = (
        f"<b>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≥—Ä—É–ø–ø—ã {group_id}:</b>\n\n"
        f"üì± –£—Å–ø–µ—à–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤: {len(numbers)}\n"
        f"‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
        f"<b>üì± –°–ø–∏—Å–æ–∫ –Ω–æ–º–µ—Ä–æ–≤ (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page}/{total_pages}):</b>\n\n"
    )

    if not page_numbers:
        text += "üì≠ –ù–µ—Ç —É—Å–ø–µ—à–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤ –≤ —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ."
    else:
        for number, take_date, shutdown_date in page_numbers:
            text += f"–ù–æ–º–µ—Ä: {number}\n"
            text += f"üü¢ –í—Å—Ç–∞–ª: {take_date}\n"
            text += f"üü¢ –û—Ç—Å—Ç–æ—è–ª: {shutdown_date}\n"
            text += "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç —Å–∏–º–≤–æ–ª–æ–≤
    TELEGRAM_MESSAGE_LIMIT = 4096
    if len(text) > TELEGRAM_MESSAGE_LIMIT:
        text = text[:TELEGRAM_MESSAGE_LIMIT - 100] + "\n... (–°–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–µ–∑–∞–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–∞–≥–∏–Ω–∞—Ü–∏—é)"

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—Ç–∫—É
    markup = types.InlineKeyboardMarkup()

    # –ö–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    if total_pages > 1:
        row = []
        if page > 1:
            row.append(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"view_group_stats_{group_id}_{page-1}"))
        row.append(types.InlineKeyboardButton(f"{page}/{total_pages}", callback_data="noop"))
        if page < total_pages:
            row.append(types.InlineKeyboardButton("–í–ø–µ—Ä—ë–¥ ‚û°Ô∏è", callback_data=f"view_group_stats_{group_id}_{page+1}"))
        if row:
            markup.row(*row)

    markup.add(types.InlineKeyboardButton("üë• –í—Å–µ –≥—Ä—É–ø–ø—ã", callback_data="admin_view_groups"))
    markup.add(types.InlineKeyboardButton("üîô –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel"))
    markup.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))

    bot.edit_message_text(
        text,
        call.message.chat.id,
        call.message.message_id,
        parse_mode='HTML',
        reply_markup=markup
    )









#=======================================================================================
#=======================================================================================
#===================================–ê–î–ú–ò–ù–ö–ê=====================================
#=======================================================================================
#=======================================================================================
#=======================================================================================


@bot.callback_query_handler(func=lambda call: call.data == "admin_panel")
def admin_panel(call):
    user_id = call.from_user.id
    broadcast_state.pop(user_id, None)
    with treasury_lock:
        if call.from_user.id in active_treasury_admins:
            del active_treasury_admins[call.from_user.id]

    if call.from_user.id in config.ADMINS_ID:
        with db.get_db() as conn:
            cursor = conn.cursor()

            # –°—á–∏—Ç–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            cursor.execute('SELECT COUNT(*) FROM numbers')
            total_numbers = cursor.fetchone()[0]

            cursor.execute('SELECT COUNT(*) FROM numbers WHERE STATUS = "–æ—Ç—Å—Ç–æ—è–ª"')
            stood_numbers = cursor.fetchone()[0]

            cursor.execute('SELECT COUNT(*) FROM numbers WHERE STATUS = "–Ω–µ–≤–∞–ª–∏–¥"')
            invalid_numbers = cursor.fetchone()[0]

            cursor.execute('SELECT COUNT(*) FROM numbers WHERE STATUS = "—Å–ª–µ—Ç–µ–ª"')
            dropped_numbers = cursor.fetchone()[0]

            cursor.execute('SELECT COUNT(*) FROM numbers WHERE STATUS = "–æ–∂–∏–¥–∞–µ—Ç"')
            pending_numbers = cursor.fetchone()[0]

            # –ö—Ä–∞—Å–∏–≤—ã–π —Ç–µ–∫—Å—Ç –ø–∞–Ω–µ–ª–∏
            admin_text = (
                "‚öôÔ∏è <b>–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>\n"
                "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
                f"üìä <b>–í—Å–µ–≥–æ –Ω–æ–º–µ—Ä–æ–≤ –≤ –ë–î:</b> <code>{total_numbers}</code>\n"
                f"üèÜ <b>–û—Ç—Å—Ç–æ—è–≤—à–∏—Ö –Ω–æ–º–µ—Ä–æ–≤:</b> <code>{stood_numbers}</code>\n"
                f"üö´ <b>–ù–µ–≤–∞–ª–∏–¥–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤:</b> <code>{invalid_numbers}</code>\n"
                f"üìâ <b>–°–ª–µ—Ç–µ–≤—à–∏—Ö –Ω–æ–º–µ—Ä–æ–≤:</b> <code>{dropped_numbers}</code>\n"
                f"‚è≥ <b>–û–∂–∏–¥–∞—é—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏:</b> <code>{pending_numbers}</code>\n"
                "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
            )

        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="Gv"))
        markup.add(types.InlineKeyboardButton("üë• –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä—ã", callback_data="moderators"))
        markup.add(types.InlineKeyboardButton("üë§ –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="all_users_1"))
        markup.add(types.InlineKeyboardButton("üìù –ó–∞—è–≤–∫–∏ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ", callback_data="pending_requests"))
        markup.add(types.InlineKeyboardButton("üë• –ì—Ä—É–ø–ø—ã", callback_data="groups"))
        markup.add(types.InlineKeyboardButton("üì± –í—Å–µ –Ω–æ–º–µ—Ä–∞", callback_data="all_numbers"))
        markup.add(types.InlineKeyboardButton("üîç –ù–∞–π—Ç–∏ –Ω–æ–º–µ—Ä", callback_data="search_number"))
        markup.add(types.InlineKeyboardButton("üì¢ –†–∞—Å—Å—ã–ª–∫–∞", callback_data="broadcast"))
        markup.add(types.InlineKeyboardButton("üí∞ –ö–∞–∑–Ω–∞", callback_data="treasury"))
        markup.add(types.InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings"))
        markup.add(types.InlineKeyboardButton("üóÉ –ë–î", callback_data="db_menu"))
        markup.add(types.InlineKeyboardButton("üì© –ê–ø–µ–ª–ª—è—Ü–∏—è –Ω–æ–º–µ—Ä–æ–≤", callback_data="admin_search_appeal"))
        markup.add(types.InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥", callback_data="back_to_main"))
        try:
            bot.delete_message(call.message.chat.id, call.message.message_id)
        except:
            pass

        bot.send_message(call.message.chat.id, admin_text, parse_mode='HTML', reply_markup=markup)


def check_time():
    while True:
        current_time = datetime.now().strftime("%H:%M")
        if current_time == config.CLEAR_TIME:
            clear_database()
            time.sleep(61)
        time.sleep(30)




#–ß–ò–°–¢–ö–ê –õ–ò–ë–û –í –†–£–ß–ù–£–Æ –õ–ò–ë–û –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò –ë–ê–ó–´ –î–ê–ù–ù–´–• ( –ù–û–ú–ï–†–ê )

def clear_database(chat_id=None):
    """–û—á–∏—â–∞–µ—Ç –≤—Å–µ –Ω–æ–º–µ—Ä–∞ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã numbers –∏ –æ–±–Ω—É–ª—è–µ—Ç –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""
    try:
        with db.get_db() as conn:
            cursor = conn.cursor()
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —É –∫–æ—Ç–æ—Ä—ã—Ö –µ—Å—Ç—å –Ω–æ–º–µ—Ä–∞, –∏—Å–∫–ª—é—á–∞—è –∞–¥–º–∏–Ω–æ–≤ –∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤
            cursor.execute('''
                SELECT DISTINCT ID_OWNER 
                FROM numbers 
                WHERE ID_OWNER NOT IN (SELECT ID FROM personal WHERE TYPE IN ('ADMIN', 'moder'))
            ''')
            users_with_numbers = [row[0] for row in cursor.fetchall()]
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –æ–±–Ω—É–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
            cursor.execute('SELECT ID FROM users')
            all_users = [row[0] for row in cursor.fetchall()]
            
            # –£–¥–∞–ª—è–µ–º –≤—Å–µ –Ω–æ–º–µ—Ä–∞
            cursor.execute('DELETE FROM numbers')
            deleted_numbers = cursor.rowcount
            
            # –û–±–Ω—É–ª—è–µ–º –±–∞–ª–∞–Ω—Å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            cursor.execute('UPDATE users SET BALANCE = 0')
            reset_balances = cursor.rowcount
            conn.commit()
            
            logging.info(f"–£–¥–∞–ª–µ–Ω–æ {deleted_numbers} –Ω–æ–º–µ—Ä–æ–≤ –∏ –æ–±–Ω—É–ª–µ–Ω–æ {reset_balances} –±–∞–ª–∞–Ω—Å–æ–≤ –≤ {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}.")
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –Ω–æ–º–µ—Ä–∞–º–∏
            markup = InlineKeyboardMarkup()
            markup.add(InlineKeyboardButton("üì± –°–¥–∞—Ç—å –Ω–æ–º–µ—Ä", callback_data="submit_number"))
            for user_id in users_with_numbers:
                try:
                    bot.send_message(
                        user_id,
                        "üîÑ –í—Å–µ –Ω–æ–º–µ—Ä–∞ –æ—á–∏—â–µ–Ω—ã, –∞ –≤–∞—à –±–∞–ª–∞–Ω—Å –æ–±–Ω—É–ª—ë–Ω.\nüì± –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ—Å—Ç–∞–≤—å—Ç–µ —Å–≤–æ–∏ –Ω–æ–º–µ—Ä–∞ —Å–Ω–æ–≤–∞.",
                        reply_markup=markup
                    )
                    logging.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
                    time.sleep(0.05)
                except Exception as e:
                    logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤
            admin_message = (
                f"üîÑ –í—Å–µ –Ω–æ–º–µ—Ä–∞ –∏ –±–∞–ª–∞–Ω—Å—ã –æ—á–∏—â–µ–Ω—ã.\n"
                f"üóë –£–¥–∞–ª–µ–Ω–æ {deleted_numbers} –Ω–æ–º–µ—Ä–æ–≤.\n"
                f"üí∏ –û–±–Ω—É–ª–µ–Ω–æ {reset_balances} –±–∞–ª–∞–Ω—Å–æ–≤."
            )
            for admin_id in config.ADMINS_ID:
                try:
                    bot.send_message(admin_id, admin_message)
                    logging.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω—É {admin_id}")
                    time.sleep(0.05)
                except Exception as e:
                    logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É {admin_id}: {e}")
            
            # –ï—Å–ª–∏ –æ—á–∏—Å—Ç–∫–∞ –≤—ã–∑–≤–∞–Ω–∞ –∞–¥–º–∏–Ω–æ–º, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
            if chat_id:
                bot.send_message(
                    chat_id,
                    f"‚úÖ –¢–∞–±–ª–∏—Ü–∞ –Ω–æ–º–µ—Ä–æ–≤ –∏ –±–∞–ª–∞–Ω—Å—ã –æ—á–∏—â–µ–Ω—ã.\n"
                    f"üóë –£–¥–∞–ª–µ–Ω–æ {deleted_numbers} –Ω–æ–º–µ—Ä–æ–≤.\n"
                    f"üí∏ –û–±–Ω—É–ª–µ–Ω–æ {reset_balances} –±–∞–ª–∞–Ω—Å–æ–≤."
                )

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Ç–∞–±–ª–∏—Ü—ã numbers –∏–ª–∏ –æ–±–Ω—É–ª–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–æ–≤: {e}")
        if chat_id:
            bot.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –Ω–æ–º–µ—Ä–æ–≤ –∏ –±–∞–ª–∞–Ω—Å–æ–≤.")

def download_numbers(chat_id):
    """–°–æ–∑–¥–∞—ë—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã numbers."""
    try:
        with get_db() as conn:
            cursor = conn.cursor()
            cursor.execute('SELECT * FROM numbers')
            rows = cursor.fetchall()
            
            if not rows:
                bot.send_message(chat_id, "üì≠ –¢–∞–±–ª–∏—Ü–∞ –Ω–æ–º–µ—Ä–æ–≤ –ø—É—Å—Ç–∞.")
                return
            
            # –°–æ–∑–¥–∞—ë–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –≤ –ø–∞–º—è—Ç–∏
            output = io.StringIO()
            # –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Å—Ç–æ–ª–±—Ü–æ–≤
            columns = [desc[0] for desc in cursor.description]
            output.write(','.join(columns) + '\n')
            # –î–∞–Ω–Ω—ã–µ
            for row in rows:
                output.write(','.join(str(val) if val is not None else '' for val in row) + '\n')
            
            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ñ–∞–π–ª–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
            output.seek(0)
            file_content = output.getvalue().encode('utf-8')
            file = io.BytesIO(file_content)
            file.name = 'numbers.txt'
            
            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞
            bot.send_document(chat_id, file, caption="üìÑ –î–∞–Ω–Ω—ã–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã –Ω–æ–º–µ—Ä–æ–≤")
            logging.info(f"–§–∞–π–ª numbers.txt –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω—É {chat_id}")
    
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü—ã numbers: {e}")
        bot.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü—ã –Ω–æ–º–µ—Ä–æ–≤.")

def schedule_clear_database():
    """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Ç–∞–±–ª–∏—Ü—ã numbers –∏ –æ–±–Ω—É–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–æ–≤ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è."""
    schedule.every().day.at(config.CLEAR_TIME).do(clear_database)
    logging.info(f"–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –Ω–æ–º–µ—Ä–æ–≤ –∏ –±–∞–ª–∞–Ω—Å–æ–≤ –≤ {config.CLEAR_TIME}")

    def run_scheduler():
        while True:
            schedule.run_pending()
            time.sleep(60)

    scheduler_thread = threading.Thread(target=run_scheduler, daemon=True)
    scheduler_thread.start()
    logging.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –æ—á–∏—Å—Ç–∫–∏ –∑–∞–ø—É—â–µ–Ω.")


#–ê–ü–ü–ï–õ–Ø–¶–ò–Ø –ù–û–ú–ï–†–û–í
pending_appeals = {}


@bot.callback_query_handler(func=lambda call: call.data == "admin_search_appeal")
def admin_search_appeal_start(call):
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_panel"))

    bot.send_message(
        call.message.chat.id,
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∞–ø–µ–ª–ª—è—Ü–∏–∏:",
        reply_markup=markup
    )
    bot.register_next_step_handler(call.message, admin_process_appeal_number)

def admin_process_appeal_number(message):
    number = message.text.strip()

    with db_module.get_db() as conn:
        cursor = conn.cursor()
        cursor.execute('''
            SELECT n.NUMBER, u.USERNAME, u.ID
            FROM numbers n
            JOIN users u ON n.ID_OWNER = u.ID
            WHERE n.NUMBER = ? AND n.STATUS = "–Ω–µ–≤–∞–ª–∏–¥"
        ''', (number,))
        row = cursor.fetchone()

    if not row:
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_search_appeal"))
        bot.send_message(message.chat.id, f"‚ùå –ù–æ–º–µ—Ä {number} –Ω–µ –Ω–∞–π–¥–µ–Ω —Å—Ä–µ–¥–∏ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã—Ö.", reply_markup=markup)
        return

    num, username, user_id = row
    markup = types.InlineKeyboardMarkup()
    markup.add(
        types.InlineKeyboardButton("‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"admin_approve_appeal_{num}"),
        types.InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"admin_reject_appeal_{num}")
    )
    markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_search_appeal"))

    bot.send_message(
        message.chat.id,
        f"üì± <b>{num}</b>\nüë§ @{username or '–±–µ–∑ –Ω–∏–∫–∞'}\nüÜî {user_id}",
        parse_mode='HTML',
        reply_markup=markup
    )


@bot.callback_query_handler(func=lambda call: call.data.startswith("admin_approve_appeal_"))
def admin_approve_appeal(call):
    number = call.data.replace("admin_approve_appeal_", "")

    with db_module.get_db() as conn:
        cursor = conn.cursor()
        cursor.execute('UPDATE numbers SET STATUS = "–æ–∂–∏–¥–∞–µ—Ç" WHERE NUMBER = ?', (number,))
        cursor.execute('SELECT ID_OWNER FROM numbers WHERE NUMBER = ?', (number,))
        owner_id = cursor.fetchone()[0]
        conn.commit()

    bot.send_message(call.message.chat.id, f"‚úÖ –ù–æ–º–µ—Ä {number} –ø–µ—Ä–µ–≤–µ–¥—ë–Ω –≤ —Å—Ç–∞—Ç—É—Å '–æ–∂–∏–¥–∞–µ—Ç'.")
    bot.send_message(owner_id, f"‚úÖ –í–∞—à –Ω–æ–º–µ—Ä {number} –æ–¥–æ–±—Ä–µ–Ω –∏ –ø–µ—Ä–µ–≤–µ–¥—ë–Ω –≤ —Å—Ç–∞—Ç—É—Å '–æ–∂–∏–¥–∞–µ—Ç'.")


@bot.callback_query_handler(func=lambda call: call.data.startswith("admin_reject_appeal_"))
def admin_reject_appeal(call):
    number = call.data.replace("admin_reject_appeal_", "")

    with db_module.get_db() as conn:
        cursor = conn.cursor()
        cursor.execute('SELECT ID_OWNER FROM numbers WHERE NUMBER = ?', (number,))
        owner_id = cursor.fetchone()[0]
        conn.commit()

    bot.send_message(call.message.chat.id, f"‚ùå –ù–æ–º–µ—Ä {number} –æ—Å—Ç–∞–ª—Å—è –≤ —Å—Ç–∞—Ç—É—Å–µ '–Ω–µ–≤–∞–ª–∏–¥'.")
    bot.send_message(owner_id, f"‚ùå –í–∞—à –Ω–æ–º–µ—Ä {number} –æ—Å—Ç–∞–ª—Å—è –≤ —Å—Ç–∞—Ç—É—Å–µ '–Ω–µ–≤–∞–ª–∏–¥'.")


#–ü–û–ò–°–ö –ù–û–ú–ï–†–ê –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ù–Å–ú

def run_bot():
    time_checker = threading.Thread(target=check_time)
    time_checker.daemon = True
    time_checker.start()
    bot.polling(none_stop=True, skip_pending=True)
class AdminStates(StatesGroup):
    waiting_for_number = State()


@bot.callback_query_handler(func=lambda call: call.data == "search_number")
def search_number_callback(call):
    user_id = call.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ‚Äî –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
    if user_id not in config.ADMINS_ID:
        bot.answer_callback_query(call.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è!")
        return
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ—Å—å–±–æ–π –≤–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="profile"))
    markup.add(types.InlineKeyboardButton("üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
    msg = bot.edit_message_text(
        "üì± –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +79991234567 (–∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ reply –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ):",
        call.message.chat.id,
        call.message.message_id,
        reply_markup=markup,
        parse_mode='HTML'
    )
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–≤–µ–¥—ë–Ω–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞
    bot.register_next_step_handler(msg, process_search_number, call.message.chat.id, msg.message_id)

def process_search_number(message, original_chat_id, original_message_id):
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ‚Äî –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
    if user_id not in config.ADMINS_ID:
        bot.send_message(message.chat.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è!")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —è–≤–ª—è–µ—Ç—Å—è –æ—Ç–≤–µ—Ç–æ–º (reply)
    if not message.reply_to_message:
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("üîç –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="search_number"))
        markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω–∫—É", callback_data="admin_panel"))
        markup.add(types.InlineKeyboardButton("üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
        bot.send_message(
            message.chat.id,
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ reply –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞!",
            reply_markup=markup,
            parse_mode='HTML'
        )
        return
    
    # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –≤–≤–µ–¥—ë–Ω–Ω—ã–π –Ω–æ–º–µ—Ä
    number_input = message.text.strip()
    normalized_number = is_russian_number(number_input)
    if not normalized_number:
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("üîç –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="search_number"))
        markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –ø—Ä–æ—Ñ–∏–ª—å", callback_data="profile"))
        markup.add(types.InlineKeyboardButton("üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
        bot.send_message(
            message.chat.id,
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä–æ—Å—Å–∏–π—Å–∫–∏–π –Ω–æ–º–µ—Ä, –Ω–∞–ø—Ä–∏–º–µ—Ä: +79991234567",
            reply_markup=markup,
            parse_mode='HTML'
        )
        return
    
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–≤–µ–¥—ë–Ω–Ω—ã–º –Ω–æ–º–µ—Ä–æ–º
    try:
        bot.delete_message(message.chat.id, message.message_id)
    except Exception as e:
        print(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–º–µ—Ä–æ–º {normalized_number}: {e}")
    
    # –ò—â–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–æ–º–µ—Ä–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    with db.get_db() as conn:
        cursor = conn.cursor()
        cursor.execute('''
            SELECT NUMBER, ID_OWNER, STATUS, TAKE_DATE, SHUTDOWN_DATE, CONFIRMED_BY_MODERATOR_ID, TG_NUMBER, SUBMIT_DATE, GROUP_CHAT_ID, fa
            FROM numbers
            WHERE NUMBER = ?
        ''', (normalized_number,))
        number_data = cursor.fetchone()
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –Ω–æ–º–µ—Ä–µ
    if number_data:
        number, owner_id, status, take_date, shutdown_date, confirmed_by_moderator_id, tg_number, submit_date, group_chat_id, fa_code = number_data
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –≥—Ä—É–ø–ø—ã
        group_name = db.get_group_name(group_chat_id) if group_chat_id else "–ù–µ —É–∫–∞–∑–∞–Ω–∞"
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã–µ –¥–∞—Ç—ã
        take_date_str = take_date if take_date not in ("0", "1") else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        shutdown_date_str = shutdown_date if shutdown_date != "0" else "–ù–µ –∑–∞–≤–µ—Ä—à—ë–Ω"
        
        # –ü–æ–ª—É—á–∞–µ–º username –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ —á–µ—Ä–µ–∑ Telegram API
        moderator_info = "–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä: –ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω"
        if confirmed_by_moderator_id:
            try:
                moderator_info_data = bot.get_chat_member(message.chat.id, confirmed_by_moderator_id).user
                moderator_username = f"@{moderator_info_data.username}" if moderator_info_data.username else f"ID {confirmed_by_moderator_id}"
                moderator_info = f"–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä: {moderator_username}"
            except Exception as e:
                print(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å username –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ {confirmed_by_moderator_id}: {e}")
                moderator_info = f"–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä: ID {confirmed_by_moderator_id}"
        
        # –ü–æ–ª—É—á–∞–µ–º username –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã users
        cursor.execute('SELECT USERNAME FROM users WHERE ID = ?', (owner_id,))
        owner_data = cursor.fetchone()
        owner_username = f"@{owner_data[0]}" if owner_data and owner_data[0] else "–ù–µ—Ç username"
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º 2FA —Ç–µ–∫—Å—Ç
        fa_text = f"2FA: {fa_code}" if fa_code else "2FA: –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –Ω–æ–º–µ—Ä–∞ —Å –∫–ª–∏–∫–∞–±–µ–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–æ–π –Ω–∞ ID –≤–ª–∞–¥–µ–ª—å—Ü–∞
        text = (
            f"üì± <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–æ–º–µ—Ä–µ:</b>\n\n"
            f"üì± –ù–æ–º–µ—Ä: <code>{number}</code>\n"
            f"üë§ –í–ª–∞–¥–µ–ª–µ—Ü: <a href=\"tg://user?id={owner_id}\">ID {owner_id}</a>\n"
            f"Username: {owner_username}\n"
            f"{fa_text}\n"
            f"üìä –°—Ç–∞—Ç—É—Å: {status}\n"
            f"üü¢ –í–∑—è—Ç–æ: {take_date_str}\n"
            f"üî¥ –û—Ç—Å—Ç–æ—è–ª: {shutdown_date_str}\n"
            f"{moderator_info}\n"
            f"üè∑ –ì—Ä—É–ø–ø–∞: {group_name}\n"
            f"üì± –¢–ì: {tg_number or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
        )
    else:
        text = f"‚ùå –ù–æ–º–µ—Ä <code>{normalized_number}</code> –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("üîç –ü–æ–∏—Å–∫ –¥—Ä—É–≥–æ–≥–æ –Ω–æ–º–µ—Ä–∞", callback_data="search_number"))
    markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω–∫—É", callback_data="admin_panel"))
    markup.add(types.InlineKeyboardButton("üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
    
    try:
        bot.edit_message_text(
            text,
            original_chat_id,
            original_message_id,
            parse_mode='HTML',
            reply_markup=markup
        )
    except Exception as e:
        print(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
        # –†–µ–∑–µ—Ä–≤–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        try:
            bot.send_message(
                original_chat_id,
                text,
                parse_mode='HTML',
                reply_markup=markup,
                disable_web_page_preview=True
            )
        except Exception as e2:
            print(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {e2}")
            # –ü–æ—Å–ª–µ–¥–Ω–∏–π —Ä–µ–∑–µ—Ä–≤: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–µ–∑ HTML
            bot.send_message(
                original_chat_id,
                text.replace('<b>', '').replace('</b>', '').replace('<code>', '').replace('</code>', '').replace('<a href="tg://user?id=', '').replace('">ID ', ': ID ').replace('</a>', ''),
                reply_markup=markup
            )
#============================

@bot.callback_query_handler(func=lambda call: call.data == "change_hold_time")
def change_hold_time_request(call):
    if call.from_user.id in config.ADMINS_ID:
        msg = bot.edit_message_text("‚è± –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è —Ö–æ–ª–¥–∞ (–≤ –º–∏–Ω—É—Ç–∞—Ö, –Ω–∞–ø—Ä–∏–º–µ—Ä: 5):",
                                  call.message.chat.id,
                                  call.message.message_id)
        bot.register_next_step_handler(msg, process_change_hold_time)

def process_change_hold_time(message):
    if message.from_user.id in config.ADMINS_ID:
        try:
            new_time = int(message.text)
            if new_time <= 0:
                raise ValueError
            with db.get_db() as conn:
                cursor = conn.cursor()
                cursor.execute('UPDATE settings SET HOLD_TIME = ?', (new_time,))
                conn.commit()
            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="settings"))
            markup.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
            bot.send_message(message.chat.id, f"‚úÖ –í—Ä–µ–º—è —Ö–æ–ª–¥–∞ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ {new_time} –º–∏–Ω—É—Ç", reply_markup=markup)
        except ValueError:
            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="settings"))
            markup.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
            bot.send_message(message.chat.id, "‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ!", reply_markup=markup)






#  –ö–û–î –î–õ–Ø –ü–†–ò–ù–Ø–¢–ò–ï –û–¢–ö–ê–ó–ê –ó–ê–Ø–í–û–ö –í –ë–û–¢–ê

@bot.callback_query_handler(func=lambda call: call.data.startswith("pending_requests"))
def show_pending_requests(call):
    if call.from_user.id not in config.ADMINS_ID:
        bot.answer_callback_query(call.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞—è–≤–æ–∫!")
        return
    
    page = 1
    if "_" in call.data:
        try:
            page = int(call.data.split("_")[1])
            if page < 1:
                page = 1
        except (IndexError, ValueError):
            page = 1

    with db.get_db() as conn:
        cursor = conn.cursor()
        cursor.execute('SELECT ID, LAST_REQUEST FROM requests WHERE STATUS = "pending"')
        requests = cursor.fetchall()
    
    if not requests:
        text = "üì≠ –ù–µ—Ç –∑–∞—è–≤–æ–∫ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ."
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_panel"))
        markup.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
        bot.edit_message_text(
            text,
            call.message.chat.id,
            call.message.message_id,
            parse_mode='HTML',
            reply_markup=markup,
            disable_notification=True  # –û—Ç–∫–ª—é—á–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        )
        return
    
    # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
    items_per_page = 20
    total_pages = (len(requests) + items_per_page - 1) // items_per_page
    page = max(1, min(page, total_pages))
    start_idx = (page - 1) * items_per_page
    end_idx = start_idx + items_per_page
    page_requests = requests[start_idx:end_idx]
    
    text = f"<b>üìù –ó–∞—è–≤–∫–∏ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page}/{total_pages}):</b>\n\n"
    markup = types.InlineKeyboardMarkup()
    
    for user_id, last_request in page_requests:
        try:
            user = bot.get_chat_member(user_id, user_id).user
            username = f"@{user.username}" if user.username else "–ù–µ—Ç username"
        except:
            username = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
        
        text += (
            f"üÜî ID: <code>{user_id}</code>\n"
            f"üë§ Username: {username}\n"
            f"üìÖ –î–∞—Ç–∞ –∑–∞—è–≤–∫–∏: {last_request}\n"
            f"‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
        )
        
        markup.row(
            types.InlineKeyboardButton(f"‚úÖ –û–¥–æ–±—Ä–∏—Ç—å {user_id}", callback_data=f"approve_user_{user_id}"),
            types.InlineKeyboardButton(f"‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å {user_id}", callback_data=f"reject_user_{user_id}")
        )
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç —Å–∏–º–≤–æ–ª–æ–≤
    TELEGRAM_MESSAGE_LIMIT = 4096
    if len(text) > TELEGRAM_MESSAGE_LIMIT:
        text = text[:TELEGRAM_MESSAGE_LIMIT - 100] + "\n... (–°–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–µ–∑–∞–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–∞–≥–∏–Ω–∞—Ü–∏—é)"
    
    # –ö–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    if total_pages > 1:
        row = []
        if page > 1:
            row.append(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"pending_requests_{page-1}"))
        row.append(types.InlineKeyboardButton(f"{page}/{total_pages}", callback_data="noop"))
        if page < total_pages:
            row.append(types.InlineKeyboardButton("–í–ø–µ—Ä—ë–¥ ‚û°Ô∏è", callback_data=f"pending_requests_{page+1}"))
        if row:
            markup.row(*row)
    
    markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_panel"))
    markup.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
    
    try:
        bot.edit_message_text(
            text,
            call.message.chat.id,
            call.message.message_id,
            parse_mode='HTML',
            reply_markup=markup,
            disable_notification=True  # –û—Ç–∫–ª—é—á–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        )
    except:
        bot.send_message(
            call.message.chat.id,
            text,
            parse_mode='HTML',
            reply_markup=markup,
            disable_notification=True  # –û—Ç–∫–ª—é—á–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        )

#–í–°–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò :
admin_page_context = {}

@bot.callback_query_handler(func=lambda call: call.data.startswith("all_users_"))
def show_all_users(call):
    if call.from_user.id not in config.ADMINS_ID:
        bot.answer_callback_query(call.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π!")
        return
    
    try:
        page = int(call.data.split("_")[2])
    except (IndexError, ValueError):
        page = 1  # –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –æ—Ç–∫—Ä—ã–≤–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    admin_page_context[call.from_user.id] = page
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–∏–Ω—è—Ç—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Ç–∞–±–ª–∏—Ü—ã requests
    with db_module.get_db() as conn:
        cursor = conn.cursor()
        cursor.execute('SELECT ID FROM requests WHERE STATUS = ?', ('approved',))
        all_users = cursor.fetchall()
    
    if not all_users:
        text = "üì≠ –ù–µ—Ç –ø—Ä–∏–Ω—è—Ç—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–æ—Ç–µ."
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel"))
    else:
        # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
        users_per_page = 8
        total_pages = (len(all_users) + users_per_page - 1) // users_per_page
        page = max(1, min(page, total_pages))  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–æ–ø—É—Å—Ç–∏–º—ã–º –¥–∏–∞–ø–∞–∑–æ–Ω–æ–º
        
        start_idx = (page - 1) * users_per_page
        end_idx = start_idx + users_per_page
        page_users = all_users[start_idx:end_idx]
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
        text = f"<b>–£–ø—Ä–∞–≤–ª—è–π—Ç–µ –ø—Ä–∏–Ω—è—Ç—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏:</b>\n({page} —Å—Ç—Ä–∞–Ω–∏—Ü–∞)\n\n"
        markup = types.InlineKeyboardMarkup()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        for user_data in page_users:
            user_id = user_data[0]
            try:
                user = bot.get_chat_member(user_id, user_id).user
                username = f"@{user.username}" if user.username else "–ù–µ—Ç username"
            except:
                username = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
            
            markup.add(types.InlineKeyboardButton(f"{user_id} {username}", callback_data=f"user_details_{user_id}"))
        
        # –ö–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        if total_pages > 1:
            row = []
            if page > 1:
                row.append(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"all_users_{page-1}"))
            row.append(types.InlineKeyboardButton(f"{page}", callback_data=f"all_users_{page}"))
            if page < total_pages:
                row.append(types.InlineKeyboardButton("–í–ø–µ—Ä—ë–¥ ‚û°Ô∏è", callback_data=f"all_users_{page+1}"))
            markup.row(*row)
        
        # –ö–Ω–æ–ø–∫–∞ "–ù–∞–π—Ç–∏ –ø–æ username –∏–ª–∏ userid"
        markup.add(types.InlineKeyboardButton("üîç –ù–∞–π—Ç–∏ –ø–æ username –∏–ª–∏ userid", callback_data="find_user"))
        
        # –ö–Ω–æ–ø–∫–∞ "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"
        markup.add(types.InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel"))
    
    try:
        bot.delete_message(call.message.chat.id, call.message.message_id)
    except telebot.apihelper.ApiTelegramException as e:
        print(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
    bot.send_message(call.message.chat.id, text, parse_mode='HTML', reply_markup=markup)
  
#–ø–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —é–∑–µ—Ä–∏–¥ –∏–ª–∏ —é–∑–µ—Ä–Ω–µ–π–º
@bot.callback_query_handler(func=lambda call: call.data == "find_user")
def find_user(call):
    if call.from_user.id not in config.ADMINS_ID:
        bot.answer_callback_query(call.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π!")
        return
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —É –∞–¥–º–∏–Ω–∞ username –∏–ª–∏ userid
    text = "üîç –í–≤–µ–¥–∏—Ç–µ @username –∏–ª–∏ userid –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ–∏—Å–∫–∞:"
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("üîô –û—Ç–º–µ–Ω–∞", callback_data="all_users_1"))
    
    try:
        bot.delete_message(call.message.chat.id, call.message.message_id)
    except:
        pass
    msg = bot.send_message(call.message.chat.id, text, parse_mode='HTML', reply_markup=markup)
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–≤–µ–¥—ë–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    bot.register_next_step_handler(msg, process_user_search, call.message.chat.id)

def process_user_search(message, original_chat_id):
    if message.chat.id != original_chat_id or message.from_user.id not in config.ADMINS_ID:
        bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞: –¥–µ–π—Å—Ç–≤–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É!")
        return
    
    search_query = message.text.strip()
    
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–≤–µ–¥—ë–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    try:
        bot.delete_message(message.chat.id, message.message_id)
    except:
        pass
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–≤—ë–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    user_id = None
    username = None
    
    if search_query.startswith('@'):
        username = search_query[1:]  # –£–±–∏—Ä–∞–µ–º @ –∏–∑ username
    else:
        try:
            user_id = int(search_query)  # –ü—Ä–æ–±—É–µ–º –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤ —á–∏—Å–ª–æ (userid)
        except ValueError:
            bot.send_message(message.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –í–≤–µ–¥–∏—Ç–µ @username –∏–ª–∏ userid (—á–∏—Å–ª–æ).")
            return
    
    # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ
    with db.get_db() as conn:
        cursor = conn.cursor()
        if user_id:
            cursor.execute('SELECT ID FROM requests WHERE ID = ?', (user_id,))
        else:
            cursor.execute('SELECT ID FROM requests')
        
        users = cursor.fetchall()
    
    found_user_id = None
    if user_id:
        if users:
            found_user_id = users[0][0]  # –ù–∞—à–ª–∏ –ø–æ user_id
    else:
        # –ò—â–µ–º –ø–æ username
        for uid in users:
            try:
                user = bot.get_chat_member(uid[0], uid[0]).user
                if user.username and user.username.lower() == username.lower():
                    found_user_id = uid[0]
                    break
            except:
                continue
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
    if found_user_id:
        try:
            user = bot.get_chat_member(found_user_id, found_user_id).user
            username_display = f"@{user.username}" if user.username else "–ù–µ—Ç username"
        except:
            username_display = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
        
        text = (
            f"<b>–ù–∞–π–¥–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b>\n\n"
            f"üÜî ID: <code>{found_user_id}</code>\n"
            f"üë§ Username: {username_display}\n"
        )
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton(f"{found_user_id} {username_display}", callback_data=f"user_details_{found_user_id}"))
        markup.add(types.InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="all_users_1"))
        markup.add(types.InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel"))
    else:
        text = "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!"
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="all_users_1"))
        markup.add(types.InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel"))
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–∑–∞–º–µ–Ω—è–µ–º —Å—Ç–∞—Ä–æ–µ)
    bot.send_message(message.chat.id, text, parse_mode='HTML', reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data == "back_to_users")
def back_to_users(call):
    if call.from_user.id not in config.ADMINS_ID:
        bot.answer_callback_query(call.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π!")
        return
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—É—é
    page = admin_page_context.get(call.from_user.id, 1)
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–∏–Ω—è—Ç—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Ç–∞–±–ª–∏—Ü—ã requests
    with db_module.get_db() as conn:
        cursor = conn.cursor()
        cursor.execute('SELECT ID FROM requests WHERE STATUS = ?', ('approved',))
        all_users = cursor.fetchall()
    
    if not all_users:
        text = "üì≠ –ù–µ—Ç –ø—Ä–∏–Ω—è—Ç—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–æ—Ç–µ."
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel"))
    else:
        # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
        users_per_page = 8
        total_pages = (len(all_users) + users_per_page - 1) // users_per_page
        page = max(1, min(page, total_pages))  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–æ–ø—É—Å—Ç–∏–º—ã–º –¥–∏–∞–ø–∞–∑–æ–Ω–æ–º
        
        start_idx = (page - 1) * users_per_page
        end_idx = start_idx + users_per_page
        page_users = all_users[start_idx:end_idx]
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
        text = f"<b>–£–ø—Ä–∞–≤–ª—è–π—Ç–µ –ø—Ä–∏–Ω—è—Ç—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏:</b>\n({page} —Å—Ç—Ä–∞–Ω–∏—Ü–∞)\n\n"
        markup = types.InlineKeyboardMarkup()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        for user_data in page_users:
            user_id = user_data[0]
            try:
                user = bot.get_chat_member(user_id, user_id).user
                username = f"@{user.username}" if user.username else "–ù–µ—Ç username"
            except:
                username = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
            
            markup.add(types.InlineKeyboardButton(f"{user_id} {username}", callback_data=f"user_details_{user_id}"))
        
        # –ö–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        if total_pages > 1:
            row = []
            if page > 1:
                row.append(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"all_users_{page-1}"))
            row.append(types.InlineKeyboardButton(f"{page}", callback_data=f"all_users_{page}"))
            if page < total_pages:
                row.append(types.InlineKeyboardButton("–í–ø–µ—Ä—ë–¥ ‚û°Ô∏è", callback_data=f"all_users_{page+1}"))
            markup.row(*row)
        
        # –ö–Ω–æ–ø–∫–∞ "–ù–∞–π—Ç–∏ –ø–æ username –∏–ª–∏ userid"
        markup.add(types.InlineKeyboardButton("üîç –ù–∞–π—Ç–∏ –ø–æ username –∏–ª–∏ userid", callback_data="find_user"))
        
        # –ö–Ω–æ–ø–∫–∞ "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"
        markup.add(types.InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel"))
    
    try:
        bot.delete_message(call.message.chat.id, call.message.message_id)
    except telebot.apihelper.ApiTelegramException as e:
        print(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
    bot.send_message(call.message.chat.id, text, parse_mode='HTML', reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith("user_details_"))
def user_details(call):
    if call.from_user.id not in config.ADMINS_ID:
        bot.answer_callback_query(call.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏!")
        return
    
    user_id = int(call.data.split("_")[2])
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    with db_module.get_db() as conn:
        cursor = conn.cursor()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Ç–∞–±–ª–∏—Ü–µ requests
        cursor.execute('SELECT BLOCKED, CAN_SUBMIT_NUMBERS FROM requests WHERE ID = ?', (user_id,))
        user_data = cursor.fetchone()
        if not user_data:
            text = f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω!"
            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data=f"back_to_users_{admin_page_context.get(call.from_user.id, 1)}"))
            markup.add(types.InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel"))
            try:
                bot.delete_message(call.message.chat.id, call.message.message_id)
            except telebot.apihelper.ApiTelegramException as e:
                print(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
            bot.send_message(call.message.chat.id, text, parse_mode='HTML', reply_markup=markup)
            return
        
        is_blocked = user_data[0]
        can_submit_numbers = user_data[1]
        
        # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å –∏–∑ —Ç–∞–±–ª–∏—Ü—ã users
        cursor.execute('SELECT BALANCE FROM users WHERE ID = ?', (user_id,))
        balance_data = cursor.fetchone()
        balance = balance_data[0] if balance_data and balance_data[0] is not None else 0.0
        print(f"[DEBUG] –ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {balance:.2f}")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –Ω–æ–º–µ—Ä–∞–º
        cursor.execute('SELECT STATUS, TAKE_DATE, SHUTDOWN_DATE FROM numbers WHERE ID_OWNER = ?', (user_id,))
        numbers = cursor.fetchall()
        
        total_numbers = len(numbers)  # –°–∫–æ–ª—å–∫–æ –≤—Å–µ–≥–æ –∑–∞–ª–∏–ª
        successful_numbers = sum(1 for num in numbers if num[0] == '–æ—Ç—Å—Ç–æ—è–ª')  # –°–∫–æ–ª—å–∫–æ –≤—Å–µ–≥–æ —É—Å–ø–µ—à–Ω—ã—Ö
        shutdown_numbers = sum(1 for num in numbers if num[0] == '—Å–ª–µ—Ç–µ–ª')  # –°–∫–æ–ª—å–∫–æ —Å–ª–µ—Ç–µ–ª–æ
        invalid_numbers = sum(1 for num in numbers if num[0] == '–Ω–µ–≤–∞–ª–∏–¥')  # –°–∫–æ–ª—å–∫–æ –Ω–µ –≤–∞–ª–∏–¥–Ω—ã—Ö
        active_numbers = sum(1 for num in numbers if num[0] == '–∞–∫—Ç–∏–≤–µ–Ω')  # –ö–æ—Ç–æ—Ä—ã–µ –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —Ä–∞–±–æ—Ç–∞—é—Ç
    
    # –ü–æ–ª—É—á–∞–µ–º username —á–µ—Ä–µ–∑ Telegram API
    try:
        user = bot.get_chat_member(user_id, user_id).user
        username = f"@{user.username}" if user.username else "–ù–µ—Ç username"
    except Exception as e:
        print(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å username –¥–ª—è user_id {user_id}: {e}")
        username = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
    text = (
        f"<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} {username}</b>\n\n"
        f"üí∞ –ë–∞–ª–∞–Ω—Å: {balance:.2f} $\n"
        f"üì± –°–∫–æ–ª—å–∫–æ –≤—Å–µ–≥–æ –∑–∞–ª–∏–ª: {total_numbers}\n"
        f"‚úÖ –°–∫–æ–ª—å–∫–æ –≤—Å–µ–≥–æ —É—Å–ø–µ—à–Ω—ã—Ö: {successful_numbers}\n"
        f"‚è≥ –°–∫–æ–ª—å–∫–æ —Å–ª–µ—Ç–µ–ª–æ: {shutdown_numbers}\n"
        f"‚ùå –°–∫–æ–ª—å–∫–æ –Ω–µ –≤–∞–ª–∏–¥–Ω—ã—Ö: {invalid_numbers}\n"
        f"üîÑ –ö–æ—Ç–æ—Ä—ã–µ –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —Ä–∞–±–æ—Ç–∞—é—Ç: {active_numbers}\n"
    )
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏
    markup = types.InlineKeyboardMarkup()
    
    # –ö–Ω–æ–ø–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏/—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
    if is_blocked:
        markup.add(types.InlineKeyboardButton("‚úÖ –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –≤ –±–æ—Ç–µ", callback_data=f"unblock_user_{user_id}"))
    else:
        markup.add(types.InlineKeyboardButton("‚ùå –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –≤ –±–æ—Ç–µ", callback_data=f"block_user_{user_id}"))
    
    # –ö–Ω–æ–ø–∫–∞ "–í—ã–≥–Ω–∞—Ç—å –∏–∑ –±–æ—Ç–∞"
    markup.add(types.InlineKeyboardButton("üö™ –í—ã–≥–Ω–∞—Ç—å –∏–∑ –±–æ—Ç–∞", callback_data=f"kick_user_{user_id}"))
    
    # –ö–Ω–æ–ø–∫–∞ –∑–∞–ø—Ä–µ—Ç–∞/—Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è —Å–¥–∞—á–∏ –Ω–æ–º–µ—Ä–æ–≤
    if can_submit_numbers:
        markup.add(types.InlineKeyboardButton("üö´ –ó–∞–ø—Ä–µ—Ç–∏—Ç—å —Å–¥–∞–≤–∞–Ω–∏–µ –Ω–æ–º–µ—Ä–æ–≤", callback_data=f"disable_numbers_{user_id}"))
    else:
        markup.add(types.InlineKeyboardButton("‚úÖ –†–∞–∑—Ä–µ—à–∏—Ç—å —Å–¥–∞–≤–∞–Ω–∏–µ –Ω–æ–º–µ—Ä–æ–≤", callback_data=f"enable_numbers_{user_id}"))
    
    # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    markup.add(types.InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data=f"back_to_users_{admin_page_context.get(call.from_user.id, 1)}"))
    markup.add(types.InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel"))
    
    try:
        bot.delete_message(call.message.chat.id, call.message.message_id)
    except telebot.apihelper.ApiTelegramException as e:
        print(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
    bot.send_message(call.message.chat.id, text, parse_mode='HTML', reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith("back_to_users_"))
def back_to_users(call):
    if call.from_user.id not in config.ADMINS_ID:
        bot.answer_callback_query(call.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π!")
        return
    
    try:
        page = int(call.data.split("_")[3])
    except (IndexError, ValueError):
        page = 1  # –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –æ—Ç–∫—Ä—ã–≤–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    admin_page_context[call.from_user.id] = page
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–∏–Ω—è—Ç—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Ç–∞–±–ª–∏—Ü—ã requests
    with db_module.get_db() as conn:
        cursor = conn.cursor()
        cursor.execute('SELECT ID FROM requests WHERE STATUS = ?', ('approved',))
        all_users = cursor.fetchall()
    
    if not all_users:
        text = "üì≠ –ù–µ—Ç –ø—Ä–∏–Ω—è—Ç—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–æ—Ç–µ."
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel"))
    else:
        # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
        users_per_page = 8
        total_pages = (len(all_users) + users_per_page - 1) // users_per_page
        page = max(1, min(page, total_pages))  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–æ–ø—É—Å—Ç–∏–º—ã–º –¥–∏–∞–ø–∞–∑–æ–Ω–æ–º
        
        start_idx = (page - 1) * users_per_page
        end_idx = start_idx + users_per_page
        page_users = all_users[start_idx:end_idx]
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
        text = f"<b>–£–ø—Ä–∞–≤–ª—è–π—Ç–µ –ø—Ä–∏–Ω—è—Ç—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏:</b>\n({page} —Å—Ç—Ä–∞–Ω–∏—Ü–∞)\n\n"
        markup = types.InlineKeyboardMarkup()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        for user_data in page_users:
            user_id = user_data[0]
            try:
                user = bot.get_chat_member(user_id, user_id).user
                username = f"@{user.username}" if user.username else "–ù–µ—Ç username"
            except:
                username = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
            
            markup.add(types.InlineKeyboardButton(f"{user_id} {username}", callback_data=f"user_details_{user_id}"))
        
        # –ö–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        if total_pages > 1:
            row = []
            if page > 1:
                row.append(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"all_users_{page-1}"))
            row.append(types.InlineKeyboardButton(f"{page}", callback_data=f"all_users_{page}"))
            if page < total_pages:
                row.append(types.InlineKeyboardButton("–í–ø–µ—Ä—ë–¥ ‚û°Ô∏è", callback_data=f"all_users_{page+1}"))
            markup.row(*row)
        
        # –ö–Ω–æ–ø–∫–∞ "–ù–∞–π—Ç–∏ –ø–æ username –∏–ª–∏ userid"
        markup.add(types.InlineKeyboardButton("üîç –ù–∞–π—Ç–∏ –ø–æ username –∏–ª–∏ userid", callback_data="find_user"))
        
        # –ö–Ω–æ–ø–∫–∞ "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"
        markup.add(types.InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel"))
    
    try:
        bot.delete_message(call.message.chat.id, call.message.message_id)
    except telebot.apihelper.ApiTelegramException as e:
        print(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
    bot.send_message(call.message.chat.id, text, parse_mode='HTML', reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data.startswith("block_user_"))
def block_user(call):
    if call.from_user.id not in config.ADMINS_ID:
        bot.answer_callback_query(call.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è!")
        return
    
    user_id = int(call.data.split("_")[2])  # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ user_id –æ–ø—Ä–µ–¥–µ–ª—ë–Ω
    
    with db.get_db() as conn:
        cursor = conn.cursor()
        cursor.execute('UPDATE requests SET BLOCKED = 1 WHERE ID = ?', (user_id,))
        conn.commit()
    
    try:
        bot.send_message(user_id, "üö´ –í–∞—Å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏ –≤ –±–æ—Ç–µ!")
    except:
        pass
    
    bot.answer_callback_query(call.id, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω!")
    user_details(call)

@bot.callback_query_handler(func=lambda call: call.data.startswith("unblock_user_"))
def unblock_user(call):
    if call.from_user.id not in config.ADMINS_ID:
        bot.answer_callback_query(call.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è!")
        return
    user_id = int(call.data.split("_")[2])
    with db.get_db() as conn:
        cursor = conn.cursor()
        cursor.execute('UPDATE requests SET BLOCKED = 0 WHERE ID = ?', (user_id,))
        conn.commit()
    try:
        bot.send_message(user_id, "‚úÖ –í–∞—Å —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏ –≤ –±–æ—Ç–µ! –ù–∞–ø–∏—à–∏—Ç–µ /start")
    except:
        pass
    bot.answer_callback_query(call.id, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω!")
    user_details(call)





# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(filename='bot.log', level=logging.DEBUG, format='%(asctime)s | %(levelname)s | %(message)s')

@bot.callback_query_handler(func=lambda call: call.data.startswith("kick_user_"))
def kick_user(call):
    if call.from_user.id not in config.ADMINS_ID:
        bot.answer_callback_query(call.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è!")
        return
    user_id = int(call.data.split("_")[2])
    markup = types.InlineKeyboardMarkup()
    markup.add(
        types.InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"confirm_kick_{user_id}"),
        types.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="all_users_1")
    )
    bot.edit_message_text(
        f"‚ö†Ô∏è –í—ã–≥–Ω–∞—Ç—å –∏ —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}?",
        call.message.chat.id,
        call.message.message_id,
        parse_mode='HTML',
        reply_markup=markup
    )
    logging.debug(f"–ê–¥–º–∏–Ω {call.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

@bot.callback_query_handler(func=lambda call: call.data.startswith("confirm_kick_"))
def confirm_kick_user(call):
    user_id = int(call.data.split("_")[2])
    try:
        with db.get_db() as conn:
            cursor = conn.cursor()
            cursor.execute('BEGIN TRANSACTION')
            try:
                # –ë–ª–æ–∫–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –Ω–æ –Ω–µ —É–¥–∞–ª—è–µ–º –µ–≥–æ –¥–∞–Ω–Ω—ã–µ
                cursor.execute('UPDATE requests SET BLOCKED = 1, STATUS = "kicked" WHERE ID = ?', (user_id,))
                cursor.execute('UPDATE users SET STATUS = "kicked" WHERE ID = ?', (user_id,))
                conn.commit()
                logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ kicked –∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")
            except Exception as e:
                conn.rollback()
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–º–µ—Ç–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –∫–∞–∫ kicked: {e}")
                raise e

        cooldowns.pop(user_id, None)

        try:
            bot.send_message(
                user_id,
                "üö™ –í–∞—Å –≤—ã–≥–Ω–∞–ª–∏ –∏–∑ –±–æ—Ç–∞! –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã, –Ω–æ –≤—ã –Ω–µ –º–æ–∂–µ—Ç–µ —Ä–∞–±–æ—Ç–∞—Ç—å –≤ –±–æ—Ç–µ."
            )
        except Exception as e:
            logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")

        bot.answer_callback_query(call.id, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã–≥–Ω–∞–Ω (–¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã)!")
        call.data = "all_users_1"
        show_all_users(call)

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–∏–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        bot.answer_callback_query(call.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏!")


@bot.callback_query_handler(func=lambda call: call.data.startswith("disable_numbers_"))
def disable_numbers(call):
    if call.from_user.id not in config.ADMINS_ID:
        bot.answer_callback_query(call.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è!")
        return
    user_id = int(call.data.split("_")[2])
    with db.get_db() as conn:
        cursor = conn.cursor()
        cursor.execute('UPDATE requests SET CAN_SUBMIT_NUMBERS = 0 WHERE ID = ?', (user_id,))
        conn.commit()
    try:
        bot.send_message(user_id, "üö´ –í–∞–º –∑–∞–ø—Ä–µ—Ç–∏–ª–∏ —Å–¥–∞–≤–∞—Ç—å –Ω–æ–º–µ—Ä–∞!")
    except:
        pass  
    bot.answer_callback_query(call.id, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –∑–∞–ø—Ä–µ—â–µ–Ω–æ —Å–¥–∞–≤–∞—Ç—å –Ω–æ–º–µ—Ä–∞!")
    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    user_details(call)

@bot.callback_query_handler(func=lambda call: call.data.startswith("enable_numbers_"))
def enable_numbers(call):
    if call.from_user.id not in config.ADMINS_ID:
        bot.answer_callback_query(call.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è!")
        return
    user_id = int(call.data.split("_")[2])
    with db.get_db() as conn:
        cursor = conn.cursor()
        cursor.execute('UPDATE requests SET CAN_SUBMIT_NUMBERS = 1 WHERE ID = ?', (user_id,))
        conn.commit()
    try:
        bot.send_message(user_id, "‚úÖ –í–∞–º —Ä–∞–∑—Ä–µ—à–∏–ª–∏ —Å–¥–∞–≤–∞—Ç—å –Ω–æ–º–µ—Ä–∞!")
    except:
        pass
    bot.answer_callback_query(call.id, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} —Ä–∞–∑—Ä–µ—à–µ–Ω–æ —Å–¥–∞–≤–∞—Ç—å –Ω–æ–º–µ—Ä–∞!")
    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    user_details(call)


#–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ì–†–£–ü–ü
@bot.callback_query_handler(func=lambda call: call.data.startswith("group_statistics"))
def group_statistics(call):
    if call.from_user.id not in config.ADMINS_ID:
        bot.answer_callback_query(call.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏!")
        return

    page = 1
    if "_" in call.data:
        try:
            page = int(call.data.split("_")[1])
        except (IndexError, ValueError):
            page = 1

    with db.get_db() as conn:
        cursor = conn.cursor()
        cursor.execute('SELECT ID, NAME FROM groups ORDER BY NAME')
        groups = cursor.fetchall()

    if not groups:
        text = "üì≠ –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥—Ä—É–ø–ø."
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_panel"))
        markup.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
        bot.edit_message_text(text, call.message.chat.id, call.message.message_id, parse_mode='HTML', reply_markup=markup)
        return

    items_per_page = 10
    total_pages = (len(groups) + items_per_page - 1) // items_per_page
    page = max(1, min(page, total_pages))
    start_idx = (page - 1) * items_per_page
    end_idx = start_idx + items_per_page
    page_groups = groups[start_idx:end_idx]

    text = f"<b>üìä –°–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page}/{total_pages}):</b>\n\n"
    for group_id, group_name in page_groups:
        text += f"üè† <b>{group_name}</b>\n"
        text += "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"

    markup = types.InlineKeyboardMarkup()
    for group_id, group_name in page_groups:
        markup.add(types.InlineKeyboardButton(
            f"üìä {group_name}",
            callback_data=f"group_stats_{group_id}_1_{page}"  # –ü–µ—Ä–µ–¥–∞—ë–º –∏ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å–ø–∏—Å–∫–∞
        ))

    if total_pages > 1:
        row = []
        if page > 1:
            row.append(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"group_statistics_{page-1}"))
        row.append(types.InlineKeyboardButton(f"{page}/{total_pages}", callback_data="noop"))
        if page < total_pages:
            row.append(types.InlineKeyboardButton("–í–ø–µ—Ä—ë–¥ ‚û°Ô∏è", callback_data=f"group_statistics_{page+1}"))
        markup.row(*row)

    markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_panel"))
    markup.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))

    bot.edit_message_text(text, call.message.chat.id, call.message.message_id, parse_mode='HTML', reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data.startswith("group_stats_"))
def show_group_stats(call):
    bot.answer_callback_query(call.id)

    parts = call.data.split("_")
    group_id = int(parts[2])
    page = int(parts[3]) if len(parts) > 3 else 1
    list_page = int(parts[4]) if len(parts) > 4 else 1  # –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–ø–∏—Å–∫–∞ –≥—Ä—É–ø–ø
    numbers_per_page = 5

    with db.get_db() as conn:
        cursor = conn.cursor()
        cursor.execute('SELECT NAME FROM groups WHERE ID = ?', (group_id,))
        group_name = cursor.fetchone()
        if not group_name:
            bot.edit_message_text("‚ùå –ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", call.message.chat.id, call.message.message_id, parse_mode='HTML')
            return
        group_name = group_name[0]

        cursor.execute('SELECT COUNT(*) FROM personal WHERE GROUP_ID = ? AND TYPE = ?', (group_id, 'moderator'))
        total_moderators = cursor.fetchone()[0]

        cursor.execute('''
            SELECT COUNT(*) 
            FROM numbers n
            WHERE n.GROUP_CHAT_ID = ? AND n.STATUS = '–æ—Ç—Å—Ç–æ—è–ª'
        ''', (group_id,))
        total_numbers = cursor.fetchone()[0]

        total_pages = max(1, (total_numbers + numbers_per_page - 1) // numbers_per_page)
        page = min(max(1, page), total_pages)

        offset = (page - 1) * numbers_per_page
        cursor.execute('''
            SELECT n.NUMBER, n.TAKE_DATE, n.SHUTDOWN_DATE, n.STATUS 
            FROM numbers n
            WHERE n.GROUP_CHAT_ID = ? AND n.STATUS = '–æ—Ç—Å—Ç–æ—è–ª'
            ORDER BY n.TAKE_DATE DESC
            LIMIT ? OFFSET ?
        ''', (group_id, numbers_per_page, offset))
        recent_numbers = cursor.fetchall()

    stats_text = (
        f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≥—Ä—É–ø–ø—ã: {group_name}</b>\n\n"
        f"üë• –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤: <code>{total_moderators}</code>\n"
        f"üì± –£—Å–ø–µ—à–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤: <code>{total_numbers}</code>\n\n"
        f"üìã <b>–°–ø–∏—Å–æ–∫ –Ω–æ–º–µ—Ä–æ–≤ (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page}/{total_pages}):</b>\n"
    )

    if not recent_numbers:
        stats_text += "üì≠ –£—Å–ø–µ—à–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤ –Ω–µ—Ç."
    else:
        for number, take_date, shutdown_date, status in recent_numbers:
            take_date_str = take_date if take_date not in ("0", "1") else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            shutdown_date_str = shutdown_date if shutdown_date != "0" else "–ù–µ –∑–∞–≤–µ—Ä—à—ë–Ω"
            stats_text += (
                f"\nüì± –ù–æ–º–µ—Ä: <code>{number}</code>\n"
                f"üü¢ –í–∑—è—Ç–æ: {take_date_str}\n"
                f"üî¥ –û—Ç—Å—Ç–æ—è–ª: {shutdown_date_str}\n"
            )

    markup = types.InlineKeyboardMarkup()

    if total_pages > 1:
        nav_buttons = []
        if page > 1:
            nav_buttons.append(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"group_stats_{group_id}_{page-1}_{list_page}"))
        if page < total_pages:
            nav_buttons.append(types.InlineKeyboardButton("–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", callback_data=f"group_stats_{group_id}_{page+1}_{list_page}"))
        markup.add(*nav_buttons)

    markup.add(types.InlineKeyboardButton("üîô –ö —Å–ø–∏—Å–∫—É –≥—Ä—É–ø–ø", callback_data=f"group_statistics_{list_page}"))
    markup.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))

    bot.edit_message_text(stats_text,
                          call.message.chat.id,
                          call.message.message_id,
                          reply_markup=markup,
                          parse_mode='HTML')


#------------------------------
#---------–ú–û–ò –ù–û–ú–ï–†–ê         
#------------------------------
# –û–ë–´–ß–ù–û–ì–û –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø –ù–û–ú–ï–†–ê:
@bot.callback_query_handler(func=lambda call: call.data.startswith("my_numbers"))
def show_my_numbers(call):
    bot.answer_callback_query(call.id)
    user_id = call.from_user.id
    db.update_last_activity(user_id)

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
    parts = call.data.split("_")
    page = int(parts[2]) if len(parts) > 2 else 1
    numbers_per_page = 5  # –°–∫–æ–ª—å–∫–æ –Ω–æ–º–µ—Ä–æ–≤ –Ω–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ

    with db.get_db() as conn:
        cursor = conn.cursor()
        cursor.execute('SELECT COUNT(*) FROM numbers WHERE ID_OWNER = ?', (user_id,))
        total_numbers = cursor.fetchone()[0]

        total_pages = max(1, (total_numbers + numbers_per_page - 1) // numbers_per_page)
        page = min(max(1, page), total_pages)

        offset = (page - 1) * numbers_per_page
        cursor.execute('''
            SELECT NUMBER, STATUS, TAKE_DATE, SHUTDOWN_DATE 
            FROM numbers 
            WHERE ID_OWNER = ? 
            ORDER BY TAKE_DATE DESC 
            LIMIT ? OFFSET ?
        ''', (user_id, numbers_per_page, offset))
        numbers = cursor.fetchall()

    # –ó–∞–≥–æ–ª–æ–≤–æ–∫
    numbers_text = (
        f"üì± <b>–í–∞—à–∏ –Ω–æ–º–µ—Ä–∞</b>\n"
        f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
        f"üìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ <b>{page}</b> –∏–∑ <b>{total_pages}</b>\n\n"
    )

    if not numbers:
        numbers_text += "üì≠ <i>–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤.</i>"
    else:
        for idx, (number, status, take_date, shutdown_date) in enumerate(numbers, start=1):
            take_date_str = take_date if take_date not in ("0", "1") else "‚è≥ –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            shutdown_date_str = shutdown_date if shutdown_date != "0" else "üîÑ –ù–µ –∑–∞–≤–µ—Ä—à—ë–Ω"
            status_emoji = {
                "–æ—Ç—Å—Ç–æ—è–ª": "‚úÖ",
                "–∞–∫—Ç–∏–≤–µ–Ω": "üü¢",
                "—Å–ª–µ—Ç–µ–ª": "‚ö†Ô∏è",
                "–Ω–µ–≤–∞–ª–∏–¥": "‚ùå",
                "–æ–∂–∏–¥–∞–µ—Ç": "‚è≥"
            }.get(status, "‚ÑπÔ∏è")

            numbers_text += (
                f"üîπ <b>–ù–æ–º–µ—Ä {idx}:</b> <code>{number}</code>\n"
                f"{status_emoji} <b>–°—Ç–∞—Ç—É—Å:</b> {status}\n"
                f"üìã <b>–í–∑—è—Ç–æ:</b> {take_date_str}\n"
                f"üìù <b>–û—Ç—Å—Ç–æ—è–ª:</b> {shutdown_date_str}\n"
                "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
            )

    # –ö–Ω–æ–ø–∫–∏
    markup = types.InlineKeyboardMarkup()

    if total_pages > 1:
        nav_buttons = []
        if page > 1:
            nav_buttons.append(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"my_numbers_{page-1}"))
        if page < total_pages:
            nav_buttons.append(types.InlineKeyboardButton("–í–ø–µ—Ä—ë–¥ ‚û°Ô∏è", callback_data=f"my_numbers_{page+1}"))
        markup.row(*nav_buttons)

    markup.add(types.InlineKeyboardButton("üîô –ü—Ä–æ—Ñ–∏–ª—å", callback_data="profile"))
    markup.add(types.InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))

    bot.edit_message_text(
        numbers_text,
        call.message.chat.id,
        call.message.message_id,
        reply_markup=markup,
        parse_mode='HTML'
    )


def safe_send_message(chat_id, text, parse_mode=None, reply_markup=None):
    try:
        bot.send_message(chat_id, text, parse_mode=parse_mode, reply_markup=reply_markup)
    except ApiTelegramException as e:
        if e.result_json.get('error_code') == 429:
            time.sleep(1)
            safe_send_message(chat_id, text, parse_mode, reply_markup)
        else:
            logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è {chat_id}: {e}")
# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤ (–º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –≤ –±—É–¥—É—â–µ–º)
numbers_data_cache = {}

@bot.callback_query_handler(func=lambda call: call.data.startswith("all_numbers"))
def show_all_numbers(call):
    if call.from_user.id not in config.ADMINS_ID:
        bot.answer_callback_query(call.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –Ω–æ–º–µ—Ä–æ–≤!")
        return
    
    bot.answer_callback_query(call.id)
    
    page = int(call.data.split("_")[2]) if len(call.data.split("_")) > 2 else 1
    numbers_per_page = 5  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–º–µ—Ä–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    
    with db.get_db() as conn:
        cursor = conn.cursor()
        cursor.execute('SELECT COUNT(*) FROM numbers')
        total_numbers = cursor.fetchone()[0]
        
        # –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü
        total_pages = max(1, (total_numbers + numbers_per_page - 1) // numbers_per_page)
        page = min(max(1, page), total_pages)
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä–∞ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å username –≤–ª–∞–¥–µ–ª—å—Ü–∞
        offset = (page - 1) * numbers_per_page
        cursor.execute('''
            SELECT n.NUMBER, n.STATUS, n.TAKE_DATE, n.SHUTDOWN_DATE, n.ID_OWNER, 
                   n.CONFIRMED_BY_MODERATOR_ID, n.GROUP_CHAT_ID, n.TG_NUMBER, u.USERNAME
            FROM numbers n
            LEFT JOIN users u ON n.ID_OWNER = u.ID
            ORDER BY n.TAKE_DATE DESC
            LIMIT ? OFFSET ?
        ''', (numbers_per_page, offset))
        numbers = cursor.fetchall()
    
    numbers_text = f"üìã <b>–í—Å–µ –Ω–æ–º–µ—Ä–∞ (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page}/{total_pages})</b>\n\n"
    if not numbers:
        numbers_text += "üì≠ –ù–æ–º–µ—Ä–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç."
    else:
        for number, status, take_date, shutdown_date, owner_id, confirmed_by_moderator_id, group_chat_id, tg_number, username in numbers:
            # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –≥—Ä—É–ø–ø—ã
            group_name = db.get_group_name(group_chat_id) if group_chat_id else "–ù–µ —É–∫–∞–∑–∞–Ω–∞"
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã–µ –¥–∞—Ç—ã
            take_date_str = take_date if take_date not in ("0", "1") else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            shutdown_date_str = shutdown_date if shutdown_date != "0" else "–ù–µ –∑–∞–≤–µ—Ä—à—ë–Ω"
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–µ
            moderator_info = f"–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä: @{confirmed_by_moderator_id}" if confirmed_by_moderator_id else "–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä: –ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω"
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º username –≤–ª–∞–¥–µ–ª—å—Ü–∞
            username_display = f"@{username}" if username and username != "–ù–µ —É–∫–∞–∑–∞–Ω" else "–ë–µ–∑ username"
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –Ω–æ–º–µ—Ä–∞
            numbers_text += (
                f"üì± –ù–æ–º–µ—Ä: <code>{number}</code>\n"
                f"üë§ –í–ª–∞–¥–µ–ª–µ—Ü: <a href=\"tg://user?id={owner_id}\">{owner_id}</a> ({username_display})\n"
                f"üìä –°—Ç–∞—Ç—É—Å: {status}\n"
                f"üü¢ –í–∑—è—Ç–æ: {take_date_str}\n"
                f"üî¥ –û—Ç—Å—Ç–æ—è–ª: {shutdown_date_str}\n"
                f"üè∑ –ì—Ä—É–ø–ø–∞: {group_name}\n"
                f"üì± –¢–ì: {tg_number or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
                f"{moderator_info}\n\n"
            )
    
    markup = types.InlineKeyboardMarkup()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    if total_pages > 1:
        nav_buttons = []
        if page > 1:
            nav_buttons.append(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"all_numbers_{page-1}"))
        if page < total_pages:
            nav_buttons.append(types.InlineKeyboardButton("–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", callback_data=f"all_numbers_{page+1}"))
        markup.add(*nav_buttons)
    
    markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_panel"))
    markup.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
    
    try:
        bot.edit_message_text(
            numbers_text,
            call.message.chat.id,
            call.message.message_id,
            reply_markup=markup,
            parse_mode='HTML'
        )
    except telebot.apihelper.ApiTelegramException as e:
        print(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
        bot.send_message(
            call.message.chat.id,
            numbers_text,
            reply_markup=markup,
            parse_mode='HTML'
        )

def show_numbers_page(call, page):
    user_id = call.from_user.id
    if user_id not in numbers_data_cache:
        bot.answer_callback_query(call.id, "‚ùå –î–∞–Ω–Ω—ã–µ —É—Å—Ç–∞—Ä–µ–ª–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø—Ä–æ—Å–∏—Ç–µ —Å–ø–∏—Å–æ–∫ –∑–∞–Ω–æ–≤–æ!")
        return
    
    numbers = numbers_data_cache[user_id]
    items_per_page = 5  # –ü–æ 5 –Ω–æ–º–µ—Ä–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
    total_items = len(numbers)
    total_pages = (total_items + items_per_page - 1) // items_per_page
    
    if page < 0 or page >= total_pages:
        bot.answer_callback_query(call.id, "‚ùå –°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞!")
        return
    
    start_idx = page * items_per_page
    end_idx = min(start_idx + items_per_page, total_items)
    page_numbers = numbers[start_idx:end_idx]
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    text = f"<b>üì± –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –Ω–æ–º–µ—Ä–æ–≤ (–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1} –∏–∑ {total_pages}):</b>\n\n"
    for number, take_date, shutdown_date, user_id, group_name, username in page_numbers:
        group_info = f"üë• –ì—Ä—É–ø–ø–∞: {group_name}" if group_name else "üë• –ì—Ä—É–ø–ø–∞: –ù–µ —É–∫–∞–∑–∞–Ω–∞"
        user_info = f"üÜî –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id}" if user_id else "üÜî –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: –ù–µ —É–∫–∞–∑–∞–Ω"
        username_display = f"@{username}" if username and username != "–ù–µ —É–∫–∞–∑–∞–Ω" else "–ë–µ–∑ username"
        text += (
            f"üìû <code>{number}</code>\n"
            f"{user_info} ({username_display})\n"
            f"{group_info}\n"
            f"üìÖ –í–∑—è—Ç: {take_date}\n"
            f"üì¥ –û—Ç–∫–ª—é—á—ë–Ω: {shutdown_date or '–ï—â—ë –∞–∫—Ç–∏–≤–µ–Ω'}\n\n"
        )
    
    # –°–æ–∑–¥–∞—ë–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    markup = types.InlineKeyboardMarkup()
    nav_buttons = []
    if page > 0:
        nav_buttons.append(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"numbers_page_{page-1}"))
    if page < total_pages - 1:
        nav_buttons.append(types.InlineKeyboardButton("–í–ø–µ—Ä—ë–¥ ‚û°Ô∏è", callback_data=f"numbers_page_{page+1}"))
    if nav_buttons:
        markup.row(*nav_buttons)
    
    markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_panel"))
    markup.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    try:
        bot.delete_message(call.message.chat.id, call.message.message_id)
        print(f"–£–¥–∞–ª–µ–Ω–æ —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ {call.message.message_id} –≤ —á–∞—Ç–µ {call.message.chat.id}")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ä–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    
    bot.send_message(
        call.message.chat.id,
        text,
        parse_mode='HTML',
        reply_markup=markup
    )
    print(f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")

@bot.callback_query_handler(func=lambda call: call.data.startswith("numbers_page_"))
def numbers_page_callback(call):
    page = int(call.data.split("_")[2])
    show_numbers_page(call, page)










# –°–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π —Å –∫–æ–¥–∞–º–∏
code_messages = {}  # {number: {"chat_id": int, "message_id": int, "timestamp": datetime, "tg_number": int, "owner_id": int}}



def check_code_timeout():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∏—Å—Ç–µ–∫–ª–æ –ª–∏ 2 –º–∏–Ω—É—Ç—ã —Å –º–æ–º–µ–Ω—Ç–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–¥–∞. –ï—Å–ª–∏ –¥–∞, –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –Ω–æ–º–µ—Ä –∫–∞–∫ –∞–∫—Ç–∏–≤–Ω—ã–π."""
    print("–ó–∞–ø—É—Å–∫ —Ñ—É–Ω–∫—Ü–∏–∏ check_code_timeout")
    while True:
        try:
            current_time = datetime.now()
            
            for number, data in list(code_messages.items()):
                try:
                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ timestamp
                    if not isinstance(data["timestamp"], datetime):
                        print(f"[TIMEOUT_CHECK] –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π timestamp –¥–ª—è –Ω–æ–º–µ—Ä–∞ {number}: {data['timestamp']}")
                        del code_messages[number]
                        continue

                    elapsed_time = (current_time - data["timestamp"]).total_seconds() / 60
                    print(f"[TIMEOUT_CHECK] –ù–æ–º–µ—Ä {number}, –ø—Ä–æ—à–ª–æ –≤—Ä–µ–º–µ–Ω–∏: {elapsed_time:.2f} –º–∏–Ω—É—Ç, TG: {data.get('tg_number', 'N/A')}")

                    if elapsed_time >= 2:
                        print(f"[TIMEOUT_CHECK] –í—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ –¥–ª—è –Ω–æ–º–µ—Ä–∞ {number} ({elapsed_time:.2f} –º–∏–Ω—É—Ç)")
                        with db_module.get_db() as conn:
                            cursor = conn.cursor()
                            cursor.execute('SELECT ID_OWNER, STATUS, MODERATOR_ID, VERIFICATION_CODE, fa FROM numbers WHERE NUMBER = ?', (number,))
                            result = cursor.fetchone()

                            if not result:
                                logging.warning(f"[TIMEOUT_CHECK] –ù–æ–º–µ—Ä {number} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
                                del code_messages[number]
                                continue

                            owner_id, status, moderator_id, verification_code, fa = result
                            print(f"[TIMEOUT_CHECK] –ù–æ–º–µ—Ä {number}, —Å—Ç–∞—Ç—É—Å: {status}, –≤–ª–∞–¥–µ–ª–µ—Ü: {owner_id}, –º–æ–¥–µ—Ä–∞—Ç–æ—Ä: {moderator_id}")

                            if status not in ("–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ", "taken"):
                                logging.warning(f"[TIMEOUT_CHECK] –ù–æ–º–µ—Ä {number} –∏–º–µ–µ—Ç –Ω–µ–ø–æ–¥—Ö–æ–¥—è—â–∏–π —Å—Ç–∞—Ç—É—Å: {status}, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                                del code_messages[number]
                                continue

                            current_date = current_time.strftime("%Y-%m-%d %H:%M:%S")
                            cursor.execute(
                                'UPDATE numbers SET STATUS = "–∞–∫—Ç–∏–≤–µ–Ω", TAKE_DATE = ?, VERIFICATION_CODE = NULL, CONFIRMED_BY_MODERATOR_ID = NULL WHERE NUMBER = ?',
                                (current_date, number)
                            )
                            conn.commit()
                            print(f"[TIMEOUT_CHECK] –ù–æ–º–µ—Ä {number} –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω –∫–∞–∫ –∞–∫—Ç–∏–≤–Ω—ã–π —á–µ—Ä–µ–∑ 2 –º–∏–Ω—É—Ç—ã.")

                            markup_owner = types.InlineKeyboardMarkup()
                            markup_owner.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
                            try:
                                safe_send_message(
                                    owner_id,
                                    f"‚úÖ –í–∞—à –Ω–æ–º–µ—Ä {number} –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω –∏ —Ç–µ–ø–µ—Ä—å –∞–∫—Ç–∏–≤–µ–Ω.\n"
                                    f"üì± –ö–æ–¥: {verification_code}\n"
                                    f"üîí 2FA: {fa}\n"
                                    f"‚è≥ –í—Å—Ç–∞–ª: {current_date}.",
                                    parse_mode='HTML',
                                    reply_markup=markup_owner
                                )
                                print(f"[TIMEOUT_CHECK] –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤–ª–∞–¥–µ–ª—å—Ü—É {owner_id}")
                            except Exception as e:
                                print(f"[TIMEOUT_CHECK] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–ª–∞–¥–µ–ª—å—Ü—É {owner_id}: {e}")

                            if moderator_id:
                                markup_mod = types.InlineKeyboardMarkup()
                                markup_mod.add(types.InlineKeyboardButton("üì≤ –ü–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä", callback_data="get_number"))
                                markup_mod.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
                                try:
                                    safe_send_message(
                                        moderator_id,
                                        f"üì± –ù–æ–º–µ—Ä {number} –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω —á–µ—Ä–µ–∑ 2 –º–∏–Ω—É—Ç—ã –±–µ–∑–¥–µ–π—Å—Ç–≤–∏—è.\n"
                                        f"üì± –ö–æ–¥: {verification_code}\n"
                                        f"üîí 2FA: {fa}",
                                        parse_mode='HTML',
                                        reply_markup=markup_mod
                                    )
                                    print(f"[TIMEOUT_CHECK] –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É {moderator_id}")
                                except Exception as e:
                                    print(f"[TIMEOUT_CHECK] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É {moderator_id}: {e}")

                            try:
                                bot.edit_message_text(
                                    f"üì± <b>–¢–ì {data['tg_number']}</b>\n"
                                    f"‚úÖ –ù–æ–º–µ—Ä {number} –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω –≤ {current_date}.\n"
                                    f"üì± –ö–æ–¥: {verification_code}\n"
                                    f"üîí 2FA: {fa}",
                                    data["chat_id"],
                                    data["message_id"],
                                    parse_mode='HTML'
                                )
                                print(f"[TIMEOUT_CHECK] –û–±–Ω–æ–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø–µ {data['chat_id']}")
                            except Exception as e:
                                print(f"[TIMEOUT_CHECK] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –Ω–æ–º–µ—Ä–∞ {number}: {e}")

                            print(f"[TIMEOUT_CHECK] –£–¥–∞–ª–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ {number} –∏–∑ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ—Å–ª–µ –∞–≤—Ç–æ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è")
                            del code_messages[number]

                except Exception as e:
                    print(f"[TIMEOUT_CHECK] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–æ–º–µ—Ä–∞ {number}: {str(e)}")
                    logging.error(f"[TIMEOUT_CHECK] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–æ–º–µ—Ä–∞ {number}: {str(e)}", exc_info=True)
                    continue

            time.sleep(5)
        except Exception as e:
            print(f"[TIMEOUT_CHECK] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ check_code_timeout: {str(e)}")
            logging.error(f"[TIMEOUT_CHECK] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ check_code_timeout: {str(e)}", exc_info=True)
            time.sleep(5)






































# ==========================
# üì± –°–¥–∞—á–∞ –Ω–æ–º–µ—Ä–∞
# ==========================
@bot.callback_query_handler(func=lambda call: call.data == "submit_number")
def submit_number(call):
    user_id = call.from_user.id
    db.update_last_activity(user_id)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø—Ä–µ—Ç–∞ –Ω–∞ —Å–¥–∞—á—É
    with db.get_db() as conn:
        cursor = conn.cursor()
        cursor.execute('SELECT CAN_SUBMIT_NUMBERS FROM requests WHERE ID = ?', (user_id,))
        user = cursor.fetchone()
        if user and user[0] == 0:
            bot.answer_callback_query(call.id, "üö´ –í–∞–º –∑–∞–ø—Ä–µ—â–µ–Ω–æ —Å–¥–∞–≤–∞—Ç—å –Ω–æ–º–µ—Ä–∞!")
            return

    # –ü–æ–ª—É—á–∞–µ–º —Ç–∞—Ä–∏—Ñ –∏ —Ö–æ–ª–¥
    with db.get_db() as conn:
        cursor = conn.cursor()
        cursor.execute('SELECT PRICE, HOLD_TIME FROM settings')
        result = cursor.fetchone()
        price, hold_time = result if result else (2.0, 5)

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    set_state(user_id, "submit_number")

    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="go_back"))

    try:
        bot.delete_message(call.message.chat.id, call.message.message_id)
    except:
        pass

    bot.send_message(
        call.message.chat.id,
        f"üì± <b>–°–¥–∞—á–∞ –Ω–æ–º–µ—Ä–∞</b>\n"
        f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
        f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ —Å–¥–∞—Ç—å.\n"
        f"üìå –ü—Ä–∏–º–µ—Ä: <code>+79991234567</code>\n\n"
        f"‚ö† –†–∞–∑—Ä–µ—à–µ–Ω—ã —Ç–æ–ª—å–∫–æ —Ä–æ—Å—Å–∏–π—Å–∫–∏–µ –Ω–æ–º–µ—Ä–∞.\n"
        f"üíµ –¢–µ–∫—É—â–∏–π —Ç–∞—Ä–∏—Ñ: <b>{price}$</b> | ‚è± –•–æ–ª–¥: {hold_time} –º–∏–Ω",
        parse_mode='HTML',
        reply_markup=markup
    )


@bot.message_handler(func=lambda m: user_states.get(m.from_user.id, {}).get("state") == "submit_number")
def process_numbers(message):
    user_id = message.from_user.id

    if not message or not message.text:
        bot.send_message(message.chat.id, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–∫—Å—Ç–æ–º!")
        return

    numbers = [n.strip() for n in message.text.strip().split('\n') if n.strip()]
    if not numbers:
        bot.send_message(message.chat.id, "‚ùå –í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞!")
        return

    valid_numbers = []
    invalid_numbers = []
    restricted_status_numbers = []

    for number in numbers:
        corrected_number = is_russian_number(number)
        if corrected_number:
            valid_numbers.append(corrected_number)
        else:
            invalid_numbers.append(number)

    if not valid_numbers:
        text = (
            "‚ùå <b>–í—Å–µ –≤–≤–µ–¥—ë–Ω–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã!</b>\n"
            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
            "–§–æ—Ä–º–∞—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å: <code>+79991234567</code>\n"
        )
        if invalid_numbers:
            text += "\n‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç:\n" + "\n".join(invalid_numbers)
        bot.send_message(message.chat.id, text, parse_mode='HTML')
        return

    try:
        with db.get_db() as conn:
            cursor = conn.cursor()
            success_count = 0
            already_exists = 0
            restricted_status_count = 0
            successfully_added = []

            for number in valid_numbers:
                cursor.execute(
                    'SELECT NUMBER, STATUS FROM numbers WHERE NUMBER = ? AND STATUS IN (?, ?, ?, ?)',
                    (number, '–æ—Ç—Å—Ç–æ—è–ª', '–∞–∫—Ç–∏–≤–µ–Ω', '—Å–ª–µ—Ç–µ–ª', '–Ω–µ–≤–∞–ª–∏–¥')
                )
                restricted_number = cursor.fetchone()
                if restricted_number:
                    restricted_status_numbers.append(f"{number} ({restricted_number[1]})")
                    restricted_status_count += 1
                    continue

                cursor.execute('SELECT NUMBER, SHUTDOWN_DATE FROM numbers WHERE NUMBER = ?', (number,))
                existing_number = cursor.fetchone()

                if existing_number:
                    if existing_number[1] == "0":
                        already_exists += 1
                        continue
                    else:
                        cursor.execute('DELETE FROM numbers WHERE NUMBER = ?', (number,))

                cursor.execute(
                    'INSERT INTO numbers (NUMBER, ID_OWNER, TAKE_DATE, SHUTDOWN_DATE, STATUS) VALUES (?, ?, ?, ?, ?)',
                    (number, user_id, '0', '0', '–æ–∂–∏–¥–∞–µ—Ç')
                )
                success_count += 1
                successfully_added.append(number)

            conn.commit()

        response_text = "üìä <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–æ–±–∞–≤–ª–µ–Ω–∏—è</b>\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
        if success_count > 0:
            response_text += f"‚úÖ –£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ: {success_count}\nüì± {', '.join(successfully_added)}\n\n"
        if already_exists > 0:
            response_text += f"‚ö† –£–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç: {already_exists}\n"
        if restricted_status_count > 0:
            response_text += f"üö´ –ó–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å: {restricted_status_count}\nüì± {', '.join(restricted_status_numbers)}\n"
        if invalid_numbers:
            response_text += f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç:\n" + "\n".join(invalid_numbers)

    except Exception as e:
        print(f"[ERROR] –û—à–∏–±–∫–∞ process_numbers: {e}")
        response_text = "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –Ω–æ–º–µ—Ä–æ–≤."

    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    clear_state(user_id)

    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("üì± –î–æ–±–∞–≤–∏—Ç—å –µ—â—ë", callback_data="submit_number"))
    markup.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))

    bot.send_message(message.chat.id, response_text, parse_mode='HTML', reply_markup=markup)




@bot.callback_query_handler(func=lambda call: call.data == "db_menu")
def db_menu_callback(call):
    if call.from_user.id not in config.ADMINS_ID:
        bot.answer_callback_query(call.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –ë–î!")
        return
    
    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton("üì• –°–∫–∞—á–∞—Ç—å –ë–î (–ù–û–ú–ï–†–ê)", callback_data="download_numbers"))
    markup.add(InlineKeyboardButton("üóë –û—á–∏—Å—Ç–∏—Ç—å –ë–î (–ù–û–ú–ï–†–ê+–ë–ê–õ–ê–ù–°)", callback_data="clear_numbers"))
    markup.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_panel"))
    
    bot.edit_message_text("üóÉ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö", call.message.chat.id, call.message.message_id, reply_markup=markup)
    bot.answer_callback_query(call.id)

@bot.callback_query_handler(func=lambda call: call.data == "download_numbers")
def download_numbers_callback(call):
    if call.from_user.id not in config.ADMINS_ID:
        bot.answer_callback_query(call.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –ë–î!")
        return
    
    download_numbers(call.message.chat.id)
    bot.answer_callback_query(call.id)

@bot.callback_query_handler(func=lambda call: call.data == "clear_numbers")
def clear_numbers_callback(call):
    if call.from_user.id not in config.ADMINS_ID:
        bot.answer_callback_query(call.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –ë–î!")
        return
    
    clear_database(call.message.chat.id)
    bot.answer_callback_query(call.id, "‚úÖ –ù–æ–º–µ—Ä–∞ –∏ –±–∞–ª–∞–Ω—Å—ã –æ—á–∏—â–µ–Ω—ã!")




#=============================================================================================================





@bot.callback_query_handler(func=lambda call: call.data == "Gv")
def settingssss(data):
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –≤—Ö–æ–¥–Ω–æ–π –ø–∞—Ä–∞–º–µ—Ç—Ä callback (call) –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ–º (message)
    is_callback = hasattr(data, 'message')
    user_id = data.from_user.id
    chat_id = data.message.chat.id if is_callback else data.chat.id
    message_id = data.message.message_id if is_callback else data.message_id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ‚Äî –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
    if user_id not in config.ADMINS_ID:
        if is_callback:
            bot.answer_callback_query(data.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è!")
        else:
            bot.send_message(chat_id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è!", parse_mode='HTML')
        return
    
    # –û—á–∏—â–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –Ω–µ–∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ–π —Ä–µ–∞–∫—Ü–∏–∏ –Ω–∞ –≤–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞
    bot.clear_step_handler_by_chat_id(chat_id)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∏ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –º–µ–Ω—é
    menu_text = "üìã <b>–ú–µ–Ω—é:</b>"
    
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ê–§–ö", callback_data="afk_settings"))
    markup.add(types.InlineKeyboardButton("üí∏ –ò–∑–º–µ–Ω–∏—Ç—å —Ü–µ–Ω—É –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞", callback_data="change_price"))
    markup.add(types.InlineKeyboardButton("üì§ –í—ã—Å–ª–∞—Ç—å –≤—Å–µ–º —á–µ–∫–∏", callback_data="send_all_checks"))
    markup.add(types.InlineKeyboardButton("üìú –û—Ç–ø—Ä–∞–≤–∏—Ç—å —á–µ–ª–æ–≤–µ–∫—É —á–µ–∫", callback_data="send_check"))
    markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_panel"))
    
    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –≤—ã–∑–æ–≤–∞
    try:
        if is_callback:
            bot.edit_message_text(
                menu_text,
                chat_id,
                message_id,
                parse_mode='HTML',
                reply_markup=markup
            )
        else:
            bot.send_message(
                chat_id,
                menu_text,
                parse_mode='HTML',
                reply_markup=markup
            )
    except Exception as e:
        print(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
        bot.send_message(
            chat_id,
            menu_text,
            parse_mode='HTML',
            reply_markup=markup
        )


#–í—ã–¥–∞—Ç—å —á–µ–∫
@bot.callback_query_handler(func=lambda call: call.data == "send_check")
def send_check_start(call):
    user_id = call.from_user.id
    
    if user_id not in config.ADMINS_ID:
        bot.answer_callback_query(call.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è!")
        return
    
    text = "üìù <b>–£–∫–∞–∂–∏—Ç–µ user ID –∏–ª–∏ @username</b> (–∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ reply –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ):"
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="Gv"))
    
    try:
        msg = bot.edit_message_text(
            text,
            call.message.chat.id,
            call.message.message_id,
            parse_mode='HTML',
            reply_markup=markup
        )
        bot.register_next_step_handler(msg, process_user_id_for_check, call.message.chat.id, call.message.message_id)
    except Exception as e:
        print(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
        msg = bot.send_message(
            call.message.chat.id,
            text,
            parse_mode='HTML',
            reply_markup=markup
        )
        bot.register_next_step_handler(msg, process_user_id_for_check, call.message.chat.id, msg.message_id)

def process_user_id_for_check(message, original_chat_id, original_message_id):
    user_id = message.from_user.id
    
    if user_id not in config.ADMINS_ID:
        bot.send_message(message.chat.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è!", parse_mode='HTML')
        return
    
    if not message.reply_to_message:
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("üîç –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="send_check"))
        markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="Gv"))
        bot.send_message(
            message.chat.id,
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ reply –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≤–≤–æ–¥–∞ user ID –∏–ª–∏ @username!",
            reply_markup=markup,
            parse_mode='HTML'
        )
        return
    
    input_text = message.text.strip()
    target_user_id = None
    username = None
    
    if input_text.startswith('@'):
        username = input_text[1:]
        print(f"[DEBUG] Processing username: {username}")
        with db_module.get_db() as conn:
            cursor = conn.cursor()
            cursor.execute('SELECT ID FROM users WHERE LOWER(USERNAME) = ?', (username.lower(),))
            user = cursor.fetchone()
            if user:
                target_user_id = user[0]
                print(f"[DEBUG] Found user ID {target_user_id} for username {username}")
            else:
                markup = types.InlineKeyboardMarkup()
                markup.add(types.InlineKeyboardButton("üîç –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="send_check"))
                markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="Gv"))
                bot.send_message(
                    message.chat.id,
                    f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å @username '{username}' –Ω–µ –Ω–∞–π–¥–µ–Ω!",
                    reply_markup=markup,
                    parse_mode='HTML'
                )
                return
    else:
        try:
            target_user_id = int(input_text)
            print(f"[DEBUG] Processing user ID: {target_user_id}")
        except ValueError:
            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton("üîç –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="send_check"))
            markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="Gv"))
            bot.send_message(
                message.chat.id,
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID –∏–ª–∏ @username.",
                reply_markup=markup,
                parse_mode='HTML'
            )
            return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏ –ø–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å
    with db_module.get_db() as conn:
        cursor = conn.cursor()
        cursor.execute('SELECT ID, BALANCE, USERNAME FROM users WHERE ID = ?', (target_user_id,))
        user = cursor.fetchone()
        if not user:
            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton("üîç –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="send_check"))
            markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="Gv"))
            bot.send_message(
                message.chat.id,
                f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {target_user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω!",
                reply_markup=markup,
                parse_mode='HTML'
            )
            return
        target_user_id, balance, username = user
        print(f"[DEBUG] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_user_id}: —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å={balance}, username={username}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±–∞–ª–∞–Ω—Å –±–æ–ª—å—à–µ 0
    if balance <= 0:
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("üîç –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="send_check"))
        markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="Gv"))
        bot.send_message(
            message.chat.id,
            f"‚ùå –ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_user_id} ({username if username else '–ù–µ—Ç username'}) —Ä–∞–≤–µ–Ω {balance:.2f} $. –ß–µ–∫ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–æ–∑–¥–∞–Ω!",
            reply_markup=markup,
            parse_mode='HTML'
        )
        return
    
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å user ID
    try:
        bot.delete_message(message.chat.id, message.message_id)
    except Exception as e:
        print(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å user ID: {e}")
    
    # –°–ø–∏—Å—ã–≤–∞–µ–º –≤–µ—Å—å –±–∞–ª–∞–Ω—Å –¥–æ 0.0 —Å –±–ª–æ–∫–∏—Ä–æ–≤–∫–æ–π
    with db_lock:
        with db_module.get_db() as conn:
            cursor = conn.cursor()
            # –ü–æ–≤—Ç–æ—Ä–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –ø–µ—Ä–µ–¥ —Å–ø–∏—Å–∞–Ω–∏–µ–º
            cursor.execute('SELECT BALANCE FROM users WHERE ID = ?', (target_user_id,))
            user = cursor.fetchone()
            print(f"[DEBUG] –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_user_id}: {user[0] if user else '–Ω–µ –Ω–∞–π–¥–µ–Ω'}")
            if not user or user[0] <= 0:
                markup = types.InlineKeyboardMarkup()
                markup.add(types.InlineKeyboardButton("üîç –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="send_check"))
                markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="Gv"))
                bot.send_message(
                    original_chat_id,
                    f"‚ùå –ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_user_id} —Ä–∞–≤–µ–Ω {user[0]:.2f} $. –ß–µ–∫ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–æ–∑–¥–∞–Ω!",
                    reply_markup=markup,
                    parse_mode='HTML'
                )
                return
            
            amount = round(float(user[0]), 2)  # –û–∫—Ä—É–≥–ª—è–µ–º –±–∞–ª–∞–Ω—Å –¥–æ 2 –∑–Ω–∞–∫–æ–≤
            print(f"[DEBUG] –°–æ–∑–¥–∞–Ω–∏–µ —á–µ–∫–∞ –Ω–∞ —Å—É–º–º—É {amount:.2f} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_user_id}")
            
            # –û–±–Ω—É–ª—è–µ–º –±–∞–ª–∞–Ω—Å
            print(f"[DEBUG] –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è UPDATE –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_user_id}, —É—Å—Ç–∞–Ω–æ–≤–∫–∞ BALANCE = 0")
            cursor.execute('UPDATE users SET BALANCE = 0 WHERE ID = ?', (target_user_id,))
            if cursor.rowcount == 0:
                print(f"[ERROR] UPDATE –Ω–µ –∑–∞—Ç—Ä–æ–Ω—É–ª —Å—Ç—Ä–æ–∫–∏: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –±–∞–ª–∞–Ω—Å –Ω–µ –∏–∑–º–µ–Ω—ë–Ω")
                bot.send_message(
                    original_chat_id,
                    f"‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω—É–ª–∏—Ç—å –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_user_id}.",
                    parse_mode='HTML'
                )
                return
            cursor.execute('SELECT BALANCE FROM users WHERE ID = ?', (target_user_id,))
            new_balance = cursor.fetchone()[0]
            print(f"[DEBUG] –ü–µ—Ä–µ–¥ —Ñ–∏–∫—Å–∞—Ü–∏–µ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å={new_balance:.2f}")
            conn.commit()
            print(f"[DEBUG] –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–∞: –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_user_id} –æ–±–Ω—É–ª—ë–Ω, –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {new_balance:.2f}")
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –ø–æ—Å–ª–µ —Ñ–∏–∫—Å–∞—Ü–∏–∏
            cursor.execute('SELECT BALANCE FROM users WHERE ID = ?', (target_user_id,))
            verified_balance = cursor.fetchone()[0]
            print(f"[DEBUG] –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–ª–µ —Ñ–∏–∫—Å–∞—Ü–∏–∏: –±–∞–ª–∞–Ω—Å={verified_balance:.2f}")
            if verified_balance != 0.0:
                print(f"[ERROR] –ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –±–∞–ª–∞–Ω—Å–∞ –ø–æ—Å–ª–µ —Ñ–∏–∫—Å–∞—Ü–∏–∏: –æ–∂–∏–¥–∞–ª–æ—Å—å 0.0, –ø–æ–ª—É—á–µ–Ω–æ {verified_balance:.2f}")
    
    # –°–æ–∑–¥–∞—ë–º —á–µ–∫ —á–µ—Ä–µ–∑ CryptoBot API
    crypto_api = crypto_pay.CryptoPay()
    cheque_result = crypto_api.create_check(
        amount=str(amount),
        asset="USDT",
        description=f"–í—ã–ø–ª–∞—Ç–∞ –≤—Å–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_user_id}",
        pin_to_user_id=target_user_id
    )
    print(f"[DEBUG] –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–∑–¥–∞–Ω–∏—è —á–µ–∫–∞: {cheque_result}")
    
    if cheque_result.get("ok", False):
        cheque = cheque_result.get("result", {})
        cheque_link = cheque.get("bot_check_url", "")
        
        if cheque_link:
            # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –∫–∞–∑–Ω—ã
            try:
                db_module.update_treasury_balance(-amount)
                print(f"[DEBUG] –ë–∞–ª–∞–Ω—Å –∫–∞–∑–Ω—ã —É–º–µ–Ω—å—à–µ–Ω –Ω–∞ {amount:.2f}")
            except Exception as treasury_error:
                print(f"[ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞ –∫–∞–∑–Ω—ã: {treasury_error}")
                bot.send_message(
                    original_chat_id,
                    f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞ –∫–∞–∑–Ω—ã: {str(treasury_error)}.",
                    parse_mode='HTML'
                )
                return
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            markup_user = types.InlineKeyboardMarkup()
            markup_user.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –ø—Ä–æ—Ñ–∏–ª—å", callback_data="profile"))
            try:
                safe_send_message(
                    target_user_id,
                    f"‚úÖ –í–∞–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —á–µ–∫ –Ω–∞ {amount:.2f}$ (–≤–µ—Å—å –≤–∞—à –±–∞–ª–∞–Ω—Å)!\n"
                    f"üîó –°—Å—ã–ª–∫–∞ –Ω–∞ —á–µ–∫: {cheque_link}\n"
                    f"üí∞ –í–∞—à –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {new_balance:.2f}$",
                    parse_mode='HTML',
                    reply_markup=markup_user
                )
                print(f"[DEBUG] –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_user_id}")
            except Exception as notify_error:
                print(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_user_id}: {notify_error}")
                bot.send_message(
                    original_chat_id,
                    f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_user_id}: {notify_error}",
                    parse_mode='HTML'
                )
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            username_display = f"@{username}" if username and username != "–ù–µ —É–∫–∞–∑–∞–Ω" else "–ù–µ—Ç username"
            markup_admin = types.InlineKeyboardMarkup()
            markup_admin.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –∑–∞—è–≤–∫–∏", callback_data="pending_withdrawals"))
            try:
                bot.edit_message_text(
                    f"‚úÖ –ß–µ–∫ –Ω–∞ {amount:.2f}$ (–≤–µ—Å—å –±–∞–ª–∞–Ω—Å) —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_user_id} ({username_display}).\n"
                    f"üí∞ –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {new_balance:.2f}$",
                    original_chat_id,
                    original_message_id,
                    parse_mode='HTML',
                    reply_markup=markup_admin
                )
            except Exception as e:
                print(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {e}")
                bot.send_message(
                    original_chat_id,
                    f"‚úÖ –ß–µ–∫ –Ω–∞ {amount:.2f}$ (–≤–µ—Å—å –±–∞–ª–∞–Ω—Å) —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_user_id} ({username_display}).\n"
                    f"üí∞ –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {new_balance:.2f}$",
                    parse_mode='HTML',
                    reply_markup=markup_admin
                )
            
            # –õ–æ–≥–∏—Ä—É–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é
            try:
                db_module.log_treasury_operation("–í—ã–≤–æ–¥ (—á–µ–∫ –Ω–∞ –≤–µ—Å—å –±–∞–ª–∞–Ω—Å)", -amount, db_module.get_treasury_balance())
                print(f"[DEBUG] –û–ø–µ—Ä–∞—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∞: –í—ã–≤–æ–¥ (—á–µ–∫) –Ω–∞ {amount:.2f}$")
            except Exception as log_error:
                print(f"[ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏: {log_error}")
        else:
            print("[ERROR] –°—Å—ã–ª–∫–∞ –Ω–∞ —á–µ–∫ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
            bot.send_message(
                original_chat_id,
                f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —á–µ–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_user_id}: –Ω–µ—Ç —Å—Å—ã–ª–∫–∏.",
                parse_mode='HTML'
            )
    else:
        error_msg = cheque_result.get('error', {}).get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
        print(f"[ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —á–µ–∫–∞: {error_msg}")
        bot.send_message(
            original_chat_id,
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —á–µ–∫–∞: {error_msg}",
            parse_mode='HTML'
        )
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é
    menu_text = "üìã <b>–ú–µ–Ω—é:</b>"
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ê–§–ö", callback_data="afk_settings"))
    markup.add(types.InlineKeyboardButton("üí∏ –ò–∑–º–µ–Ω–∏—Ç—å —Ü–µ–Ω—É –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞", callback_data="change_price"))
    markup.add(types.InlineKeyboardButton("üì§ –í—ã—Å–ª–∞—Ç—å –≤—Å–µ–º —á–µ–∫–∏", callback_data="send_all_checks"))
    markup.add(types.InlineKeyboardButton("üìú –û—Ç–ø—Ä–∞–≤–∏—Ç—å —á–µ–ª–æ–≤–µ–∫—É —á–µ–∫", callback_data="send_check"))
    markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –ø—Ä–æ—Ñ–∏–ª—å", callback_data="profile"))
    
    try:
        bot.edit_message_text(
            menu_text,
            original_chat_id,
            original_message_id,
            parse_mode='HTML',
            reply_markup=markup
        )
    except Exception as e:
        print(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
        bot.send_message(
            original_chat_id,
            menu_text,
            parse_mode='HTML',
            reply_markup=markup
        )

def process_check_amount(message, target_user_id, original_chat_id, original_message_id, current_balance, username_display):
    user_id = message.from_user.id
    
    if user_id not in config.ADMINS_ID:
        bot.send_message(message.chat.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è!", parse_mode='HTML')
        return
    
    if not message.reply_to_message:
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("üîç –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="send_check"))
        markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="Gv"))
        bot.send_message(
            message.chat.id,
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ reply –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≤–≤–æ–¥–∞ —Å—É–º–º—ã!",
            reply_markup=markup,
            parse_mode='HTML'
        )
        return
    
    try:
        amount = float(message.text.strip())
        if amount <= 0:
            raise ValueError("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π")
    except ValueError:
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("üîç –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="send_check"))
        markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="Gv"))
        bot.send_message(
            message.chat.id,
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã! –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 10.5).",
            reply_markup=markup,
            parse_mode='HTML'
        )
        return
    
    # –°–ø–∏—Å—ã–≤–∞–µ–º —Å—É–º–º—É —Å –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –±–ª–æ–∫–∏—Ä–æ–≤–∫–æ–π
    with db_lock:
        with db_module.get_db() as conn:
            cursor = conn.cursor()
            # –ü–æ–≤—Ç–æ—Ä–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –ø–µ—Ä–µ–¥ —Å–ø–∏—Å–∞–Ω–∏–µ–º
            cursor.execute('SELECT BALANCE FROM users WHERE ID = ?', (target_user_id,))
            user = cursor.fetchone()
            print(f"[DEBUG] –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_user_id}: {user[0] if user else '–Ω–µ –Ω–∞–π–¥–µ–Ω'}")
            if not user or user[0] < amount:
                markup = types.InlineKeyboardMarkup()
                markup.add(types.InlineKeyboardButton("üîç –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="send_check"))
                markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="Gv"))
                bot.send_message(
                    message.chat.id,
                    f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_user_id}! –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {user[0] if user else 0} $",
                    reply_markup=markup,
                    parse_mode='HTML'
                )
                return
            
            # –£–º–µ–Ω—å—à–∞–µ–º –±–∞–ª–∞–Ω—Å
            print(f"[DEBUG] –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è UPDATE –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_user_id}, —É–º–µ–Ω—å—à–µ–Ω–∏–µ –Ω–∞ {amount}")
            cursor.execute('UPDATE users SET BALANCE = BALANCE - ? WHERE ID = ?', (amount, target_user_id))
            if cursor.rowcount == 0:
                print(f"[ERROR] UPDATE –Ω–µ –∑–∞—Ç—Ä–æ–Ω—É–ª —Å—Ç—Ä–æ–∫–∏: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –±–∞–ª–∞–Ω—Å –Ω–µ –∏–∑–º–µ–Ω—ë–Ω")
                bot.send_message(
                    message.chat.id,
                    f"‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_user_id}.",
                    parse_mode='HTML'
                )
                return
            cursor.execute('SELECT BALANCE FROM users WHERE ID = ?', (target_user_id,))
            new_balance = cursor.fetchone()[0]
            print(f"[DEBUG] –ü–µ—Ä–µ–¥ —Ñ–∏–∫—Å–∞—Ü–∏–µ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å={new_balance}")
            conn.commit()
            print(f"[DEBUG] –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–∞: –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_user_id} —É–º–µ–Ω—å—à–µ–Ω –Ω–∞ {amount}$, –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {new_balance}")
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –ø–æ—Å–ª–µ —Ñ–∏–∫—Å–∞—Ü–∏–∏
            cursor.execute('SELECT BALANCE FROM users WHERE ID = ?', (target_user_id,))
            verified_balance = cursor.fetchone()[0]
            print(f"[DEBUG] –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–ª–µ —Ñ–∏–∫—Å–∞—Ü–∏–∏: –±–∞–ª–∞–Ω—Å={verified_balance}")
            if verified_balance != new_balance:
                print(f"[ERROR] –ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –±–∞–ª–∞–Ω—Å–∞ –ø–æ—Å–ª–µ —Ñ–∏–∫—Å–∞—Ü–∏–∏: –æ–∂–∏–¥–∞–ª–æ—Å—å {new_balance}, –ø–æ–ª—É—á–µ–Ω–æ {verified_balance}")
    
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å—É–º–º–æ–π
    try:
        bot.delete_message(message.chat.id, message.message_id)
    except Exception as e:
        print(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å—É–º–º–æ–π: {e}")
    
    # –°–æ–∑–¥–∞—ë–º —á–µ–∫ —á–µ—Ä–µ–∑ CryptoBot API
    crypto_api = crypto_pay.CryptoPay()
    cheque_result = crypto_api.create_check(
        amount=amount,
        asset="USDT",
        description=f"–í—ã–ø–ª–∞—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_user_id}",
        pin_to_user_id=target_user_id
    )
    print(f"[DEBUG] –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–∑–¥–∞–Ω–∏—è —á–µ–∫–∞: {cheque_result}")
    
    if cheque_result.get("ok", False):
        cheque = cheque_result.get("result", {})
        cheque_link = cheque.get("bot_check_url", "")
        
        if cheque_link:
            # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –∫–∞–∑–Ω—ã
            try:
                db_module.update_treasury_balance(-amount)
                print(f"[DEBUG] –ë–∞–ª–∞–Ω—Å –∫–∞–∑–Ω—ã —É–º–µ–Ω—å—à–µ–Ω –Ω–∞ {amount}")
            except Exception as treasury_error:
                print(f"[ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞ –∫–∞–∑–Ω—ã: {treasury_error}")
                bot.send_message(
                    original_chat_id,
                    f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞ –∫–∞–∑–Ω—ã: {str(treasury_error)}.",
                    parse_mode='HTML'
                )
                return
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            markup_user = types.InlineKeyboardMarkup()
            markup_user.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –ø—Ä–æ—Ñ–∏–ª—å", callback_data="profile"))
            try:
                safe_send_message(
                    target_user_id,
                    f"‚úÖ –í–∞–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —á–µ–∫ –Ω–∞ {amount}$!\n"
                    f"üîó –°—Å—ã–ª–∫–∞ –Ω–∞ —á–µ–∫: {cheque_link}\n"
                    f"üí∞ –í–∞—à –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {new_balance}$",
                    parse_mode='HTML',
                    reply_markup=markup_user
                )
                print(f"[DEBUG] –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_user_id}")
            except Exception as notify_error:
                print(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_user_id}: {notify_error}")
                bot.send_message(
                    original_chat_id,
                    f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_user_id}: {notify_error}",
                    parse_mode='HTML'
                )
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            markup_admin = types.InlineKeyboardMarkup()
            markup_admin.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –∑–∞—è–≤–∫–∏", callback_data="pending_withdrawals"))
            try:
                bot.edit_message_text(
                    f"‚úÖ –ß–µ–∫ –Ω–∞ {amount}$ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_user_id} ({username_display}).\n"
                    f"üí∞ –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {new_balance}$",
                    original_chat_id,
                    original_message_id,
                    parse_mode='HTML',
                    reply_markup=markup_admin
                )
            except Exception as e:
                print(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {e}")
                bot.send_message(
                    original_chat_id,
                    f"‚úÖ –ß–µ–∫ –Ω–∞ {amount}$ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_user_id} ({username_display}).\n"
                    f"üí∞ –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {new_balance}$",
                    parse_mode='HTML',
                    reply_markup=markup_admin
                )
            
            # –õ–æ–≥–∏—Ä—É–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é
            try:
                db_module.log_treasury_operation("–í—ã–≤–æ–¥ (—á–µ–∫)", -amount, db_module.get_treasury_balance())
                print(f"[DEBUG] –û–ø–µ—Ä–∞—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∞: –í—ã–≤–æ–¥ (—á–µ–∫) –Ω–∞ {amount}$")
            except Exception as log_error:
                print(f"[ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏: {log_error}")
        else:
            print("[ERROR] –°—Å—ã–ª–∫–∞ –Ω–∞ —á–µ–∫ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
            bot.send_message(
                original_chat_id,
                f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —á–µ–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_user_id}: –Ω–µ—Ç —Å—Å—ã–ª–∫–∏.",
                parse_mode='HTML'
            )
    else:
        error_msg = cheque_result.get('error', {}).get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
        print(f"[ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —á–µ–∫–∞: {error_msg}")
        bot.send_message(
            original_chat_id,
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —á–µ–∫–∞: {error_msg}",
            parse_mode='HTML'
        )
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é
    menu_text = "üìã <b>–ú–µ–Ω—é:</b>"
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ê–§–ö", callback_data="afk_settings"))
    markup.add(types.InlineKeyboardButton("üí∏ –ò–∑–º–µ–Ω–∏—Ç—å —Ü–µ–Ω—É –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞", callback_data="change_price"))
    markup.add(types.InlineKeyboardButton("üì§ –í—ã—Å–ª–∞—Ç—å –≤—Å–µ–º —á–µ–∫–∏", callback_data="send_all_checks"))
    markup.add(types.InlineKeyboardButton("üìú –û—Ç–ø—Ä–∞–≤–∏—Ç—å —á–µ–ª–æ–≤–µ–∫—É —á–µ–∫", callback_data="send_check"))
    markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –ø—Ä–æ—Ñ–∏–ª—å", callback_data="profile"))
    
    try:
        bot.edit_message_text(
            menu_text,
            original_chat_id,
            original_message_id,
            parse_mode='HTML',
            reply_markup=markup
        )
    except Exception as e:
        print(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
        bot.send_message(
            original_chat_id,
            menu_text,
            parse_mode='HTML',
            reply_markup=markup
        )

#–ò–ó–ú–ï–ù–ò–¢ –¶–ï–ù–£:
# bot.py
@bot.callback_query_handler(func=lambda call: call.data == "change_price")
def change_price_start(call):
    if call.from_user.id not in config.ADMINS_ID:
        bot.answer_callback_query(call.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è!")
        return
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥", callback_data="Gv"))

    msg = bot.edit_message_text(
        "üìù –í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ @username, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—É—é —Ü–µ–Ω—É (–æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ):",
        call.message.chat.id,
        call.message.message_id,
        reply_markup=markup
    )
    bot.register_next_step_handler(msg, process_user_id_for_price)

def process_user_id_for_price(message):
    if message.from_user.id not in config.ADMINS_ID:
        bot.send_message(message.chat.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è!")
        return
    
    input_text = message.text.strip()
    user_id = None
    username = None
    
    if input_text.startswith('@'):
        username = input_text[1:]  # –£–±–∏—Ä–∞–µ–º @ (–Ω–∞–ø—Ä–∏–º–µ—Ä, Devshop19)
        print(f"[DEBUG] Processing username: {username}")
        with get_db() as conn:
            cursor = conn.cursor()
            cursor.execute('SELECT ID FROM users WHERE LOWER(USERNAME) = ?', (username.lower(),))
            user = cursor.fetchone()
            if user:
                user_id = user[0]
                print(f"[DEBUG] Found user ID {user_id} for username {username}")
            else:
                markup = types.InlineKeyboardMarkup()
                markup.add(types.InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥", callback_data="Gv"))
                bot.send_message(message.chat.id, f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å @username '{username}' –Ω–µ –Ω–∞–π–¥–µ–Ω!", reply_markup=markup)
                return
    else:
        try:
            user_id = int(input_text)
            print(f"[DEBUG] Processing user ID: {user_id}")
        except ValueError:
            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥", callback_data="Gv"))
            bot.send_message(message.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID –∏–ª–∏ @username.", reply_markup=markup)
            return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    with get_db() as conn:
        cursor = conn.cursor()
        cursor.execute('SELECT ID FROM users WHERE ID = ?', (user_id,))
        if not cursor.fetchone():
            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥", callback_data="Gv"))
            bot.send_message(message.chat.id, f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω!", reply_markup=markup)
            return
    
    msg = bot.send_message(
        message.chat.id,
        f"üíµ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É (–≤ $) –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} (–æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ):"
    )
    bot.register_next_step_handler(msg, process_price, user_id)

def process_price(message, user_id):
    if message.from_user.id not in config.ADMINS_ID:
        bot.send_message(message.chat.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è!")
        return
    
    try:
        price = float(message.text.strip())
        if price <= 0:
            raise ValueError("–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π!")
        
        db_module.set_custom_price(user_id, price)
        
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥", callback_data="Gv"))
        bot.send_message(
            message.chat.id,
            f"‚úÖ –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {price}$",
            reply_markup=markup
        )
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            bot.send_message(
                user_id,
                f"üíµ –í–∞—à–∞ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –∑–∞ –Ω–æ–º–µ—Ä –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {price}$!"
            )
        except Exception as e:
            print(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            
    except ValueError as e:
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("üîô –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel"))
        bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}", reply_markup=markup)


# –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
AFK_STATE = {}

@bot.callback_query_handler(func=lambda call: call.data == "afk_settings")
def afk_settings(call):
    if call.from_user.id not in config.ADMINS_ID:
        bot.answer_callback_query(call.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º –ê–§–ö!")
        return
    
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="Gv"))
    
    msg = bot.edit_message_text(
        "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ê–§–ö</b>\n\n–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ @username –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –µ–≥–æ –ê–§–ö-—Å—Ç–∞—Ç—É—Å–æ–º:",
        call.message.chat.id,
        call.message.message_id,
        parse_mode='HTML',
        reply_markup=markup
    )
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    AFK_STATE[call.from_user.id] = {"step": "awaiting_user_id", "message_id": msg.message_id}
    bot.register_next_step_handler(msg, process_afk_user_id)

def process_afk_user_id(message):
    admin_id = message.from_user.id
    if admin_id not in AFK_STATE or AFK_STATE[admin_id]["step"] != "awaiting_user_id":
        print(f"[DEBUG] Invalid state for admin_id {admin_id}: {AFK_STATE.get(admin_id)}")
        return

    if message.from_user.id not in config.ADMINS_ID:
        bot.send_message(message.chat.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è!")
        return

    input_text = message.text.strip()
    print(f"[DEBUG] Input text: '{input_text}'")

    target_user_id = None
    username = None
    if input_text.startswith('@'):
        username = input_text[1:]  # –£–±–∏—Ä–∞–µ–º @ (–Ω–∞–ø—Ä–∏–º–µ—Ä, Devshop19)
        print(f"[DEBUG] Processing username: {username}")
    else:
        try:
            target_user_id = int(input_text)
            print(f"[DEBUG] Processing user ID: {target_user_id}")
        except ValueError:
            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="afk_settings"))
            bot.send_message(message.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID –∏–ª–∏ @username.", reply_markup=markup)
            bot.register_next_step_handler(message, process_afk_user_id)
            return

    if username:
        with db.get_db() as conn:
            cursor = conn.cursor()
            # –û—Ç–ª–∞–¥–∫–∞: –≤—ã–≤–æ–¥–∏–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            cursor.execute('SELECT ID, USERNAME FROM users')
            all_users = cursor.fetchall()
            print(f"[DEBUG] All users in DB: {all_users}")
            
            # –ü–æ–∏—Å–∫ –±–µ–∑ —É—á—ë—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞
            cursor.execute('SELECT ID FROM users WHERE LOWER(USERNAME) = ?', (username.lower(),))
            user = cursor.fetchone()
            if user:
                target_user_id = user[0]
                print(f"[DEBUG] Found user ID {target_user_id} for username {username}")
            else:
                markup = types.InlineKeyboardMarkup()
                markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="afk_settings"))
                bot.send_message(message.chat.id, f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å @username '{username}' –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=markup)
                bot.register_next_step_handler(message, process_afk_user_id)
                print(f"[DEBUG] Username {username} not found in DB")
                return

    try:
        with db.get_db() as conn:
            cursor = conn.cursor()
            cursor.execute('SELECT IS_AFK, AFK_LOCKED, USERNAME FROM users WHERE ID = ?', (target_user_id,))
            user = cursor.fetchone()
            if not user:
                markup = types.InlineKeyboardMarkup()
                markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="afk_settings"))
                bot.send_message(message.chat.id, f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {target_user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=markup)
                bot.register_next_step_handler(message, process_afk_user_id)
                return
            
            is_afk, afk_locked, username = user
            print(f"[DEBUG] User {target_user_id}: IS_AFK={is_afk}, AFK_LOCKED={afk_locked}, USERNAME={username}")
            afk_status_text = "–í–∫–ª—é—á—ë–Ω" if is_afk else "–í—ã–∫–ª—é—á–µ–Ω"
            
            username_display = f"@{username}" if username and username != "–ù–µ —É–∫–∞–∑–∞–Ω" else "–ù–µ—Ç username"
            username_text = f"üë§ Username: <a href=\"tg://user?id={target_user_id}\">{username_display}</a>\n" if username and username != "–ù–µ —É–∫–∞–∑–∞–Ω" else "üë§ Username: –ù–µ—Ç username\n"
            
            markup = types.InlineKeyboardMarkup()
            markup.add(
                types.InlineKeyboardButton("üü¢ –í–∫–ª—é—á–∏—Ç—å –ê–§–ö", callback_data=f"admin_enable_afk_{target_user_id}"),
                types.InlineKeyboardButton("üî¥ –í—ã–∫–ª—é—á–∏—Ç—å –ê–§–ö", callback_data=f"admin_disable_afk_{target_user_id}")
            )
            markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="afk_settings"))
            
            bot.send_message(
                message.chat.id,
                f"üë§ <b>User ID:</b> {target_user_id}\n"
                f"{username_text}"
                f"üîî <b>–ê–§–ö –°—Ç–∞—Ç—É—Å:</b> {afk_status_text}\n"
                f"üîí <b>–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ê–§–ö:</b> {'–î–∞' if afk_locked else '–ù–µ—Ç'}",
                parse_mode='HTML',
                reply_markup=markup
            )
    except Exception as e:
        print(f"[ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ AFK –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_user_id}: {e}")
        bot.send_message(message.chat.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    
    AFK_STATE.pop(admin_id, None)

@bot.callback_query_handler(func=lambda call: call.data.startswith("admin_enable_afk_"))
def admin_enable_afk(call):
    if call.from_user.id not in config.ADMINS_ID:
        bot.answer_callback_query(call.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è!")
        return
    
    target_user_id = int(call.data.replace("admin_enable_afk_", ""))
    
    # –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ confirmation_messages –∏ code_messages
    with db_module.get_db() as conn:
        cursor = conn.cursor()
        cursor.execute('SELECT NUMBER FROM numbers WHERE ID_OWNER = ?', (target_user_id,))
        numbers = cursor.fetchall()
        for number_tuple in numbers:
            number = number_tuple[0]
            confirmation_messages.pop(f"{number}_{target_user_id}", None)
            code_messages.pop(number, None)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å AFK –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    with db_module.get_db() as conn:
        cursor = conn.cursor()
        cursor.execute('UPDATE users SET IS_AFK = ?, AFK_LOCKED = ? WHERE ID = ?', (1, 1, target_user_id))
        conn.commit()
        print(f"[DEBUG] –ê–§–ö –≤–∫–ª—é—á—ë–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_user_id} —Å –±–ª–æ–∫–∏—Ä–æ–≤–∫–æ–π")

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º —Å—Ç–∞—Ç—É—Å–æ–º
    chat_id = call.message.chat.id
    message_id = call.message.message_id
    
    with db_module.get_db() as conn:
        cursor = conn.cursor()
        cursor.execute('SELECT IS_AFK, AFK_LOCKED, USERNAME FROM users WHERE ID = ?', (target_user_id,))
        user = cursor.fetchone()
        is_afk, afk_locked, username = user
        afk_status_text = "–í–∫–ª—é—á—ë–Ω" if is_afk else "–í—ã–∫–ª—é—á–µ–Ω"
        
        username_display = f"@{username}" if username and username != "–ù–µ —É–∫–∞–∑–∞–Ω" else "–ù–µ—Ç username"
        username_text = f"üë§ Username: <a href=\"tg://user?id={target_user_id}\">{username_display}</a>\n" if username and username != "–ù–µ —É–∫–∞–∑–∞–Ω" else "üë§ Username: –ù–µ—Ç username\n"
        
        markup = types.InlineKeyboardMarkup()
        markup.add(
            types.InlineKeyboardButton("üü¢ –í–∫–ª—é—á–∏—Ç—å –ê–§–ö", callback_data=f"admin_enable_afk_{target_user_id}"),
            types.InlineKeyboardButton("üî¥ –í—ã–∫–ª—é—á–∏—Ç—å –ê–§–ö", callback_data=f"admin_disable_afk_{target_user_id}")
        )
        markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="afk_settings"))
        
        try:
            bot.edit_message_text(
                f"üë§ <b>User ID:</b> {target_user_id}\n"
                f"{username_text}"
                f"üîî <b>–ê–§–ö –°—Ç–∞—Ç—É—Å:</b> {afk_status_text}",
                chat_id,
                message_id,
                parse_mode='HTML',
                reply_markup=markup
            )
        except Exception as e:
            print(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
            bot.send_message(chat_id, f"üë§ <b>User ID:</b> {target_user_id}\n{username_text}üîî <b>–ê–§–ö –°—Ç–∞—Ç—É—Å:</b> {afk_status_text}", parse_mode='HTML', reply_markup=markup)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    try:
        bot.send_message(
            target_user_id,
            "üîî <b>–í–∞—à –ê–§–ö-—Å—Ç–∞—Ç—É—Å –±—ã–ª –∏–∑–º–µ–Ω—ë–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º</b>\n\n"
            "–¢–µ–ø–µ—Ä—å –≤–∞—à –ê–§–ö: <b>–í–∫–ª—é—á—ë–Ω</b>",
            parse_mode='HTML'
        )
    except Exception as e:
        print(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_user_id}: {e}")

    bot.answer_callback_query(call.id, "‚úÖ –ê–§–ö –≤–∫–ª—é—á—ë–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!")

@bot.callback_query_handler(func=lambda call: call.data.startswith("admin_disable_afk_"))
def admin_disable_afk(call):
    if call.from_user.id not in config.ADMINS_ID:
        bot.answer_callback_query(call.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è!")
        return
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º target_user_id –∏–∑ callback_data
    target_user_id = int(call.data.replace("admin_disable_afk_", ""))
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å AFK –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    with db.get_db() as conn:
        cursor = conn.cursor()
        cursor.execute('UPDATE users SET IS_AFK = ?, AFK_LOCKED = ? WHERE ID = ?', (0, 0, target_user_id))
        conn.commit()
        print(f"[DEBUG] –ê–§–ö –≤—ã–∫–ª—é—á–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_user_id}, –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —Å–Ω—è—Ç–∞")

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º —Å—Ç–∞—Ç—É—Å–æ–º
    chat_id = call.message.chat.id
    message_id = call.message.message_id
    
    with db.get_db() as conn:
        cursor = conn.cursor()
        # –ò–∑–≤–ª–µ–∫–∞–µ–º IS_AFK, AFK_LOCKED –∏ USERNAME
        cursor.execute('SELECT IS_AFK, AFK_LOCKED, USERNAME FROM users WHERE ID = ?', (target_user_id,))
        user = cursor.fetchone()
        is_afk, afk_locked, username = user
        afk_status_text = "–í–∫–ª—é—á—ë–Ω" if is_afk else "–í—ã–∫–ª—é—á–µ–Ω"
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º username –∫–∞–∫ –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É
        username_display = f"@{username}" if username and username != "–ù–µ —É–∫–∞–∑–∞–Ω" else "–ù–µ—Ç username"
        username_text = f"üë§ Username: <a href=\"tg://user?id={target_user_id}\">{username_display}</a>\n" if username and username != "–ù–µ —É–∫–∞–∑–∞–Ω" else "üë§ Username: –ù–µ—Ç username\n"
        
        markup = types.InlineKeyboardMarkup()
        markup.add(
            types.InlineKeyboardButton("üü¢ –í–∫–ª—é—á–∏—Ç—å –ê–§–ö", callback_data=f"admin_enable_afk_{target_user_id}"),
            types.InlineKeyboardButton("üî¥ –í—ã–∫–ª—é—á–∏—Ç—å –ê–§–ö", callback_data=f"admin_disable_afk_{target_user_id}")
        )
        markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="afk_settings"))
        
        try:
            bot.edit_message_text(
                f"üë§ <b>User ID:</b> {target_user_id}\n"
                f"{username_text}"
                f"üîî <b>–ê–§–ö –°—Ç–∞—Ç—É—Å:</b> {afk_status_text}",
                chat_id,
                message_id,
                parse_mode='HTML',
                reply_markup=markup
            )
        except Exception as e:
            print(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
            bot.send_message(chat_id, f"üë§ <b>User ID:</b> {target_user_id}\n{username_text}üîî <b>–ê–§–ö –°—Ç–∞—Ç—É—Å:</b> {afk_status_text}", parse_mode='HTML', reply_markup=markup)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    try:
        bot.send_message(
            target_user_id,
            "üîî <b>–í–∞—à –ê–§–ö-—Å—Ç–∞—Ç—É—Å –±—ã–ª –∏–∑–º–µ–Ω—ë–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º</b>\n\n"
            "–¢–µ–ø–µ—Ä—å –≤–∞—à –ê–§–ö: <b>–í—ã–∫–ª—é—á–µ–Ω</b>",
            parse_mode='HTML'
        )
    except Exception as e:
        print(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_user_id}: {e}")

    bot.answer_callback_query(call.id, "‚úÖ –ê–§–ö –≤—ã–∫–ª—é—á–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!")



def cancel_old_checks(crypto_api):
    try:
        checks_result = crypto_api.get_checks(status="active")
        if checks_result.get("ok", False):
            for check in checks_result["result"]["items"]:
                check_id = check["check_id"]
                crypto_api.delete_check(check_id=check_id)
                print(f"[INFO] –û—Ç–º–µ–Ω—ë–Ω —á–µ–∫ {check_id}, –≤—ã—Å–≤–æ–±–æ–∂–¥–µ–Ω–æ {check['amount']} USDT")
    except Exception as e:
        print(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ä—ã–µ —á–µ–∫–∏: {e}")



@bot.callback_query_handler(func=lambda call: call.data == "send_all_checks")
def send_all_checks(call):
    if call.from_user.id not in config.ADMINS_ID:
        bot.answer_callback_query(call.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è!")
        return
    
    crypto_api = crypto_pay.CryptoPay()
    
    try:
        cancel_old_checks(crypto_api)
        balance_result = crypto_api.get_balance()
        if not balance_result.get("ok", False):
            bot.edit_message_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –±–∞–ª–∞–Ω—Å–∞ CryptoPay. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                call.message.chat.id,
                call.message.message_id
            )
            return
        
        usdt_balance = next((float(item["available"]) for item in balance_result["result"] if item["currency_code"] == "USDT"), 0.0)
        usdt_onhold = next((float(item["onhold"]) for item in balance_result["result"] if item["currency_code"] == "USDT"), 0.0)
        
        print(f"[INFO] –ë–∞–ª–∞–Ω—Å CryptoPay: –¥–æ—Å—Ç—É–ø–Ω–æ {usdt_balance} USDT, –≤ —Ä–µ–∑–µ—Ä–≤–µ {usdt_onhold} USDT")
        
        if usdt_balance <= 0:
            bot.edit_message_text(
                f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ CryptoPay.\n–î–æ—Å—Ç—É–ø–Ω–æ: {usdt_balance} USDT\n–í —Ä–µ–∑–µ—Ä–≤–µ: {usdt_onhold} USDT",
                call.message.chat.id,
                call.message.message_id
            )
            return
    except Exception as e:
        print(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å CryptoPay: {e}")
        bot.edit_message_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –±–∞–ª–∞–Ω—Å–∞ CryptoPay. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            call.message.chat.id,
            call.message.message_id
        )
        return
    
    with db_module.get_db() as conn:
        cursor = conn.cursor()
        cursor.execute('SELECT BALANCE FROM treasury WHERE ID = 1')
        treasury_result = cursor.fetchone()
        treasury_balance = treasury_result[0] if treasury_result else 0.0
        
        if treasury_balance <= 0:
            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton("üîô –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel"))
            bot.edit_message_text(
                "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –≤ –∫–∞–∑–Ω–µ –¥–ª—è –≤—ã–ø–ª–∞—Ç.",
                call.message.chat.id,
                call.message.message_id,
                reply_markup=markup
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –±–∞–ª–∞–Ω—Å–æ–º > 0.2, –≤–∫–ª—é—á–∞—è USERNAME
        cursor.execute('SELECT ID, BALANCE, USERNAME FROM users WHERE BALANCE > 0.2')
        users = cursor.fetchall()
        
        if not users:
            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥", callback_data="Gv"))
            bot.edit_message_text(
                "‚ùå –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –±–∞–ª–∞–Ω—Å–æ–º –±–æ–ª—å—à–µ 0.2$.",
                call.message.chat.id,
                call.message.message_id,
                reply_markup=markup
            )
            return
        
        success_count = 0
        total_amount = 0
        failed_users = []
        checks_report = []  # –°–ø–∏—Å–æ–∫ –¥–ª—è –æ—Ç—á—ë—Ç–∞
        current_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        
        for user_id, balance, username in users:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ —Å—Ä–µ–¥—Å—Ç–≤ –ø–µ—Ä–µ–¥ –ø–æ–ø—ã—Ç–∫–æ–π –≤—ã–ø–ª–∞—Ç—ã
            if float(balance) > treasury_balance:
                failed_users.append((user_id, balance, username, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –≤ –∫–∞–∑–Ω–µ"))
                continue
            if float(balance) > usdt_balance:
                failed_users.append((user_id, balance, username, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ CryptoPay"))
                continue
            
            for attempt in range(3):
                try:
                    cheque_result = crypto_api.create_check(
                        amount=str(balance),
                        asset="USDT",
                        pin_to_user_id=user_id,
                        description=f"–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≤—ã–ø–ª–∞—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}"
                    )
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ cheque_result —Å—Ç—Ä–æ–∫–æ–π, –∏ –ø–∞—Ä—Å–∏–º –µ—ë –∫–∞–∫ JSON
                    if isinstance(cheque_result, str):
                        try:
                            cheque_result = json.loads(cheque_result)
                        except json.JSONDecodeError as e:
                            print(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç create_check: {cheque_result}, –æ—à–∏–±–∫–∞: {e}")
                            failed_users.append((user_id, balance, username, "–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–∞ –æ—Ç CryptoPay"))
                            break
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ –º–µ—Ç–æ–¥ createCheck –æ—Ç–∫–ª—é—á—ë–Ω
                    if isinstance(cheque_result, dict) and not cheque_result.get("ok", False):
                        error = cheque_result.get("error", {})
                        if isinstance(error, dict) and error.get("code") == 403 and error.get("name") == "METHOD_DISABLED":
                            markup = types.InlineKeyboardMarkup()
                            markup.add(types.InlineKeyboardButton("üîô –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel"))
                            bot.edit_message_text(
                                "‚ùå –í @CryptoBot –æ—Ç–∫–ª—é—á–µ–Ω–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å–æ–∑–¥–∞–≤–∞—Ç—å —á–µ–∫–∏. –í–∫–ª—é—á–∏—Ç–µ –º–µ—Ç–æ–¥ createCheck –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.",
                                call.message.chat.id,
                                call.message.message_id,
                                reply_markup=markup
                            )
                            return
                        else:
                            error_name = error.get("name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞") if isinstance(error, dict) else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"
                            failed_users.append((user_id, balance, username, f"–û—à–∏–±–∫–∞ CryptoPay: {error_name}"))
                            break
                    
                    if cheque_result.get("ok", False):
                        cheque = cheque_result.get("result", {})
                        cheque_link = cheque.get("bot_check_url", "")
                        
                        if cheque_link:
                            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —á–µ–∫ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                            cursor.execute('''
                                INSERT INTO checks (USER_ID, AMOUNT, CHECK_CODE, STATUS, CREATED_AT)
                                VALUES (?, ?, ?, ?, ?)
                            ''', (user_id, balance, cheque_link, 'pending', current_time))
                            conn.commit()
                            
                            # –û–±–Ω—É–ª—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                            cursor.execute('UPDATE users SET BALANCE = 0 WHERE ID = ?', (user_id,))
                            conn.commit()
                            
                            # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –∫–∞–∑–Ω—ã
                            treasury_balance -= float(balance)
                            cursor.execute('UPDATE treasury SET BALANCE = ? WHERE ID = 1', (treasury_balance,))
                            conn.commit()
                            db_module.log_treasury_operation("–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–≤–æ–¥ (–º–∞—Å—Å–æ–≤—ã–π)", balance, treasury_balance)
                            
                            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á—ë—Ç
                            username_display = username if username and username != "–ù–µ —É–∫–∞–∑–∞–Ω" else "–ù–µ —É–∫–∞–∑–∞–Ω"
                            checks_report.append({
                                "cheque_link": cheque_link,
                                "user_id": user_id,
                                "username": username_display,
                                "amount": balance
                            })
                            
                            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                            markup = types.InlineKeyboardMarkup()
                            markup.add(types.InlineKeyboardButton("üí≥ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —á–µ–∫", url=cheque_link))
                            markup.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
                            try:
                                bot.send_message(
                                    user_id,
                                    f"‚úÖ –í–∞—à —á–µ–∫ –Ω–∞ —Å—É–º–º—É {balance}$ –≥–æ—Ç–æ–≤!\n"
                                    f"–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –µ–≥–æ:",
                                    reply_markup=markup,
                                    parse_mode='HTML'
                                )
                            except Exception as e:
                                print(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
                                failed_users.append((user_id, balance, username, "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è"))
                                break
                            
                            # –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—Ö
                            log_entry = f"[{current_time}] | –ú–∞—Å—Å–æ–≤–∞—è –≤—ã–ø–ª–∞—Ç–∞ | –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} | –°—É–º–º–∞ {balance}$ | –£—Å–ø–µ—Ö"
                            with open("withdrawals_log.txt", "a", encoding="utf-8") as log_file:
                                log_file.write(log_entry + "\n")
                            
                            success_count += 1
                            total_amount += balance
                            usdt_balance -= float(balance)
                            break
                    else:
                        error = cheque_result.get("error", {}).get("name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞") if isinstance(cheque_result, dict) else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"
                        failed_users.append((user_id, balance, username, f"–û—à–∏–±–∫–∞ CryptoPay: {error}"))
                        break
                except RequestException as e:
                    print(f"[ERROR] –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
                    if attempt == 2:
                        failed_users.append((user_id, balance, username, f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}"))
                    continue
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á—ë—Ç –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        report = (
            f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —á–µ–∫–æ–≤: {success_count}\n"
            f"üí∞ –û–±—â–∞—è —Å—É–º–º–∞: {total_amount}$\n"
            f"üí∞ –ë–∞–ª–∞–Ω—Å CryptoPay: {usdt_balance}$\n"
            f"üí∞ –í —Ä–µ–∑–µ—Ä–≤–µ CryptoPay: {usdt_onhold}$\n"
        )
        if checks_report:
            report += "\nüìã –£—Å–ø–µ—à–Ω—ã–µ –≤—ã–ø–ª–∞—Ç—ã:\n"
            for entry in checks_report:
                report += (
                    f"ID: {entry['user_id']}, "
                    f"Username: @{entry['username']}, "
                    f"–°—É–º–º–∞: {entry['amount']}$, "
                    f"–°—Å—ã–ª–∫–∞: {entry['cheque_link']}\n"
                    f""
                    f"‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî"
                )
        if failed_users:
            report += "\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n"
            for user_id, balance, username, error in failed_users:
                username_display = username if username and username != "–ù–µ —É–∫–∞–∑–∞–Ω" else "–ù–µ —É–∫–∞–∑–∞–Ω"
                report += f"ID: {user_id}, Username: @{username_display}, –°—É–º–º–∞: {balance}$, –û—à–∏–±–∫–∞: {error}\n"
        
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("üîô –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel"))
        bot.edit_message_text(
            report,
            call.message.chat.id,
            call.message.message_id,
            reply_markup=markup,
            parse_mode='HTML'
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á—ë—Ç –≤ —Ñ–∞–π–ª
        report_filename = f"checks_report_{current_time.replace(':', '-')}.txt"
        with open(report_filename, "w", encoding="utf-8") as report_file:
            report_file.write(report)
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
        admin_message = (
            f"üí∏ <b>–ú–∞—Å—Å–æ–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —á–µ–∫–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞</b>\n\n"
            f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {success_count} —á–µ–∫–æ–≤\n"
            f"üí∞ –û–±—â–∞—è —Å—É–º–º–∞: {total_amount}$\n"
            f"üí∞ –û—Å—Ç–∞—Ç–æ–∫ –≤ –∫–∞–∑–Ω–µ: {treasury_balance}$\n"
            f"üí∞ –ë–∞–ª–∞–Ω—Å CryptoPay: {usdt_balance}$\n"
            f"üí∞ –í —Ä–µ–∑–µ—Ä–≤–µ CryptoPay: {usdt_onhold}$\n"
        )
        if checks_report:
            admin_message += "\nüìã –£—Å–ø–µ—à–Ω—ã–µ –≤—ã–ø–ª–∞—Ç—ã:\n"
            for entry in checks_report:
                admin_message += (
                    f"ID: {entry['user_id']}, "
                    f"Username: @{entry['username']}, "
                    f"–°—É–º–º–∞: {entry['amount']}$, "
                    f"–°—Å—ã–ª–∫–∞: {entry['cheque_link']}\n"
                )
        if failed_users:
            admin_message += "\n‚ùå –û—à–∏–±–∫–∏:\n"
            for user_id, balance, username, error in failed_users:
                username_display = username if username and username != "–ù–µ —É–∫–∞–∑–∞–Ω" else "–ù–µ —É–∫–∞–∑–∞–Ω"
                admin_message += f"ID: {user_id}, Username: @{username_display}, –°—É–º–º–∞: {balance}$, –û—à–∏–±–∫–∞: {error}\n"
        
        for admin_id in config.ADMINS_ID:
            try:
                bot.send_message(admin_id, admin_message, parse_mode='HTML')
            except:
                continue


# bot.py
SEND_CHECK_STATE = {}
search_state = {}

@bot.callback_query_handler(func=lambda call: call.data == "send_check")
def send_check_start(call):
    if call.from_user.id not in config.ADMINS_ID:
        bot.answer_callback_query(call.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è!")
        return
    
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="Gv"))
    msg = bot.edit_message_text(
        "–í–≤–µ–¥–∏—Ç–µ user_id –∏–ª–∏ @username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–º—É –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —á–µ–∫ (–æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ):",
        call.message.chat.id,
        call.message.message_id,
        reply_markup=markup
    )
    
    SEND_CHECK_STATE[call.from_user.id] = {"step": "awaiting_user_id", "message_id": msg.message_id}
    bot.register_next_step_handler(msg, process_user_id_input)

def process_user_id_input(message):
    admin_id = message.from_user.id
    if admin_id not in SEND_CHECK_STATE or SEND_CHECK_STATE[admin_id]["step"] != "awaiting_user_id":
        return
    
    if not message.text:
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("üîç –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="send_check"))
        markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_panel"))
        bot.reply_to(message, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ user_id –∏–ª–∏ @username.", reply_markup=markup)
        bot.register_next_step_handler(message, process_user_id_input)
        return
    
    input_text = message.text.strip()
    user_id = None
    username = None
    
    if input_text.startswith('@'):
        username = input_text[1:]
        print(f"[DEBUG] Processing username: {username}")
        with db_module.get_db() as conn:
            cursor = conn.cursor()
            cursor.execute('SELECT ID FROM users WHERE LOWER(USERNAME) = ?', (username.lower(),))
            user = cursor.fetchone()
            if user:
                user_id = user[0]
                print(f"[DEBUG] Found user ID {user_id} for username {username}")
            else:
                markup = types.InlineKeyboardMarkup()
                markup.add(types.InlineKeyboardButton("üîç –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="send_check"))
                markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_panel"))
                bot.reply_to(message, f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å @username '{username}' –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=markup)
                bot.register_next_step_handler(message, process_user_id_input)
                return
    else:
        try:
            user_id = int(input_text)
            print(f"[DEBUG] Processing user ID: {user_id}")
        except ValueError:
            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton("üîç –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="send_check"))
            markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_panel"))
            bot.reply_to(message, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID –∏–ª–∏ @username.", reply_markup=markup)
            bot.register_next_step_handler(message, process_user_id_input)
            return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    with db_module.get_db() as conn:
        cursor = conn.cursor()
        cursor.execute('SELECT ID, BALANCE, USERNAME FROM users WHERE ID = ?', (user_id,))
        user = cursor.fetchone()
        if not user:
            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton("üîç –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="send_check"))
            markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_panel"))
            bot.reply_to(message, f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=markup)
            bot.register_next_step_handler(message, process_user_id_input)
            return
        user_id, current_balance, username = user
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å—É–º–º—É
    username_display = f"@{username}" if username and username != "–ù–µ —É–∫–∞–∑–∞–Ω" else "–ù–µ—Ç username"
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="Gv"))
    msg = bot.reply_to(
        message,
        f"–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —á–µ–∫–∞ –≤ USDT –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} ({username_display})\n"
        f"–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {current_balance} $:",
        reply_markup=markup
    )
    
    SEND_CHECK_STATE[admin_id] = {
        "step": "awaiting_amount",
        "user_id": user_id,
        "message_id": msg.message_id
    }
    bot.register_next_step_handler(msg, process_amount_input)

def process_amount_input(message):
    admin_id = message.from_user.id
    if admin_id not in SEND_CHECK_STATE or SEND_CHECK_STATE[admin_id]["step"] != "awaiting_amount":
        return
    
    if not message.text:
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_panel"))
        bot.reply_to(message, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤ USDT.", reply_markup=markup)
        bot.register_next_step_handler(message, process_amount_input)
        return
    
    amount_str = message.text.strip()
    if not re.match(r'^\d+(\.\d{1,2})?$', amount_str):
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_panel"))
        bot.reply_to(message, "‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1.5). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:", reply_markup=markup)
        bot.register_next_step_handler(message, process_amount_input)
        return
    
    amount = float(amount_str)
    user_id = SEND_CHECK_STATE[admin_id]["user_id"]
    
    if amount < 0.1:
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_panel"))
        bot.reply_to(message, "‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ —á–µ–∫–∞ ‚Äî 0.1 USDT.", reply_markup=markup)
        bot.register_next_step_handler(message, process_amount_input)
        return
    
    with db_module.get_db() as conn:
        cursor = conn.cursor()
        cursor.execute('SELECT BALANCE FROM treasury WHERE ID = 1')
        treasury_result = cursor.fetchone()
        treasury_balance = treasury_result[0] if treasury_result else 0.0
        
        if amount > treasury_balance:
            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton("üîô –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel"))
            bot.reply_to(message, f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –≤ –∫–∞–∑–Ω–µ. –í –∫–∞–∑–µ–Ω–µ: {treasury_balance} USDT.", reply_markup=markup)
            return
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ CryptoPay
        crypto_api = crypto_pay.CryptoPay()
        try:
            balance_result = crypto_api.get_balance()
            if not balance_result.get("ok", False):
                markup = types.InlineKeyboardMarkup()
                markup.add(types.InlineKeyboardButton("üîô –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel"))
                bot.reply_to(message, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –±–∞–ª–∞–Ω—Å–∞ CryptoPay.", reply_markup=markup)
                return
            
            usdt_balance = next((float(item["available"]) for item in balance_result["result"] if item["currency_code"] == "USDT"), 0.0)
            usdt_onhold = next((float(item["onhold"]) for item in balance_result["result"] if item["currency_code"] == "USDT"), 0.0)
            
            print(f"[INFO] –ë–∞–ª–∞–Ω—Å CryptoPay: –¥–æ—Å—Ç—É–ø–Ω–æ {usdt_balance} USDT, –≤ —Ä–µ–∑–µ—Ä–≤–µ {usdt_onhold} USDT")
            
            if amount > usdt_balance:
                markup = types.InlineKeyboardMarkup()
                markup.add(types.InlineKeyboardButton("üîô –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel"))
                bot.reply_to(message, f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ CryptoPay: –¥–æ—Å—Ç—É–ø–Ω–æ {usdt_balance} USDT, –≤ —Ä–µ–∑–µ—Ä–≤–µ {usdt_onhold} USDT.", reply_markup=markup)
                return
        except Exception as e:
            print(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å CryptoPay: {e}")
            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton("üîô –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel"))
            bot.reply_to(message, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –±–∞–ª–∞–Ω—Å–∞ CryptoPay.", reply_markup=markup)
            return
        
        # –°–æ–∑–¥–∞—ë–º —á–µ–∫
        try:
            cheque_result = crypto_api.create_check(
                amount=str(amount),
                asset="USDT",
                pin_to_user_id=user_id,
                description=f"–ß–µ–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"
            )
            
            if not cheque_result.get("ok", False):
                error = cheque_result.get("error", {}).get("name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
                markup = types.InlineKeyboardMarkup()
                markup.add(types.InlineKeyboardButton("üîô –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel"))
                bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —á–µ–∫–∞: {error}", reply_markup=markup)
                return
            
            cheque = cheque_result.get("result", {})
            cheque_link = cheque.get("bot_check_url", "")
            
            if not cheque_link:
                markup = types.InlineKeyboardMarkup()
                markup.add(types.InlineKeyboardButton("üîô –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel"))
                bot.reply_to(message, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ —á–µ–∫.", reply_markup=markup)
                return
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —á–µ–∫ –≤ –±–∞–∑–µ
            current_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            cursor.execute('''
                INSERT INTO checks (USER_ID, AMOUNT, CHECK_CODE, STATUS, CREATED_AT)
                VALUES (?, ?, ?, ?, ?)
            ''', (user_id, amount, cheque_link, 'pending', current_time))
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –∫–∞–∑–Ω—ã
            treasury_balance -= amount
            cursor.execute('UPDATE treasury SET BALANCE = ? WHERE ID = 1', (treasury_balance,))
            conn.commit()
            db_module.log_treasury_operation("–†—É—á–Ω–æ–π —á–µ–∫", amount, treasury_balance)
            
            # –õ–æ–≥–∏—Ä—É–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é
            log_entry = f"[{current_time}] | –†—É—á–Ω–æ–π —á–µ–∫ | –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} | –°—É–º–º–∞ {amount}$ | –£—Å–ø–µ—Ö"
            with open("withdrawals_log.txt", "a", encoding="utf-8") as log_file:
                log_file.write(log_entry + "\n")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton("üí≥ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —á–µ–∫", url=cheque_link))
            markup.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
            try:
                bot.send_message(
                    user_id,
                    f"‚úÖ –í–∞—à —á–µ–∫ –Ω–∞ —Å—É–º–º—É {amount}$ –≥–æ—Ç–æ–≤!\n"
                    f"–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –µ–≥–æ:",
                    reply_markup=markup,
                    parse_mode='HTML'
                )
            except Exception as e:
                print(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —á–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
                markup = types.InlineKeyboardMarkup()
                markup.add(types.InlineKeyboardButton("üîô –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel"))
                bot.reply_to(message, f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —á–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}", reply_markup=markup)
                return
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton("üîô –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel"))
            bot.reply_to(message, f"‚úÖ –ß–µ–∫ –Ω–∞ {amount}$ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}.", reply_markup=markup)
            
            SEND_CHECK_STATE.pop(admin_id, None)
        
        except Exception as e:
            print(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —á–µ–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton("üîô –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel"))
            bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —á–µ–∫–∞: {e}", reply_markup=markup)
            return


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞
@bot.message_handler(func=lambda message: search_state.get(message.from_user.id, {}).get("awaiting_search", False))
def handle_search_query(message):
    if message.from_user.id not in config.ADMINS_ID:
        bot.reply_to(message, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞!")
        return
    
    query = message.text.strip()
    search_state[message.from_user.id] = {"query": query}
    bot.reply_to(message, f"üîç –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–æ–∏—Å–∫ –ø–æ –∑–∞–ø—Ä–æ—Å—É: '{query}'...")
    
    # –í—ã–∑—ã–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    if search_state[message.from_user.id].get("context") == "send_check":
        process_user_id_input(message)
    # –î–æ–±–∞–≤—å—Ç–µ –¥—Ä—É–≥–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç—ã, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, change_price, reduce_balance)


#–î–û–ë–ê–í–õ–ï–ù–ò–ï –ò–î –ì–†–£–ü–ü–´ –î–õ–Ø –ü–†–ò–ù–Ø–¢–ò–ï –ù–û–ú–ï–†–û–í
@bot.callback_query_handler(func=lambda call: call.data == "add_group")
def add_group(call):
    if call.from_user.id not in config.ADMINS_ID:
        bot.answer_callback_query(call.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è!")
        return
    
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥", callback_data="groups"))
    
    msg = bot.edit_message_text(
        "üìù –í–≤–µ–¥–∏—Ç–µ ID –≥—Ä—É–ø–ø—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, -1002453887941):",
        call.message.chat.id,
        call.message.message_id,
        reply_markup=markup
    )
    
    bot.register_next_step_handler(msg, process_group_id_add)

def process_group_id_add(message):
    try:
        group_id = int(message.text.strip())
        with db.get_db() as conn:
            cursor = conn.cursor()
            cursor.execute('SELECT ID FROM groups WHERE ID = ?', (group_id,))
            if cursor.fetchone():
                bot.reply_to(message, "‚ùå –≠—Ç–∞ –≥—Ä—É–ø–ø–∞ —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è –Ω–æ–º–µ—Ä–æ–≤!")
                return
            cursor.execute('INSERT INTO groups (ID, NAME) VALUES (?, ?)', (group_id, f"{group_id}"))
            conn.commit()
        bot.reply_to(message, f"‚úÖ –ì—Ä—É–ø–ø–∞ —Å ID {group_id} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è –Ω–æ–º–µ—Ä–æ–≤!")
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("üîô –í –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel"))
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)
    except ValueError:
        bot.reply_to(message, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID! –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.")
    except Exception as e:
        bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≥—Ä—É–ø–ø—ã: {e}")

@bot.callback_query_handler(func=lambda call: call.data == "remove_group")
def remove_group(call):
    if call.from_user.id not in config.ADMINS_ID:
        bot.answer_callback_query(call.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è!")
        return
    with db.get_db() as conn:
        cursor = conn.cursor()
        cursor.execute('SELECT ID, NAME FROM groups')
        groups = cursor.fetchall()
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥", callback_data="groups"))
    if not groups:
        bot.edit_message_text(
            "üì≠ –ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.",
            call.message.chat.id,
            call.message.message_id,
            parse_mode='HTML',
            reply_markup=markup
        )
        return
    markup = types.InlineKeyboardMarkup()
    for group_id, group_name in groups:
        markup.add(types.InlineKeyboardButton(f"‚ûñ {group_name} (ID: {group_id})", callback_data=f"confirm_remove_{group_id}"))
    markup.add(types.InlineKeyboardButton("üîô –í –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel"))
    bot.edit_message_text(
        "<b>‚ûñ –í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:</b>",
        call.message.chat.id,
        call.message.message_id,
        parse_mode='HTML',
        reply_markup=markup
    )

@bot.callback_query_handler(func=lambda call: call.data.startswith("confirm_remove_"))
def confirm_remove_group(call):
    if call.from_user.id not in config.ADMINS_ID:
        bot.answer_callback_query(call.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è!")
        return
    group_id = int(call.data.split("_")[2])
    with db.get_db() as conn:
        cursor = conn.cursor()
        cursor.execute('SELECT NAME FROM groups WHERE ID = ?', (group_id,))
        group = cursor.fetchone()
        if not group:
            bot.answer_callback_query(call.id, "‚ùå –ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
            return
        group_name = group[0]
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ", callback_data=f"remove_confirmed_{group_id}"))
        markup.add(types.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="remove_group"))
        bot.edit_message_text(
            f"<b>–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —É–¥–∞–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø—ã:</b>\nüè† {group_name} (ID: {group_id})",
            call.message.chat.id,
            call.message.message_id,
            parse_mode='HTML',
            reply_markup=markup
        )

@bot.callback_query_handler(func=lambda call: call.data.startswith("remove_confirmed_"))
def remove_confirmed_group(call):
    if call.from_user.id not in config.ADMINS_ID:
        bot.answer_callback_query(call.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è!")
        return
    group_id = int(call.data.split("_")[2])
    with db.get_db() as conn:
        cursor = conn.cursor()
        cursor.execute('DELETE FROM groups WHERE ID = ?', (group_id,))
        conn.commit()
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("üîô –í –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel"))
    bot.edit_message_text(
        f"‚úÖ –ì—Ä—É–ø–ø–∞ —Å ID {group_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!",
        call.message.chat.id,
        call.message.message_id,
        parse_mode='HTML',
        reply_markup=markup
    )
    bot.answer_callback_query(call.id, "–ì—Ä—É–ø–ø–∞ —É–¥–∞–ª–µ–Ω–∞!")




#=============================================================================================================

#–ù–û–ú–ï–†–ê –ö–û–¢–û–†–´–ï –ù–ï –û–ë–†–ê–ë–ê–¢–´–í–ê–õ–ò –í –¢–ï–ß–ï–ù–ò–ï 10 –ú–ò–ù–£–¢ +
def check_number_timeout():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∏—Å—Ç–µ–∫–ª–æ –ª–∏ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∫–æ–¥–∞ (10 –º–∏–Ω—É—Ç)."""
    while True:
        try:
            with db.get_db() as conn:
                cursor = conn.cursor()
                cursor.execute('SELECT NUMBER, TAKE_DATE, ID_OWNER, MODERATOR_ID, STATUS FROM numbers')
                numbers = cursor.fetchall()
                
                current_time = datetime.now()
                for number, take_date, owner_id, moderator_id, status in numbers:
                    if take_date in ("0", "1") or status not in ("–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ", "taken"):
                        continue
                    try:
                        take_time = datetime.strptime(take_date, "%Y-%m-%d %H:%M:%S")
                        elapsed_time = (current_time - take_time).total_seconds() / 60
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª –ª–∏ –Ω–æ–º–µ—Ä –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω
                        cursor.execute('SELECT CONFIRMED_BY_MODERATOR_ID FROM numbers WHERE NUMBER = ?', (number,))
                        confirmed_by = cursor.fetchone()[0]
                        if elapsed_time >= 10 and confirmed_by is not None:
                            # –ù–æ–º–µ—Ä –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –≤ –æ—á–µ—Ä–µ–¥—å —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ –±—ã–ª –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω
                            cursor.execute('UPDATE numbers SET MODERATOR_ID = NULL, TAKE_DATE = "0", STATUS = "–æ–∂–∏–¥–∞–µ—Ç" WHERE NUMBER = ?', (number,))
                            conn.commit()
                            logging.info(f"–ù–æ–º–µ—Ä {number} –≤–æ–∑–≤—Ä–∞—â—ë–Ω –≤ –æ—á–µ—Ä–µ–¥—å –∏–∑-–∑–∞ –±–µ–∑–¥–µ–π—Å—Ç–≤–∏—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞.")
                            
                            if owner_id:
                                markup_owner = types.InlineKeyboardMarkup()
                                markup_owner.add(types.InlineKeyboardButton("üì± –°–¥–∞—Ç—å –Ω–æ–º–µ—Ä", callback_data="submit_number"))
                                markup_owner.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
                                safe_send_message(
                                    owner_id,
                                    f"üì± –í–∞—à –Ω–æ–º–µ—Ä {number} –≤–æ–∑–≤—Ä–∞—â—ë–Ω –≤ –æ—á–µ—Ä–µ–¥—å –∏–∑-–∑–∞ –±–µ–∑–¥–µ–π—Å—Ç–≤–∏—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞.",
                                    parse_mode='HTML',
                                    reply_markup=markup_owner
                                )
                            
                            if moderator_id:
                                markup_mod = types.InlineKeyboardMarkup()
                                markup_mod.add(types.InlineKeyboardButton("üì≤ –ü–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä", callback_data="get_number"))
                                markup_mod.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
                                safe_send_message(
                                    moderator_id,
                                    f"üì± –ù–æ–º–µ—Ä {number} –≤–æ–∑–≤—Ä–∞—â—ë–Ω –≤ –æ—á–µ—Ä–µ–¥—å –∏–∑-–∑–∞ –±–µ–∑–¥–µ–π—Å—Ç–≤–∏—è.",
                                    parse_mode='HTML',
                                    reply_markup=markup_mod
                                )
                    except ValueError as e:
                        logging.error(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –Ω–æ–º–µ—Ä–∞ {number}: {e}")
            time.sleep(60)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –≤ check_number_timeout: {e}")
            time.sleep(60)
# –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É



def check_number_hold_time():
    while True:
        try:
            with db.get_db() as conn:
                cursor = conn.cursor()
                cursor.execute('SELECT HOLD_TIME FROM settings')
                result = cursor.fetchone()
                hold_time = result[0] if result else 5

                cursor.execute('''
                    SELECT NUMBER, ID_OWNER, TAKE_DATE, STATUS, CONFIRMED_BY_MODERATOR_ID
                    FROM numbers 
                    WHERE STATUS = '–∞–∫—Ç–∏–≤–µ–Ω' AND TAKE_DATE NOT IN ('0', '1')
                ''')
                numbers = cursor.fetchall()

                current_time = datetime.now()
                for number, owner_id, take_date, status, mod_id in numbers:
                    try:
                        start_time = datetime.strptime(take_date, "%Y-%m-%d %H:%M:%S")
                        time_elapsed = (current_time - start_time).total_seconds() / 60
                        if time_elapsed < hold_time:
                            logging.debug(f"–ù–æ–º–µ—Ä {number} –µ—â—ë –Ω–µ –æ—Ç—Å—Ç–æ—è–ª: {time_elapsed:.2f}/{hold_time} –º–∏–Ω—É—Ç")
                            continue

                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –Ω–æ–º–µ—Ä–∞
                        cursor.execute('SELECT STATUS FROM numbers WHERE NUMBER = ?', (number,))
                        current_status = cursor.fetchone()[0]
                        if current_status != '–∞–∫—Ç–∏–≤–µ–Ω':
                            logging.info(f"–ù–æ–º–µ—Ä {number} –ø—Ä–æ–ø—É—â–µ–Ω: —Å—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–∏–ª—Å—è –Ω–∞ {current_status}")
                            continue

                        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—É—é —Ü–µ–Ω—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                        price = db_module.get_user_price(owner_id)

                        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º SHUTDOWN_DATE –∫–∞–∫ —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
                        shutdown_date = current_time.strftime("%Y-%m-%d %H:%M:%S")
                        cursor.execute('''
                            UPDATE numbers 
                            SET STATUS = '–æ—Ç—Å—Ç–æ—è–ª', 
                                SHUTDOWN_DATE = ? 
                            WHERE NUMBER = ?
                        ''', (shutdown_date, number))
                        # –ù–∞—á–∏—Å–ª—è–µ–º –æ–ø–ª–∞—Ç—É
                        cursor.execute('UPDATE users SET BALANCE = BALANCE + ? WHERE ID = ?', (price, owner_id))
                        conn.commit()
                        logging.info(f"–ù–æ–º–µ—Ä {number} –æ—Ç—Å—Ç–æ—è–ª. SHUTDOWN_DATE: {shutdown_date}, –Ω–∞—á–∏—Å–ª–µ–Ω–æ {price}$ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {owner_id}")

                        # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤–ª–∞–¥–µ–ª—å—Ü–∞
                        markup = types.InlineKeyboardMarkup()
                        markup.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
                        safe_send_message(
                            owner_id,
                        f"üìå <b>–í—Ä–µ–º—è —Ö–æ–ª–¥–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–æ</b>\n"
                        "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
                        f"üìû <b>–ù–æ–º–µ—Ä:</b> <code>{number} —É—Å–ø–µ—à–Ω–æ –æ—Ç—Å—Ç–æ—è–ª</code>\n"
                        f"<b>üü¢–í—Å—Ç–∞–ª:</b> {take_date} \n"
                        f"‚è≥ <b>–û—Ç—Å—Ç–æ—è–ª: </b> {shutdown_date} \n"
                         f"üí∞ –ù–∞—á–∏—Å–ª–µ–Ω–æ: {price}$\n"
                        "‚úÖ <i>–í—ã –º–æ–∂–µ—Ç–µ —Å–¥–∞—Ç—å –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä.</i>\n"
                        "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ",
                        parse_mode='HTML',
                        reply_markup=markup
                        )
                    except ValueError as e:
                        logging.error(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –Ω–æ–º–µ—Ä–∞ {number}: {e}")
                    except Exception as e:
                        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–æ–º–µ—Ä–∞ {number}: {e}")

        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –≤ check_number_hold_time: {e}")
        
        time.sleep(60)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É

# –ú–û–î–ï–†–ê–¶–ò–Ø –ù–û–ú–ï–†–û–í:


#–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø–æ–ª—É—á–µ—è—è–Ω–∏—è –Ω–æ–º–µ—Ä–æ–≤

@bot.callback_query_handler(func=lambda call: call.data == "get_number")
def get_number(call):
    user_id = call.from_user.id
    if not db_module.is_moderator(user_id):
        bot.answer_callback_query(call.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–º–µ—Ä–∞!")
        return
    
    number = db_module.get_available_number(user_id)
    
    if number:
        with db_module.get_db() as conn:
            cursor = conn.cursor()
            cursor.execute('SELECT fa, ID_OWNER FROM numbers WHERE NUMBER = ?', (number,))
            result = cursor.fetchone()
            fa_code, owner_id = result
            cursor.execute('UPDATE numbers SET TAKE_DATE = ?, MODERATOR_ID = ?, GROUP_CHAT_ID = ? WHERE NUMBER = ?',
                          (datetime.now().strftime("%Y-%m-%d %H:%M:%S"), user_id, call.message.chat.id, number))
            conn.commit()
        
        fa_text = f"2FA: {fa_code}" if fa_code else "2FA: –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        markup = types.InlineKeyboardMarkup()
        markup.add(
            types.InlineKeyboardButton("‚úâÔ∏è –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–¥", callback_data=f"send_code_{number}_{call.message.chat.id}"),
            types.InlineKeyboardButton("‚ùå –ù–æ–º–µ—Ä –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π", callback_data=f"invalid_{number}")
        )
        markup.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
        
        bot.edit_message_text(
            f"üì± –ù–æ–≤—ã–π –Ω–æ–º–µ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏: <code>{number}</code>\n"
            f"{fa_text}\n"
            "–û–∂–∏–¥–∞–π—Ç–µ –∫–æ–¥ –æ—Ç –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∏–ª–∏ –æ—Ç–º–µ—Ç—å—Ç–µ –Ω–æ–º–µ—Ä –∫–∞–∫ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π.",
            call.message.chat.id,
            call.message.message_id,
            parse_mode='HTML',
            reply_markup=markup
        )
    else:
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
        bot.edit_message_text(
            "üì≠ –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.",
            call.message.chat.id,
            call.message.message_id,
            parse_mode='HTML',
            reply_markup=markup
        )

# bot.py
def get_number_in_group(user_id, chat_id, message_id, tg_number):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º
    if not db_module.is_moderator(user_id) and user_id not in config.ADMINS_ID:
        bot.send_message(chat_id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–º–µ—Ä–∞!", reply_to_message_id=message_id)
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞ –ª–∏ –≥—Ä—É–ø–ø–∞ –≤ —Ç–∞–±–ª–∏—Ü–µ groups
    group_ids = db_module.get_all_group_ids()
    if chat_id not in group_ids:
        bot.send_message(chat_id, "‚ùå –≠—Ç–∞ –≥—Ä—É–ø–ø–∞ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è –Ω–æ–º–µ—Ä–æ–≤!", reply_to_message_id=message_id)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–π –Ω–æ–º–µ—Ä
    number = db_module.get_available_number(user_id)
    
    if number:
        with db_module.get_db() as conn:
            cursor = conn.cursor()
            cursor.execute('SELECT fa, ID_OWNER FROM numbers WHERE NUMBER = ?', (number,))
            result = cursor.fetchone()
            fa_code, owner_id = result
            cursor.execute('UPDATE numbers SET TAKE_DATE = ?, MODERATOR_ID = ?, GROUP_CHAT_ID = ?, TG_NUMBER = ? WHERE NUMBER = ?',
                          (datetime.now().strftime("%Y-%m-%d %H:%M:%S"), user_id, chat_id, tg_number, number))
            conn.commit()
        
        fa_text = f"2FA: {fa_code}" if fa_code else "2FA: –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        markup = types.InlineKeyboardMarkup()
        markup.add(
            types.InlineKeyboardButton("‚úâÔ∏è –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–¥", callback_data=f"send_code_{number}_{chat_id}_{tg_number}"),
            types.InlineKeyboardButton("‚ùå –ù–æ–º–µ—Ä –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π", callback_data=f"invalid_{number}")
        )
        markup.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
        
        msg = bot.send_message(
            chat_id,
            f"üì± <b>–¢–ì {tg_number}</b>\n"
            f"üì± <b>–ù–æ–≤—ã–π –Ω–æ–º–µ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏:</b> <code>{number}</code>\n"
            f"{fa_text}\n"
            "–û–∂–∏–¥–∞–π—Ç–µ –∫–æ–¥ –æ—Ç –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∏–ª–∏ –æ—Ç–º–µ—Ç—å—Ç–µ –Ω–æ–º–µ—Ä –∫–∞–∫ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π.",
            parse_mode='HTML',
            reply_markup=markup,
            reply_to_message_id=message_id
        )

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ code_messages –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        code_messages[number] = {
            "timestamp": datetime.now(),
            "chat_id": chat_id,
            "message_id": msg.message_id,
            "tg_number": tg_number
        }
    else:
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
        bot.send_message(
            chat_id,
            f"üì≠ –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ (–¢–ì {tg_number}).",
            parse_mode='HTML',
            reply_markup=markup,
            reply_to_message_id=message_id
        )
#–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∫–æ–¥–æ–≤




@bot.callback_query_handler(func=lambda call: call.data.startswith("send_code_"))
def send_verification_code(call):
    user_id = call.from_user.id
    db.update_last_activity(user_id)
    try:
        parts = call.data.split("_")
        if len(parts) < 4:
            bot.answer_callback_query(call.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö!")
            return

        number = parts[2]
        group_chat_id = int(parts[3])
        tg_number = int(parts[4]) if len(parts) > 4 else 1

        with db.get_db() as conn:
            cursor = conn.cursor()
            cursor.execute('SELECT ID_OWNER FROM numbers WHERE NUMBER = ?', (number,))
            owner = cursor.fetchone()

        if owner:
            owner_id = owner[0]

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ AFK_LOCKED
            with db.get_db() as conn:
                cursor = conn.cursor()
                cursor.execute('SELECT AFK_LOCKED FROM users WHERE ID = ?', (owner_id,))
                afk_locked = cursor.fetchone()
            if afk_locked and afk_locked[0] == 1:
                bot.answer_callback_query(call.id, "üîí –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –¥–ª—è —Å–¥–∞—á–∏ –Ω–æ–º–µ—Ä–æ–≤!")
                return

            try:
                # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø–µ
                message_data = code_messages.get(number)
                if message_data:
                    try:
                        markup = types.InlineKeyboardMarkup()
                        markup.add(
                            types.InlineKeyboardButton("‚ùå –ù–æ–º–µ—Ä –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π", callback_data=f"invalid_{number}")
                        )
                        bot.edit_message_text(
                            (
                                "üìå <b>–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –∑–∞–ø—Ä–æ—Å –∫–æ–¥–∞</b>\n"
                                "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
                                f"üì± <b>–¢–ì:</b> {tg_number}\n"
                                f"üìû <b>–ù–æ–º–µ—Ä:</b> <code>{number}</code>\n"
                                "‚úâÔ∏è <i>–ó–∞–ø—Ä–æ—Å –∫–æ–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤–ª–∞–¥–µ–ª—å—Ü—É. –û–∂–∏–¥–∞–µ–º –æ—Ç–≤–µ—Ç...</i>\n"
                                "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
                            ),
                            chat_id=group_chat_id,
                            message_id=message_data["message_id"],
                            reply_markup=markup,
                            parse_mode='HTML'
                        )
                    except Exception as e:
                        print(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –Ω–æ–º–µ—Ä–∞ {number}: {e}")
                        # Fallback: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                        msg = bot.send_message(
                            group_chat_id,
                            (
                                "üìå <b>–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –∑–∞–ø—Ä–æ—Å –∫–æ–¥–∞</b>\n"
                                "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
                                f"üì± <b>–¢–ì:</b> {tg_number}\n"
                                f"üìû <b>–ù–æ–º–µ—Ä:</b> <code>{number}</code>\n"
                                "‚úâÔ∏è <i>–ó–∞–ø—Ä–æ—Å –∫–æ–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤–ª–∞–¥–µ–ª—å—Ü—É. –û–∂–∏–¥–∞–µ–º –æ—Ç–≤–µ—Ç...</i>\n"
                                "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
                            ),
                            reply_markup=markup,
                            parse_mode='HTML'
                        )
                        code_messages[number]["message_id"] = msg.message_id
                else:
                    bot.answer_callback_query(call.id, "‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!")
                    return

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫–æ–¥–∞ –≤–ª–∞–¥–µ–ª—å—Ü—É
                markup = types.InlineKeyboardMarkup()
                markup.add(
                    types.InlineKeyboardButton("‚ùå –ù–æ–º–µ—Ä –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π", callback_data=f"mark_invalid_{number}_{group_chat_id}_{tg_number}")
                )
                msg = bot.send_message(
                    owner_id,
                    (
                        "üìå <b>–ó–∞–ø—Ä–æ—Å –∫–æ–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è</b>\n"
                        "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
                        f"üì± <b>–ù–æ–º–µ—Ä:</b> <code>{number}</code>\n"
                        f"üì® <i>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É.</i>\n\n"
                        "‚úèÔ∏è <b>–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–¥</b>\n"
                        "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
                    ),
                    reply_markup=markup,
                    parse_mode='HTML'
                )

                with db.get_db() as conn:
                    cursor = conn.cursor()
                    cursor.execute('UPDATE numbers SET VERIFICATION_CODE = "", MODERATOR_ID = ?, GROUP_CHAT_ID = ? WHERE NUMBER = ?', 
                                  (call.from_user.id, group_chat_id, number))
                    conn.commit()

                if owner_id not in active_code_requests:
                    active_code_requests[owner_id] = {}
                active_code_requests[owner_id][number] = msg.message_id

                bot.register_next_step_handler(
                    msg,
                    process_verification_code_input,
                    number,
                    call.from_user.id,
                    group_chat_id,
                    msg.chat.id,
                    msg.message_id,
                    tg_number
                )

                bot.answer_callback_query(call.id, "‚úÖ –ó–∞–ø—Ä–æ—Å –∫–æ–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤–ª–∞–¥–µ–ª—å—Ü—É.")

            except telebot.apihelper.ApiTelegramException as e:
                if e.error_code == 403 and "user is deactivated" in e.description:
                    bot.answer_callback_query(call.id, "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω, –Ω–æ–º–µ—Ä –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π!")
                    with db.get_db() as conn:
                        cursor = conn.cursor()
                        cursor.execute('UPDATE numbers SET STATUS = ? WHERE NUMBER = ?', ('–Ω–µ–≤–∞–ª–∏–¥', number))
                        conn.commit()
                        print(f"[DEBUG] –ù–æ–º–µ—Ä {number} –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ –Ω–µ–≤–∞–ª–∏–¥ –∏–∑-–∑–∞ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
                    if owner_id in active_code_requests and number in active_code_requests[owner_id]:
                        del active_code_requests[owner_id][number]
                        if not active_code_requests[owner_id]:
                            del active_code_requests[owner_id]
                else:
                    raise e
        else:
            bot.answer_callback_query(call.id, "‚ùå –í–ª–∞–¥–µ–ª–µ—Ü –Ω–æ–º–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω!")

    except Exception as e:
        print(f"[ERROR] –û—à–∏–±–∫–∞ –≤ send_verification_code: {e}")
        bot.answer_callback_query(call.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!")

@bot.callback_query_handler(func=lambda call: call.data.startswith("mark_invalid_"))
def mark_number_invalid(call):
    user_id = call.from_user.id
    db.update_last_activity(user_id)
    try:
        # –†–∞–∑–±–∏—Ä–∞–µ–º callback_data
        parts = call.data.split("_")
        if len(parts) < 4:
            bot.answer_callback_query(call.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö!")
            return
        number = parts[2]
        group_chat_id = int(parts[3])
        tg_number = int(parts[4])

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –Ω–æ–º–µ—Ä –≤ –±–∞–∑–µ –∏ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º
        with db.get_db() as conn:
            cursor = conn.cursor()
            cursor.execute('SELECT ID_OWNER, MODERATOR_ID FROM numbers WHERE NUMBER = ?', (number,))
            result = cursor.fetchone()
            if not result:
                bot.answer_callback_query(call.id, "‚ùå –ù–æ–º–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω!")
                return
            owner_id, moderator_id = result

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—ã–∑—ã–≤–∞—é—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–º –Ω–æ–º–µ—Ä–∞
            if call.from_user.id != owner_id:
                bot.answer_callback_query(call.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø–æ–º–µ—Ç–∫–∏ —ç—Ç–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –∫–∞–∫ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–≥–æ!")
                return

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–æ–º–µ—Ä–∞ –Ω–∞ "–Ω–µ–≤–∞–ª–∏–¥"
            try:
                cursor.execute('UPDATE numbers SET STATUS = ? WHERE NUMBER = ?', ('–Ω–µ–≤–∞–ª–∏–¥', number))
                conn.commit()
                print(f"[DEBUG] –ù–æ–º–µ—Ä {number} –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ –Ω–µ–≤–∞–ª–∏–¥")
            except Exception as e:
                print(f"[ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –Ω–æ–º–µ—Ä–∞ {number}: {e}")
                raise e

        # –§–æ—Ä–º–∏—Ä—É–µ–º confirmation_key
        confirmation_key = f"{number}_{owner_id}"
        if confirmation_key in confirmation_messages:
            try:
                bot.delete_message(
                    confirmation_messages[confirmation_key]["chat_id"],
                    confirmation_messages[confirmation_key]["message_id"]
                )
            except Exception as e:
                print(f"[ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è {confirmation_key}: {e}")
            del confirmation_messages[confirmation_key]
            print(f"[DEBUG] –£–¥–∞–ª—ë–Ω confirmation_key {confirmation_key} –∏–∑ confirmation_messages")

        # –û—á–∏—â–∞–µ–º active_code_requests –∏ —É–≤–µ–¥–æ–º–ª—è–µ–º –≤–ª–∞–¥–µ–ª—å—Ü–∞, –µ—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –∑–∞–ø—Ä–æ—Å
        if owner_id in active_code_requests and number in active_code_requests[owner_id]:
            message_id = active_code_requests[owner_id][number]
            try:
                bot.edit_message_text(
                    f"‚ùå –ó–∞–ø—Ä–æ—Å –∫–æ–¥–∞ –¥–ª—è –Ω–æ–º–µ—Ä–∞ {number} –æ—Ç–º–µ–Ω—ë–Ω, —Ç–∞–∫ –∫–∞–∫ –Ω–æ–º–µ—Ä –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π.",
                    owner_id,
                    message_id,
                    parse_mode='HTML'
                )
            except telebot.apihelper.ApiTelegramException as e:
                print(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è owner_id {owner_id}, message_id {message_id}: {e}")
            del active_code_requests[owner_id][number]
            print(f"[DEBUG] –£–¥–∞–ª—ë–Ω –Ω–æ–º–µ—Ä {number} –∏–∑ active_code_requests –¥–ª—è owner_id {owner_id}")
            if not active_code_requests[owner_id]:
                del active_code_requests[owner_id]
                print(f"[DEBUG] –£–¥–∞–ª—ë–Ω owner_id {owner_id} –∏–∑ active_code_requests")

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤–ª–∞–¥–µ–ª—å—Ü–∞
        markup_owner = types.InlineKeyboardMarkup()
        markup_owner.add(
            types.InlineKeyboardButton("üì± –°–¥–∞—Ç—å –Ω–æ–º–µ—Ä —Å–Ω–æ–≤–∞", callback_data="submit_number"),
            types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")
        )
        bot.edit_message_text(
            f"‚ùå –í—ã –æ—Ç–º–µ—Ç–∏–ª–∏ –Ω–æ–º–µ—Ä {number} –∫–∞–∫ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π. –ù–æ–º–µ—Ä –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ –Ω–µ–≤–∞–ª–∏–¥.",
            call.message.chat.id,
            call.message.message_id,
            reply_markup=markup_owner,
            parse_mode='HTML'
        )

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ –≤ –≥—Ä—É–ø–ø–µ
        markup_mod = types.InlineKeyboardMarkup()
        markup_mod.add(
            types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")
        )
        try:
            bot.send_message(
                group_chat_id,
                f"üì± <b>–¢–ì {tg_number}</b>\n"
                f"‚ùå –í–ª–∞–¥–µ–ª–µ—Ü –Ω–æ–º–µ—Ä–∞ {number} –æ—Ç–º–µ—Ç–∏–ª –µ–≥–æ –∫–∞–∫ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π. \n –ü—Ä–∏–Ω–æ—Å–∏–º —Å–≤–æ–∏ –∏–∑–≤–∏–Ω–µ–Ω–∏—è, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–∑—å–º–∏—Ç–µ –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä",
                reply_markup=markup_mod,
                parse_mode='HTML'
            )
        except telebot.apihelper.ApiTelegramException as e:
            print(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É {group_chat_id}: {e}")
            if moderator_id:
                try:
                    bot.send_message(
                        moderator_id,
                        f"üì± <b>–¢–ì {tg_number}</b>\n"
                        f"‚ùå –í–ª–∞–¥–µ–ª–µ—Ü –Ω–æ–º–µ—Ä–∞ {number} –æ—Ç–º–µ—Ç–∏–ª –µ–≥–æ –∫–∞–∫ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π. –ù–æ–º–µ—Ä –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ –Ω–µ–≤–∞–ª–∏–¥.\n"
                        f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É (ID: {group_chat_id}).",
                        reply_markup=markup_mod,
                        parse_mode='HTML'
                    )
                except telebot.apihelper.ApiTelegramException as e:
                    print(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É {moderator_id}: {e}")

        bot.answer_callback_query(call.id, "‚úÖ –ù–æ–º–µ—Ä –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π.")
    except Exception as e:
        print(f"[ERROR] –û—à–∏–±–∫–∞ –≤ mark_number_invalid: {e}")
        bot.answer_callback_query(call.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–æ–º–µ—Ä–∞!")

@bot.callback_query_handler(func=lambda call: call.data.startswith("moderator_invalid_"))
def handle_moderator_invalid(call):
    try:
        parts = call.data.split("_")
        if len(parts) < 4:
            bot.answer_callback_query(call.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö!")
            return
        number = parts[2]
        tg_number = int(parts[3])
        owner_id = int(parts[4])

        with db.get_db() as conn:
            cursor = conn.cursor()
            cursor.execute('UPDATE numbers SET STATUS = ? WHERE NUMBER = ?', ('–Ω–µ–≤–∞–ª–∏–¥', number))
            conn.commit()
            print(f"[DEBUG] –ù–æ–º–µ—Ä {number} –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ –Ω–µ–≤–∞–ª–∏–¥ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º")

        markup_owner = types.InlineKeyboardMarkup()
        markup_owner.add(
            types.InlineKeyboardButton("üì± –°–¥–∞—Ç—å –Ω–æ–º–µ—Ä —Å–Ω–æ–≤–∞", callback_data="submit_number"),
            types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")
        )
        try:
            bot.send_message(
                owner_id,
                f"‚ùå –í–∞—à –Ω–æ–º–µ—Ä {number} –±—ã–ª –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º.\nüì± –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–æ–º–µ—Ä –∏ —Å–¥–∞–π—Ç–µ –∑–∞–Ω–æ–≤–æ.",
                reply_markup=markup_owner,
                parse_mode='HTML'
            )
        except Exception as e:
            print(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–ª–∞–¥–µ–ª—å—Ü—É {owner_id}: {e}")

        markup_mod = types.InlineKeyboardMarkup()
        markup_mod.add(
            types.InlineKeyboardButton("üì≤ –ü–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä", callback_data="get_number"),
            types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")
        )
        bot.edit_message_text(
            f"üì± <b>–¢–ì {tg_number}</b>\n"
            f"‚ùå –ù–æ–º–µ—Ä {number} –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º.",
            call.message.chat.id,
            call.message.message_id,
            reply_markup=markup_mod,
            parse_mode='HTML'
        )
        bot.answer_callback_query(call.id, "‚úÖ –ù–æ–º–µ—Ä –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π.")
    except Exception as e:
        print(f"[ERROR] –û—à–∏–±–∫–∞ –≤ handle_moderator_invalid: {e}")
        bot.answer_callback_query(call.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!")
# –°–ª–æ–≤–∞—Ä–∏ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
confirmation_messages = {}
button_contexts = {}
code_messages = {}
active_code_requests = {}


# ==========================
# 1. –í–≤–æ–¥ –∫–æ–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
# ==========================
def process_verification_code_input(message, number, moderator_id, group_chat_id, original_chat_id, original_message_id, tg_number):
    try:
        user_id = message.from_user.id
        db.update_last_activity(user_id)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –Ω–æ–º–µ—Ä–∞
        with db.get_db() as conn:
            cursor = conn.cursor()
            cursor.execute('SELECT ID_OWNER FROM numbers WHERE NUMBER = ?', (number,))
            result = cursor.fetchone()
            if not result:
                try:
                    bot.delete_message(original_chat_id, original_message_id)
                except Exception as e:
                    print(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –Ω–æ–º–µ—Ä–∞ {number}: {e}")
                markup = types.InlineKeyboardMarkup()
                markup.add(
                    types.InlineKeyboardButton("üì± –°–¥–∞—Ç—å –Ω–æ–º–µ—Ä —Å–Ω–æ–≤–∞", callback_data="submit_number"),
                    types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")
                )
                bot.send_message(
                    message.chat.id,
                    (
                        "üìå <b>–ó–∞–ø—Ä–æ—Å –∫–æ–¥–∞ –æ—Ç–º–µ–Ω—ë–Ω</b>\n"
                        "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
                        f"üìû <b>–ù–æ–º–µ—Ä:</b> <code>{number}</code>\n"
                        "‚ùå <i>–ù–æ–º–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–¥–∞–ª—ë–Ω –∏–∑ —Å–∏—Å—Ç–µ–º—ã.</i>\n"
                        "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
                    ),
                    reply_markup=markup,
                    parse_mode='HTML'
                )
                active_code_requests.pop(user_id, {}).pop(number, None)
                return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äî –æ—Ç–≤–µ—Ç –Ω–∞ –Ω—É–∂–Ω—ã–π –∑–∞–ø—Ä–æ—Å
        if not message.reply_to_message or \
           message.reply_to_message.chat.id != original_chat_id or \
           message.reply_to_message.message_id != original_message_id:

            try:
                bot.delete_message(original_chat_id, original_message_id)
            except Exception as e:
                print(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –Ω–æ–º–µ—Ä–∞ {number}: {e}")

            markup = types.InlineKeyboardMarkup()
            invalid_key = str(uuid.uuid4())[:8]
            button_contexts[invalid_key] = {
                "action": "mark_invalid",
                "number": number,
                "group_chat_id": group_chat_id,
                "tg_number": tg_number,
                "user_id": user_id
            }
            markup.add(types.InlineKeyboardButton("‚ùå –ù–µ –≤–∞–ª–∏–¥", callback_data=f"btn_{invalid_key}"))

            msg = bot.send_message(
                message.chat.id,
                (
                    "üìå <b>–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è</b>\n"
                    "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
                    f"üìû <b>–ù–æ–º–µ—Ä:</b> <code>{number}</code>\n"
                    "üóíÔ∏è <i>–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, —É–∫–∞–∑–∞–≤ –∫–æ–¥.</i>\n"
                    "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
                ),
                reply_markup=markup,
                parse_mode="HTML"
            )
            bot.register_next_step_handler(
                msg,
                process_verification_code_input,
                number,
                moderator_id,
                group_chat_id,
                msg.chat.id,
                msg.message_id,
                tg_number
            )
            return

        user_input = message.text.strip()

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –∫–æ–¥–∞
        if not re.match(r'^\d{5}$', user_input):
            markup = types.InlineKeyboardMarkup()
            invalid_key = str(uuid.uuid4())[:8]
            button_contexts[invalid_key] = {
                "action": "mark_invalid",
                "number": number,
                "group_chat_id": group_chat_id,
                "tg_number": tg_number,
                "user_id": user_id
            }
            markup.add(types.InlineKeyboardButton("‚ùå –ù–µ –≤–∞–ª–∏–¥", callback_data=f"btn_{invalid_key}"))

            try:
                bot.edit_message_text(
                    (
                        "üìå <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–¥–∞</b>\n"
                        "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
                        "–ö–æ–¥ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ä–æ–≤–Ω–æ <b>5 —Ü–∏—Ñ—Ä</b>.\n"
                        f"üìû <b>–ù–æ–º–µ—Ä:</b> <code>{number}</code>\n"
                        "üóíÔ∏è <i>–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∫–æ–¥, –æ—Ç–≤–µ—Ç–∏–≤ –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.</i>\n"
                        "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
                    ),
                    chat_id=original_chat_id,
                    message_id=original_message_id,
                    reply_markup=markup,
                    parse_mode="HTML"
                )
            except Exception as e:
                print(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –Ω–æ–º–µ—Ä–∞ {number}: {e}")
                msg = bot.send_message(
                    message.chat.id,
                    (
                        "üìå <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–¥–∞</b>\n"
                        "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
                        "–ö–æ–¥ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ä–æ–≤–Ω–æ <b>5 —Ü–∏—Ñ—Ä</b>.\n"
                        f"üìû <b>–ù–æ–º–µ—Ä:</b> <code>{number}</code>\n"
                        "üóíÔ∏è <i>–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∫–æ–¥, –æ—Ç–≤–µ—Ç–∏–≤ –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.</i>\n"
                        "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
                    ),
                    reply_markup=markup,
                    parse_mode="HTML"
                )
                original_message_id = msg.message_id

            bot.register_next_step_handler(
                msg,
                process_verification_code_input,
                number,
                moderator_id,
                group_chat_id,
                original_chat_id,
                original_message_id,
                tg_number
            )
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–¥ –≤ –±–∞–∑—É
        with db.get_db() as conn:
            cursor = conn.cursor()
            current_date = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            cursor.execute(
                '''
                UPDATE numbers 
                SET VERIFICATION_CODE = ?, TAKE_DATE = ?, STATUS = '–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ' 
                WHERE NUMBER = ?
                ''',
                (user_input, current_date, number)
            )
            conn.commit()

        # –ö–Ω–æ–ø–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        markup = types.InlineKeyboardMarkup()
        confirm_key = str(uuid.uuid4())[:8]
        change_key = str(uuid.uuid4())[:8]
        invalid_key = str(uuid.uuid4())[:8]

        button_contexts[confirm_key] = {
            "action": "confirm_code",
            "number": number,
            "user_input": user_input,
            "group_chat_id": group_chat_id,
            "tg_number": tg_number,
            "user_id": user_id
        }
        button_contexts[change_key] = {
            "action": "change_code",
            "number": number,
            "group_chat_id": group_chat_id,
            "tg_number": tg_number,
            "user_id": user_id
        }
        button_contexts[invalid_key] = {
            "action": "mark_invalid_confirmation",
            "number": number,
            "group_chat_id": group_chat_id,
            "tg_number": tg_number,
            "user_id": user_id
        }

        markup.add(
            types.InlineKeyboardButton("‚úÖ –î–∞, –∫–æ–¥ –≤–µ—Ä–Ω—ã–π", callback_data=f"btn_{confirm_key}"),
            types.InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å", callback_data=f"btn_{change_key}")
        )
        markup.add(types.InlineKeyboardButton("‚ùå –ù–µ –≤–∞–ª–∏–¥", callback_data=f"btn_{invalid_key}"))

        # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        try:
            bot.edit_message_text(
                (
                    "üìå <b>–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞</b>\n"
                    "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
                    f"üìû <b>–ù–æ–º–µ—Ä:</b> <code>{number}</code>\n"
                    f"üîê <b>–í–≤–µ–¥—ë–Ω–Ω—ã–π –∫–æ–¥:</b> <code>{user_input}</code>\n"
                    "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
                    "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –∫–æ–¥–∞ ‚¨áÔ∏è"
                ),
                chat_id=original_chat_id,
                message_id=original_message_id,
                reply_markup=markup,
                parse_mode='HTML'
            )
        except Exception as e:
            print(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –Ω–æ–º–µ—Ä–∞ {number}: {e}")
            # Fallback: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å
            confirmation_msg = bot.send_message(
                message.chat.id,
                (
                    "üìå <b>–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞</b>\n"
                    "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
                    f"üìû <b>–ù–æ–º–µ—Ä:</b> <code>{number}</code>\n"
                    f"üîê <b>–í–≤–µ–¥—ë–Ω–Ω—ã–π –∫–æ–¥:</b> <code>{user_input}</code>\n"
                    "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
                    "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –∫–æ–¥–∞ ‚¨áÔ∏è"
                ),
                reply_markup=markup,
                parse_mode='HTML'
            )
            original_message_id = confirmation_msg.message_id

        # –û–±–Ω–æ–≤–ª—è–µ–º confirmation_messages
        confirmation_messages[f"{number}_{user_id}"] = {
            "chat_id": original_chat_id,
            "message_id": original_message_id
        }

        # –ß–∏—Å—Ç–∏–º –∑–∞–ø—Ä–æ—Å—ã
        active_code_requests.pop(user_id, {}).pop(number, None)

    except Exception as e:
        print(f"[ERROR] –û—à–∏–±–∫–∞ –≤ process_verification_code_input: {e}")
        bot.send_message(
            message.chat.id,
            "‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.</b>",
            parse_mode='HTML'
        )

@bot.callback_query_handler(func=lambda call: call.data.startswith("confirm_code_"))
def confirm_code(call):
    try:    
        parts = call.data.split("_")
        if len(parts) < 6:
            bot.answer_callback_query(call.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö!")
            return
        
        number = parts[2]
        code = parts[3]
        group_chat_id = int(parts[4])
        tg_number = int(parts[5])
        
        with db_module.get_db() as conn:
            cursor = conn.cursor()
            cursor.execute('''
                SELECT MODERATOR_ID, GROUP_CHAT_ID, ID_OWNER, fa, 
                       (SELECT IS_AFK FROM users WHERE ID = numbers.ID_OWNER) AS is_afk
                FROM numbers 
                WHERE NUMBER = ?
            ''', (number,))
            result = cursor.fetchone()
            if not result:
                bot.answer_callback_query(call.id, "‚ùå –ù–æ–º–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω!")
                return
            moderator_id, stored_chat_id, owner_id, fa_code, is_afk = result
        
            if is_afk:
                bot.answer_callback_query(call.id, "‚ùå –ù–æ–º–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: –≤–ª–∞–¥–µ–ª–µ—Ü –≤ —Ä–µ–∂–∏–º–µ –ê–§–ö!")
                confirmation_messages.pop(f"{number}_{owner_id}", None)
                code_messages.pop(number, None)
                return
        
        if stored_chat_id != group_chat_id:
            cursor.execute('UPDATE numbers SET GROUP_CHAT_ID = ? WHERE NUMBER = ?', (group_chat_id, number))
            conn.commit()

        confirmation_key = f"{number}_{owner_id}"
        if confirmation_key not in confirmation_messages:
            bot.answer_callback_query(call.id, "‚ùå –î–∞–Ω–Ω—ã–µ –æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
            return
        confirmation_data = confirmation_messages[confirmation_key]
        confirmation_chat_id = confirmation_data["chat_id"]
        confirmation_message_id = confirmation_data["message_id"]

        try:    
            bot.edit_message_text(
                f"üìå <b>–ö–æ–¥ –ø—Ä–∏–Ω—è—Ç</b>\n"
                "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
                f"üìû <b>–ù–æ–º–µ—Ä:</b> <code>{number}</code>\n"
                f"üîê <b>–ö–æ–¥:</b> <code>{code}</code>\n"
                "‚úÖ <i>–ö–æ–¥ —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–¥–∞–Ω –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É</i>\n"
                "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ",
                confirmation_chat_id,
                confirmation_message_id,
                parse_mode='HTML'
            )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            bot.answer_callback_query(call.id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ!")
            return
        
        del confirmation_messages[confirmation_key]
        bot.answer_callback_query(call.id)
        
        if moderator_id:
            markup = types.InlineKeyboardMarkup()
            markup.add(
                types.InlineKeyboardButton("‚úÖ –î–∞, –≤—Å—Ç–∞–ª", callback_data=f"number_active_{number}_{tg_number}"),
                types.InlineKeyboardButton("‚ùå –ù–µ—Ç, –∏–∑–º–µ–Ω–∏—Ç—å", callback_data=f"number_invalid_{number}_{tg_number}")
            )
            fa_text = f"üîë <b>2FA:</b> <code>{fa_code}</code>" if fa_code else "üîë <b>2FA:</b> <i>–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω</i>"
            try:
                message = bot.send_message(
                    group_chat_id,
                    f"üìå <b>–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–º–µ—Ä–∞</b>\n"
                    "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
                    f"üì± <b>–¢–ì:</b> <code>{tg_number}</code>\n"
                    f"üìû <b>–ù–æ–º–µ—Ä:</b> <code>{number}</code>\n"
                    f"üîê <b>–ö–æ–¥:</b> <code>{code}</code>\n"
                    f"{fa_text}\n"
                    "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
                    "‚ùì <i>–í—Å—Ç–∞–ª –ª–∏ –Ω–æ–º–µ—Ä?</i>",
                    reply_markup=markup,
                    parse_mode='HTML'
                )
                code_messages[number] = {
                    "chat_id": group_chat_id,
                    "message_id": message.message_id,
                    "timestamp": datetime.now(),
                    "tg_number": tg_number,
                    "owner_id": owner_id
                }
            except telebot.apihelper.ApiTelegramException as e:
                print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É {group_chat_id}: {e}")
                try:
                    message = bot.send_message(
                        moderator_id,
                        f"üìå <b>–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–º–µ—Ä–∞</b>\n"
                        "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
                        f"üì± <b>–¢–ì:</b> <code>{tg_number}</code>\n"
                        f"üìû <b>–ù–æ–º–µ—Ä:</b> <code>{number}</code>\n"
                        f"üîê <b>–ö–æ–¥:</b> <code>{code}</code>\n"
                        f"{fa_text}\n"
                        "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
                        "‚ùì <i>–í—Å—Ç–∞–ª –ª–∏ –Ω–æ–º–µ—Ä?</i>\n"
                        f"‚ö†Ô∏è <i>–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –≥—Ä—É–ø–ø—É (ID: {group_chat_id})</i>",
                        reply_markup=markup,
                        parse_mode='HTML'
                    )
                    code_messages[number] = {
                        "chat_id": moderator_id,
                        "message_id": message.message_id,
                        "timestamp": datetime.now(),
                        "tg_number": tg_number,
                        "owner_id": owner_id
                    }
                except telebot.apihelper.ApiTelegramException as e:
                    print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É {moderator_id}: {e}")
                    for admin_id in config.ADMINS_ID:
                        try:
                            bot.send_message(
                                admin_id,
                                f"‚ö†Ô∏è <b>–û—à–∏–±–∫–∞:</b> –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–¥ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É <code>{moderator_id}</code> –¥–ª—è –Ω–æ–º–µ—Ä–∞ <code>{number}</code>\n"
                                f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø–µ <code>{group_chat_id}</code>.",
                                parse_mode='HTML'
                            )
                        except:
                            continue
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ confirm_code: {e}")
        bot.answer_callback_query(call.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –∫–æ–¥–∞!")



@bot.callback_query_handler(func=lambda call: call.data.startswith("btn_"))
def handle_button_context(call):
    try:
        key = call.data.replace("btn_", "")
        context = button_contexts.get(key)
        if not context:
            bot.answer_callback_query(call.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏!")
            return

        action = context["action"]
        number = context["number"]
        group_chat_id = context["group_chat_id"]
        tg_number = context["tg_number"]
        user_id = context["user_id"]

        if action == "confirm_code":
            user_input = context["user_input"]
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø–µ –∏–∑ code_messages
            message_data = code_messages.get(number)
            if not message_data:
                bot.answer_callback_query(call.id, "‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!")
                return

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ fa
            with db.get_db() as conn:
                cursor = conn.cursor()
                cursor.execute('SELECT fa FROM numbers WHERE NUMBER = ?', (number,))
                fa_result = cursor.fetchone()
                two_fa_status = "–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω" if not fa_result or not fa_result[0] else "—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"

            # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø–µ
            try:
                markup = types.InlineKeyboardMarkup()
                markup.add(
                    types.InlineKeyboardButton("‚úÖ –î–∞, –≤—Å—Ç–∞–ª", callback_data=f"number_active_{number}_{tg_number}"),
                    types.InlineKeyboardButton("‚ùå –ù–µ—Ç, –∏–∑–º–µ–Ω–∏—Ç—å", callback_data=f"number_invalid_{number}_{tg_number}")
                )
                bot.edit_message_text(
                    (
                        "üìå <b>–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–º–µ—Ä–∞</b>\n"
                        "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
                        f"üì± <b>–¢–ì:</b> {tg_number}\n"
                        f"üìû <b>–ù–æ–º–µ—Ä:</b> <code>{number}</code>\n"
                        f"üîê <b>–ö–æ–¥:</b> <code>{user_input}</code>\n"
                        f"üîë 2FA: {two_fa_status}\n"
                        "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
                        "‚ùì –í—Å—Ç–∞–ª –ª–∏ –Ω–æ–º–µ—Ä?"
                    ),
                    chat_id=group_chat_id,
                    message_id=message_data["message_id"],
                    reply_markup=markup,
                    parse_mode='HTML'
                )
            except Exception as e:
                print(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø–µ –¥–ª—è –Ω–æ–º–µ—Ä–∞ {number}: {e}")
                # Fallback: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                msg = bot.send_message(
                    group_chat_id,
                    (
                        "üìå <b>–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–º–µ—Ä–∞</b>\n"
                        "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
                        f"üì± <b>–¢–ì:</b> {tg_number}\n"
                        f"üìû <b>–ù–æ–º–µ—Ä:</b> <code>{number}</code>\n"
                        f"üîê <b>–ö–æ–¥:</b> <code>{user_input}</code>\n"
                        f"üîë 2FA: {two_fa_status}\n"
                        "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
                        "‚ùì –í—Å—Ç–∞–ª –ª–∏ –Ω–æ–º–µ—Ä?"
                    ),
                    reply_markup=markup,
                    parse_mode='HTML'
                )
                code_messages[number]["message_id"] = msg.message_id

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            try:
                bot.edit_message_text(
                    (
                        "üìå <b>–ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É</b>\n"
                        "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
                        f"üìû <b>–ù–æ–º–µ—Ä:</b> <code>{number}</code>\n"
                        f"üîê <b>–í–≤–µ–¥—ë–Ω–Ω—ã–π –∫–æ–¥:</b> <code>{user_input}</code>\n"
                        "‚è≥ <i>–û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞.</i>\n"
                        "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
                    ),
                    chat_id=call.message.chat.id,
                    message_id=call.message.message_id,
                    parse_mode="HTML"
                )
            except Exception as e:
                print(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –Ω–æ–º–µ—Ä–∞ {number}: {e}")

            bot.answer_callback_query(call.id, "‚úÖ –ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É.")

        elif action == "change_code":
            with db.get_db() as conn:
                cursor = conn.cursor()
                cursor.execute('SELECT MODERATOR_ID FROM numbers WHERE NUMBER = ?', (number,))
                result = cursor.fetchone()
                if not result:
                    bot.answer_callback_query(call.id, "‚ùå –ù–æ–º–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω!")
                    return
                moderator_id = result[0] if result else call.from_user.id

            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ confirmation_messages
            message_data = confirmation_messages.get(f"{number}_{user_id}")
            if not message_data:
                bot.answer_callback_query(call.id, "‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!")
                return

            chat_id = message_data["chat_id"]
            message_id = message_data["message_id"]

            # –°–æ–∑–¥–∞—ë–º –∫–Ω–æ–ø–∫—É "–ù–µ –≤–∞–ª–∏–¥"
            markup = types.InlineKeyboardMarkup()
            invalid_key = str(uuid.uuid4())[:8]
            button_contexts[invalid_key] = {
                "action": "mark_invalid_confirmation",
                "number": number,
                "group_chat_id": group_chat_id,
                "tg_number": tg_number,
                "user_id": user_id
            }
            markup.add(types.InlineKeyboardButton("‚ùå –ù–µ –≤–∞–ª–∏–¥", callback_data=f"btn_{invalid_key}"))

            # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            try:
                bot.edit_message_text(
                    (
                        "üìå <b>–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è</b>\n"
                        "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
                        f"üìû <b>–ù–æ–º–µ—Ä:</b> <code>{number}</code>\n"
                        "üóíÔ∏è <i>–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π –∫–æ–¥, –æ—Ç–≤–µ—Ç–∏–≤ –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.</i>\n"
                        "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
                    ),
                    chat_id=chat_id,
                    message_id=message_id,
                    reply_markup=markup,
                    parse_mode="HTML"
                )
            except Exception as e:
                print(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –Ω–æ–º–µ—Ä–∞ {number}: {e}")
                # Fallback: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                msg = bot.send_message(
                    chat_id,
                    (
                        "üìå <b>–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è</b>\n"
                        "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
                        f"üìû <b>–ù–æ–º–µ—Ä:</b> <code>{number}</code>\n"
                        "üóíÔ∏è <i>–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π –∫–æ–¥, –æ—Ç–≤–µ—Ç–∏–≤ –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.</i>\n"
                        "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
                    ),
                    reply_markup=markup,
                    parse_mode="HTML"
                )
                confirmation_messages[f"{number}_{user_id}"] = {
                    "chat_id": msg.chat.id,
                    "message_id": msg.message_id
                }
                message_id = msg.message_id

            # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–æ–≤–æ–≥–æ –∫–æ–¥–∞
            bot.register_next_step_handler_by_chat_id(
                chat_id,
                process_verification_code_input,
                number,
                moderator_id,
                group_chat_id,
                chat_id,
                message_id,
                tg_number
            )

            bot.answer_callback_query(call.id, "‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∫–æ–¥.")

        elif action == "mark_invalid_confirmation":
            with db.get_db() as conn:
                cursor = conn.cursor()
                cursor.execute('UPDATE numbers SET STATUS = ? WHERE NUMBER = ?', ('–Ω–µ–≤–∞–ª–∏–¥', number))
                conn.commit()

            bot.edit_message_text(
                (
                    "üìå <b>–ù–æ–º–µ—Ä –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π</b>\n"
                    "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
                    f"üìû <b>–ù–æ–º–µ—Ä:</b> <code>{number}</code>\n"
                    "‚ùå <i>–ù–æ–º–µ—Ä –æ—Ç–∫–ª–æ–Ω—ë–Ω.</i>\n"
                    "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
                ),
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                parse_mode="HTML"
            )
            bot.answer_callback_query(call.id, "‚ùå –ù–æ–º–µ—Ä –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π.")

            # –£–≤–µ–¥–æ–º–ª—è–µ–º –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
            bot.send_message(
                group_chat_id,
                f"üì± <b>–¢–ì {tg_number}</b>\n"
                f"üìû –ù–æ–º–µ—Ä <code>{number}</code> –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π.",
                parse_mode="HTML"
            )

            # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            confirmation_messages.pop(f"{number}_{user_id}", None)
            code_messages.pop(number, None)
            button_contexts.pop(key, None)

    except Exception as e:
        print(f"[ERROR] –û—à–∏–±–∫–∞ –≤ handle_button_context: {e}")
        bot.answer_callback_query(call.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!")

@bot.callback_query_handler(func=lambda call: call.data.startswith("change_code_"))
def change_code(call):
    try:
        parts = call.data.split("_")
        if len(parts) < 4:
            bot.answer_callback_query(call.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö!")
            return
        
        number = parts[2]
        group_chat_id = int(parts[3])
        tg_number = int(parts[4])
        
        with db.get_db() as conn:
            cursor = conn.cursor()
            cursor.execute('SELECT MODERATOR_ID FROM numbers WHERE NUMBER = ?', (number,))
            result = cursor.fetchone()
            if not result:
                bot.answer_callback_query(call.id, "‚ùå –ù–æ–º–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω!")
                return
            moderator_id = result[0] if result else call.from_user.id

        try:
            bot.delete_message(call.message.chat.id, call.message.message_id)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

        markup = types.ReplyKeyboardRemove()
        msg = bot.send_message(
            call.from_user.id,
            (
                "üìå <b>–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è</b>\n"
                "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
                f"üìû <b>–ù–æ–º–µ—Ä:</b> <code>{number}</code>\n"
                "üóíÔ∏è <i>–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π –∫–æ–¥, –æ—Ç–≤–µ—Ç–∏–≤ –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.</i>\n"
                "üîê <i>–ö–æ–¥ –±—É–¥–µ—Ç –ø–µ—Ä–µ–¥–∞–Ω –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.</i>\n"
                "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
            ),
            reply_markup=markup,
            parse_mode="HTML"
        )
        
        bot.register_next_step_handler(
            msg,
            process_verification_code_input,
            number,
            moderator_id,
            group_chat_id,
            msg.chat.id,
            msg.message_id,
            tg_number
        )
    
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ change_code: {e}")
        bot.answer_callback_query(call.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∫–æ–¥–∞!")


def create_back_to_main_markup():
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
    return markup

#–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è/–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –Ω–æ–º–µ—Ä–æ–≤



@bot.callback_query_handler(func=lambda call: call.data.startswith("moderator_reject_"))
def handle_number_rejection(call):
    try:
        number = call.data.split("_")[2]
        with db.get_db() as conn:
            cursor = conn.cursor()
            cursor.execute('SELECT ID_OWNER FROM numbers WHERE NUMBER = ?', (number,))
            owner = cursor.fetchone()
            cursor.execute('UPDATE numbers SET STATUS = ? WHERE NUMBER = ?', ('–Ω–µ–≤–∞–ª–∏–¥', number))
            conn.commit()
            print(f"[DEBUG] –ù–æ–º–µ—Ä {number} –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ –Ω–µ–≤–∞–ª–∏–¥")

            if owner:
                markup_owner = types.InlineKeyboardMarkup()
                markup_owner.add(
                    types.InlineKeyboardButton("üì± –°–¥–∞—Ç—å –Ω–æ–º–µ—Ä —Å–Ω–æ–≤–∞", callback_data="submit_number"),
                    types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")
                )
                try:
                    bot.send_message(
                        owner[0],
                        f"‚ùå –í–∞—à –Ω–æ–º–µ—Ä {number} –±—ã–ª –æ—Ç–∫–ª–æ–Ω—ë–Ω –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º.\nüì± –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–æ–º–µ—Ä –∏ —Å–¥–∞–π—Ç–µ –∑–∞–Ω–æ–≤–æ.",
                        reply_markup=markup_owner,
                        parse_mode='HTML'
                    )
                    print(f"[DEBUG] –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–ª–∞–¥–µ–ª—å—Ü—É {owner[0]}")
                except telebot.apihelper.ApiTelegramException as e:
                    print(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–ª–∞–¥–µ–ª—å—Ü—É {owner[0]}: {e}")

        markup_mod = types.InlineKeyboardMarkup()
        markup_mod.add(
            types.InlineKeyboardButton("üì≤ –ü–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä", callback_data="get_number"),
            types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")
        )
        bot.send_message(
            call.message.chat.id,
            f"üì± –ù–æ–º–µ—Ä {number} –æ—Ç–∫–ª–æ–Ω—ë–Ω –∏ –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π.",
            reply_markup=markup_mod,
            parse_mode='HTML'
        )
        bot.answer_callback_query(call.id, "‚úÖ –ù–æ–º–µ—Ä –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π.")
    except Exception as e:
        print(f"[ERROR] –û—à–∏–±–∫–∞ –≤ handle_number_rejection: {e}")
        bot.answer_callback_query(call.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!")

@bot.callback_query_handler(func=lambda call: call.data.startswith("moderator_invalid_"))
def handle_moderator_invalid(call):
    try:
        parts = call.data.split("_")
        if len(parts) < 4:
            bot.answer_callback_query(call.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö!")
            return
        number = parts[2]
        tg_number = int(parts[3])
        owner_id = int(parts[4])

        with db.get_db() as conn:
            cursor = conn.cursor()
            cursor.execute('UPDATE numbers SET STATUS = ? WHERE NUMBER = ?', ('–Ω–µ–≤–∞–ª–∏–¥', number))
            conn.commit()
            print(f"[DEBUG] –ù–æ–º–µ—Ä {number} –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ –Ω–µ–≤–∞–ª–∏–¥ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º")

        markup_owner = types.InlineKeyboardMarkup()
        markup_owner.add(
            types.InlineKeyboardButton("üì± –°–¥–∞—Ç—å –Ω–æ–º–µ—Ä —Å–Ω–æ–≤–∞", callback_data="submit_number"),
            types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")
        )
        try:
            bot.send_message(
                owner_id,
                f"‚ùå –í–∞—à –Ω–æ–º–µ—Ä {number} –±—ã–ª –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º.\nüì± –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–æ–º–µ—Ä –∏ —Å–¥–∞–π—Ç–µ –∑–∞–Ω–æ–≤–æ.",
                reply_markup=markup_owner,
                parse_mode='HTML'
            )
            print(f"[DEBUG] –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–ª–∞–¥–µ–ª—å—Ü—É {owner_id}")
        except telebot.apihelper.ApiTelegramException as e:
            print(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–ª–∞–¥–µ–ª—å—Ü—É {owner_id}: {e}")

        markup_mod = types.InlineKeyboardMarkup()
        markup_mod.add(
            types.InlineKeyboardButton("üì≤ –ü–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä", callback_data="get_number"),
            types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")
        )
        bot.send_message(
            call.message.chat.id,
            f"üì± <b>–¢–ì {tg_number}</b>\n"
            f"‚ùå –ù–æ–º–µ—Ä {number} –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º.",
            reply_markup=markup_mod,
            parse_mode='HTML'
        )
        bot.answer_callback_query(call.id, "‚úÖ –ù–æ–º–µ—Ä –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π.")
    except Exception as e:
        print(f"[ERROR] –û—à–∏–±–∫–∞ –≤ handle_moderator_invalid: {e}")
        bot.answer_callback_query(call.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!")

@bot.callback_query_handler(func=lambda call: call.data.startswith("number_active_"))
def number_active(call):
    try:
        parts = call.data.split("_")
        if len(parts) < 4:
            bot.answer_callback_query(call.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö!")
            return

        number = parts[2]
        tg_number = int(parts[3])

        with db.get_db() as conn:
            cursor = conn.cursor()
            cursor.execute('SELECT ID_OWNER, VERIFICATION_CODE, fa FROM numbers WHERE NUMBER = ?', (number,))
            result = cursor.fetchone()
            if not result:
                bot.answer_callback_query(call.id, "‚ùå –ù–æ–º–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω!")
                return

            owner_id, verification_code, fa = result
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å '–∞–∫—Ç–∏–≤–µ–Ω', ID –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ –∏ –≤—Ä–µ–º—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            current_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            cursor.execute(
                '''
                UPDATE numbers 
                SET STATUS = ?, 
                    CONFIRMED_BY_MODERATOR_ID = ?, 
                    TAKE_DATE = ? 
                WHERE NUMBER = ?
                ''',
                ('–∞–∫—Ç–∏–≤–µ–Ω', call.from_user.id, current_time, number)
            )
            conn.commit()
            print(f"[DEBUG] –ù–æ–º–µ—Ä {number} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º {call.from_user.id}, —Å—Ç–∞—Ç—É—Å: –∞–∫—Ç–∏–≤–µ–Ω, TAKE_DATE: {current_time}")

        if owner_id:
            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
            try:
                owner_text = (
                    "‚úÖ <b>–í–∞—à –Ω–æ–º–µ—Ä —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω!</b>\n"
                    "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
                    f"üì± <b>–ù–æ–º–µ—Ä:</b> <code>{number}</code>\n"
                    f"üî¢ <b>–ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è:</b> <code>{verification_code}</code>\n"
                    f"üîí <b>2FA:</b> <code>{fa}</code>\n"
                    f"üü¢ <b>–í—Å—Ç–∞–ª:</b> {current_time}\n"
                    "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
                    "üéâ <i>–¢–µ–ø–µ—Ä—å –æ–Ω –∞–∫—Ç–∏–≤–µ–Ω </i>"
                )
                bot.send_message(
                    owner_id,
                    owner_text,
                    reply_markup=markup,
                    parse_mode='HTML'
                )
                print(f"[DEBUG] –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤–ª–∞–¥–µ–ª—å—Ü—É {owner_id} –æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –Ω–æ–º–µ—Ä–∞ {number}")
            except Exception as e:
                print(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤–ª–∞–¥–µ–ª—å—Ü—É {owner_id}: {e}")

        # –°–æ–æ–±—â–µ–Ω–∏–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É
        moderator_text = (
            f"üìå <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞</b>\n"
            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
            f"üì± <b>–¢–ì:</b> {tg_number}\n"
            f"‚úÖ <b>–ù–æ–º–µ—Ä:</b> <code>{number}</code>\n"
            f"üî¢ <b>–ö–æ–¥:</b> <code>{verification_code}</code>\n"
            f"üîí <b>2FA:</b> <code>{fa}</code>\n"
            f"üïí <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω:</b> {current_time}\n"
            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
            "‚úÖ <i>–°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª—ë–Ω –Ω–∞ ¬´–∞–∫—Ç–∏–≤–µ–Ω¬ª</i>"
        )

        bot.edit_message_text(
            moderator_text,
            call.message.chat.id,
            call.message.message_id,
            parse_mode='HTML'
        )
        bot.answer_callback_query(call.id, "‚úÖ –ù–æ–º–µ—Ä —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω!")


    except Exception as e:
        print(f"[ERROR] –û—à–∏–±–∫–∞ –≤ number_active: {e}")
        bot.answer_callback_query(call.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –Ω–æ–º–µ—Ä–∞!")


@bot.callback_query_handler(func=lambda call: call.data.startswith("invalid_"))
def handle_invalid_number(call):
    number = call.data.split("_")[1]
    with db.get_db() as conn:
        cursor = conn.cursor()
        cursor.execute('SELECT ID_OWNER FROM numbers WHERE NUMBER = ?', (number,))
        owner = cursor.fetchone()
        cursor.execute('UPDATE numbers SET STATUS = ? WHERE NUMBER = ?', ('–Ω–µ–≤–∞–ª–∏–¥', number))
        conn.commit()

        if owner:
            markup_owner = types.InlineKeyboardMarkup()
            markup_owner.add(types.InlineKeyboardButton("üì± –°–¥–∞—Ç—å –Ω–æ–º–µ—Ä", callback_data="submit_number"))
            markup_owner.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
            try:
                bot.send_message(owner[0], 
                               f"‚ùå –í–∞—à –Ω–æ–º–µ—Ä {number} –±—ã–ª –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º.\nüì± –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–æ–º–µ—Ä –∏ —Å–¥–∞–π—Ç–µ –∑–∞–Ω–æ–≤–æ.", 
                               reply_markup=markup_owner,
                               parse_mode='HTML')
            except telebot.apihelper.ApiTelegramException as e:
                print(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–ª–∞–¥–µ–ª—å—Ü—É {owner[0]}: {e}")

    bot.edit_message_text(f"‚úÖ –ù–æ–º–µ—Ä {number} –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ –Ω–µ–≤–∞–ª–∏–¥", 
                         call.message.chat.id, 
                         call.message.message_id,
                         parse_mode='HTML')

@bot.callback_query_handler(func=lambda call: call.data.startswith("number_failed_"))
def handle_number_failed(call):
    number = call.data.split("_")[2]
    try:
        with db.get_db() as conn:
            cursor = conn.cursor()
            cursor.execute('SELECT TAKE_DATE, ID_OWNER, CONFIRMED_BY_MODERATOR_ID, STATUS FROM numbers WHERE NUMBER = ?', (number,))
            data = cursor.fetchone()
            if not data:
                bot.answer_callback_query(call.id, "‚ùå –ù–æ–º–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω!")
                return
            
            take_date, owner_id, confirmed_by_moderator_id, status = data
            
            if status == "–æ—Ç—Å—Ç–æ—è–ª":
                bot.answer_callback_query(call.id, "‚úÖ –ù–æ–º–µ—Ä —É–∂–µ –æ—Ç—Å—Ç–æ—è–ª —Å–≤–æ—ë –≤—Ä–µ–º—è!")
                return

            cursor.execute('SELECT HOLD_TIME FROM settings')
            result = cursor.fetchone()
            hold_time = result[0] if result else 5
            
            end_time = datetime.now()
            if take_date in ("0", "1"):
                work_time = 0
                worked_enough = False
            else:
                start_time = datetime.strptime(take_date, "%Y-%m-%d %H:%M:%S")
                work_time = (end_time - start_time).total_seconds() / 60
                worked_enough = work_time >= hold_time
            
            shutdown_date = end_time.strftime("%Y-%m-%d %H:%M:%S")
            cursor.execute('UPDATE numbers SET SHUTDOWN_DATE = ?, STATUS = "—Å–ª–µ—Ç–µ–ª" WHERE NUMBER = ?', 
                          (shutdown_date, number))
            conn.commit()
        
        mod_message = (
            f"üì± –ù–æ–º–µ—Ä: {number}\n"
            f"üìä –°—Ç–∞—Ç—É—Å: —Å–ª–µ—Ç–µ–ª\n"
        )
        if take_date not in ("0", "1"):
            mod_message += f"üü¢ –í—Å—Ç–∞–ª: {take_date}\n"
        mod_message += f"üî¥ –°–ª–µ—Ç–µ–ª: {shutdown_date}\n"
        if not worked_enough:
            mod_message += f"‚ö†Ô∏è –ù–æ–º–µ—Ä –Ω–µ –æ—Ç—Ä–∞–±–æ—Ç–∞–ª –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è ({hold_time} –º–∏–Ω—É—Ç)!\n"
        mod_message += f"‚è≥ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {work_time:.2f} –º–∏–Ω—É—Ç"
        
        owner_message = (
            f"‚ùå –í–∞—à –Ω–æ–º–µ—Ä {number} —Å–ª–µ—Ç–µ–ª.\n"
            f"üì± –ù–æ–º–µ—Ä: {number}\n"
            f"üìä –°—Ç–∞—Ç—É—Å: —Å–ª–µ—Ç–µ–ª\n"
        )
        if take_date not in ("0", "1"):
            owner_message += f"üü¢ –í—Å—Ç–∞–ª: {take_date}\n"
        owner_message += f"üî¥ –°–ª–µ—Ç–µ–ª: {shutdown_date}\n"
        if not worked_enough:
            owner_message += f"‚è≥ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {work_time:.2f} –º–∏–Ω—É—Ç"
        
        bot.send_message(owner_id, owner_message, parse_mode='HTML')
        
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="moderator_numbers"))
        bot.edit_message_text(mod_message, 
                            call.message.chat.id, 
                            call.message.message_id, 
                            reply_markup=markup,
                            parse_mode='HTML')
    
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ handle_number_failed: {e}")
        bot.answer_callback_query(call.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–æ–º–µ—Ä–∞.")


#–ü—Ä–æ—Å–º–æ—Ç—Ä –Ω–æ–º–µ—Ä–æ–≤:

@bot.callback_query_handler(func=lambda call: call.data.startswith("mark_failed_"))
def mark_failed(call):
    number = call.data.split("_")[2]
    user_id = call.from_user.id
    
    try:
        with db.get_db() as conn:
            cursor = conn.cursor()
            cursor.execute('SELECT TAKE_DATE, ID_OWNER, CONFIRMED_BY_MODERATOR_ID, STATUS FROM numbers WHERE NUMBER = ?', (number,))
            data = cursor.fetchone()
            if not data:
                bot.answer_callback_query(call.id, "‚ùå –ù–æ–º–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω!")
                return
            
            take_date, owner_id, confirmed_by_moderator_id, status = data
            
            if status == "–æ—Ç—Å—Ç–æ—è–ª":
                bot.answer_callback_query(call.id, "‚úÖ –ù–æ–º–µ—Ä —É–∂–µ –æ—Ç—Å—Ç–æ—è–ª —Å–≤–æ—ë –≤—Ä–µ–º—è!")
                return
            
            if confirmed_by_moderator_id != user_id:
                bot.answer_callback_query(call.id, "‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø–æ–º–µ—Ç–∏—Ç—å —ç—Ç–æ—Ç –Ω–æ–º–µ—Ä –∫–∞–∫ —Å–ª–µ—Ç–µ–≤—à–∏–π!")
                return
            
            cursor.execute('SELECT HOLD_TIME FROM settings')
            result = cursor.fetchone()
            hold_time = result[0] if result else 5
            
            end_time = datetime.now()
            if take_date in ("0", "1"):
                work_time = 0
                worked_enough = False
            else:
                start_time = datetime.strptime(take_date, "%Y-%m-%d %H:%M:%S")
                work_time = (end_time - start_time).total_seconds() / 60
                worked_enough = work_time >= hold_time
            
            shutdown_date = end_time.strftime("%Y-%m-%d %H:%M:%S")
            cursor.execute('UPDATE numbers SET SHUTDOWN_DATE = ?, STATUS = "—Å–ª–µ—Ç–µ–ª" WHERE NUMBER = ?', 
                          (shutdown_date, number))
            conn.commit()
        
        mod_message = (
            f"üì± –ù–æ–º–µ—Ä: <code>{number}</code>\n"
            f"üìä –°—Ç–∞—Ç—É—Å: —Å–ª–µ—Ç–µ–ª\n"
        )
        if take_date not in ("0", "1"):
            mod_message += f"üü¢ –í—Å—Ç–∞–ª: {take_date}\n"
        mod_message += f"üî¥ –°–ª–µ—Ç–µ–ª: {shutdown_date}\n"
        if not worked_enough:
            mod_message += f"‚ö†Ô∏è –ù–æ–º–µ—Ä –Ω–µ –æ—Ç—Ä–∞–±–æ—Ç–∞–ª –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è ({hold_time} –º–∏–Ω—É—Ç)!\n"
        mod_message += f"‚è≥ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {work_time:.2f} –º–∏–Ω—É—Ç"
        
        owner_message = (
            f"‚ùå –í–∞—à –Ω–æ–º–µ—Ä {number} —Å–ª–µ—Ç–µ–ª.\n"
            f"üì± –ù–æ–º–µ—Ä: <code>{number}</code>\n"
            f"üìä –°—Ç–∞—Ç—É—Å: —Å–ª–µ—Ç–µ–ª\n"
        )
        if take_date not in ("0", "1"):
            owner_message += f"üü¢ –í—Å—Ç–∞–ª: {take_date}\n"
        owner_message += f"üî¥ –°–ª–µ—Ç–µ–ª: {shutdown_date}\n"
        if not worked_enough:
            owner_message += f"‚è≥ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {work_time:.2f} –º–∏–Ω—É—Ç"
        
        bot.send_message(owner_id, owner_message, parse_mode='HTML')
        
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("üîô –í –Ω–æ–º–µ—Ä–∞", callback_data="moderator_numbers"))
        markup.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
        bot.edit_message_text(mod_message, 
                            call.message.chat.id, 
                            call.message.message_id, 
                            reply_markup=markup,
                            parse_mode='HTML')
    
    except Exception as e:
        print(f"[ERROR] –û—à–∏–±–∫–∞ –≤ mark_failed: {e}")
        bot.answer_callback_query(call.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–æ–º–µ—Ä–∞.")

@bot.callback_query_handler(func=lambda call: call.data.startswith("view_failed_number_"))
def view_failed_number(call):
    number = call.data.split("_")[3]
    user_id = call.from_user.id
    is_moderator = db.is_moderator(user_id)
    
    with db.get_db() as conn:
        cursor = conn.cursor()
        cursor.execute('SELECT STATUS, TAKE_DATE, SHUTDOWN_DATE FROM numbers WHERE NUMBER = ?', (number,))
        data = cursor.fetchone()
    
    if not data:
        bot.answer_callback_query(call.id, "‚ùå –ù–æ–º–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    status, take_date, shutdown_date = data
    text = (
        f"üì± –ù–æ–º–µ—Ä: <code>{number}</code>\n"
        f"üìä –°—Ç–∞—Ç—É—Å: {status}\n"
        f"üü¢ –í—Å—Ç–∞–ª: {take_date}\n"
        f"üî¥ –°–ª–µ—Ç–µ–ª: {shutdown_date}\n"
    )
    
    markup = types.InlineKeyboardMarkup()
    back_callback = "my_numbers" if not is_moderator else "moderator_numbers"
    markup.add(types.InlineKeyboardButton("üîô –í –Ω–æ–º–µ—Ä–∞", callback_data=back_callback))
    markup.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
    bot.edit_message_text(text, call.message.chat.id, call.message.message_id, parse_mode='HTML', reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith("view_stood_number_"))
def view_stood_number(call):
    number = call.data.split("_")[3]
    user_id = call.from_user.id
    is_moderator = db.is_moderator(user_id)
    
    with db.get_db() as conn:
        cursor = conn.cursor()
        cursor.execute('SELECT STATUS, TAKE_DATE, SHUTDOWN_DATE FROM numbers WHERE NUMBER = ?', (number,))
        data = cursor.fetchone()
    
    if not data:
        bot.answer_callback_query(call.id, "‚ùå –ù–æ–º–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    status, take_date, shutdown_date = data
    text = (
        f"üì± –ù–æ–º–µ—Ä: <code>{number}</code>\n"
        f"üìä –°—Ç–∞—Ç—É—Å: {status}\n"
        f"üü¢ –í—Å—Ç–∞–ª: {take_date}\n"
        f"üü¢ –û—Ç—Å—Ç–æ—è–ª: {shutdown_date}\n"
    )
    
    markup = types.InlineKeyboardMarkup()
    back_callback = "my_numbers" if not is_moderator else "moderator_numbers"
    markup.add(types.InlineKeyboardButton("üîô –í –Ω–æ–º–µ—Ä–∞", callback_data=back_callback))
    markup.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
    bot.edit_message_text(text, call.message.chat.id, call.message.message_id, parse_mode='HTML', reply_markup=markup)


     













































#–ö–û–î –î–õ–Ø –†–ï–ê–ì–ò–†–û–í–ê–ù–ò–ô –ù–£ –Ω—É –¢–≥ —Ç–≥
@bot.message_handler(content_types=['text'], func=lambda message: message.chat.type in ['group', 'supergroup'])
def handle_group_commands(message):
    user_id = message.from_user.id
    chat_id = message.chat.id
    text = message.text.strip()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ chat_id –≤ —Ç–∞–±–ª–∏—Ü–µ groups
    group_ids = db_module.get_all_group_ids()
    if chat_id not in group_ids:
        return  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º, –µ—Å–ª–∏ —á–∞—Ç –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω

    was_afk = db_module.get_afk_status(user_id)
    db_module.update_last_activity(user_id)

    if was_afk:
        safe_send_message(user_id, "üîî –í—ã –≤—ã—à–ª–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ –ê–§–ö. –í–∞—à–∏ –Ω–æ–º–µ—Ä–∞ —Å–Ω–æ–≤–∞ –≤–∏–¥–Ω—ã.", parse_mode='HTML')

    tg_pattern = r'^—Ç–≥(\d{1,2})$'
    match = re.match(tg_pattern, text.lower())
    if match:
        tg_number = int(match.group(1))
        if 1 <= tg_number <= 70:
            get_number_in_group(user_id, chat_id, message.message_id, tg_number)
        return

    failed_pattern = r'^/?(?:—Å–ª[–µ—ë]—Ç\s*\+?7\s*|\+?7\s*)([\d\s]*)$'
    failed_match = re.match(failed_pattern, text, re.IGNORECASE)
    if failed_match:
        handle_failed_number(message)  # –í—ã–∑—ã–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é
        return


def safe_send_message(chat_id, text, parse_mode=None, reply_markup=None):
    try:
        bot.send_message(chat_id, text, parse_mode=parse_mode, reply_markup=reply_markup)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}: {e}")

@bot.message_handler(regexp=r'^/?(?:—Å–ª[–µ—ë]—Ç\s*\+?\s*7\s*|\+?\s*7\s*)([\d\s]*)$')
def handle_failed_number(message):
    user_id = message.from_user.id
    chat_id = message.chat.id
    text = message.text.lower().strip()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if not db_module.is_moderator(user_id) and user_id not in config.ADMINS_ID:
        bot.reply_to(message, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã!")
        return

    # –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã ¬´—Å–ª–µ—Ç¬ª –∏ –Ω–æ–º–µ—Ä–∞
    failed_pattern = r'^/?(?:—Å–ª[–µ—ë]—Ç\s*\+?7\s*|\+?7\s*)([\d\s]*)$'
    failed_match = re.match(failed_pattern, text, re.IGNORECASE)

    if not failed_match:
        bot.reply_to(message, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä: —Å–ª–µ—Ç +79991234567, –°–ª—ë—Ç+7965, —Å–ª–µ—Ç +7 926 016 6647 –∏–ª–∏ /—Å–ª–µ—Ç +79991234567")
        return

    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ü–∏—Ñ—Ä—ã –Ω–æ–º–µ—Ä–∞, —É–¥–∞–ª—è—è –ø—Ä–æ–±–µ–ª—ã
    number_input = ''.join(failed_match.group(1).split())

    if not number_input:
        bot.reply_to(message, "‚ùå –ù–æ–º–µ—Ä –Ω–µ —É–∫–∞–∑–∞–Ω! –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä, –Ω–∞–ø—Ä–∏–º–µ—Ä: +79991234567 –∏–ª–∏ +7965")
        return

    # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –Ω–æ–º–µ—Ä: –¥–æ–±–∞–≤–ª—è–µ–º +7, –µ—Å–ª–∏ —ç—Ç–æ –ø–æ–ª–Ω—ã–π –Ω–æ–º–µ—Ä
    normalized_number = f"+7{number_input}" if len(number_input) >= 10 else f"+7{number_input}"

    try:
        with db_module.get_db() as conn:
            cursor = conn.cursor()
            # –ü–æ–∏—Å–∫ –Ω–æ–º–µ—Ä–∞ –≤ –±–∞–∑–µ: –ª–∏–±–æ —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ, –ª–∏–±–æ —á–∞—Å—Ç–∏—á–Ω–æ–µ (–¥–ª—è —Å–æ–∫—Ä–∞—â—ë–Ω–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤)
            cursor.execute('''
                SELECT TAKE_DATE, ID_OWNER, CONFIRMED_BY_MODERATOR_ID, STATUS, TG_NUMBER, MODERATOR_ID
                FROM numbers
                WHERE NUMBER = ? OR NUMBER LIKE ?
            ''', (normalized_number, f"%{number_input}%"))
            data = cursor.fetchone()

            if not data:
                bot.reply_to(message, f"‚ùå –ù–æ–º–µ—Ä {normalized_number} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ!")
                return

            take_date, owner_id, confirmed_by_moderator_id, status, tg_number, moderator_id = data
            tg_number = tg_number or 1

            if status == "–æ—Ç—Å—Ç–æ—è–ª":
                bot.reply_to(message, f"‚úÖ –ù–æ–º–µ—Ä {normalized_number} —É–∂–µ –æ—Ç—Å—Ç–æ—è–ª —Å–≤–æ—ë –≤—Ä–µ–º—è –∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ —Å–ª–µ—Ç–µ–≤—à–∏–π!")
                return
            if status not in ("–∞–∫—Ç–∏–≤–µ–Ω", "taken"):
                bot.reply_to(message, f"‚ùå –ù–æ–º–µ—Ä {normalized_number} –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω (—Å—Ç–∞—Ç—É—Å: {status})!")
                return

            if confirmed_by_moderator_id != user_id and moderator_id != user_id:
                bot.reply_to(message, f"‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø–æ–º–µ—Ç–∏—Ç—å —ç—Ç–æ—Ç –Ω–æ–º–µ—Ä –∫–∞–∫ —Å–ª–µ—Ç–µ–≤—à–∏–π!")
                return

            cursor.execute('SELECT HOLD_TIME FROM settings')
            result = cursor.fetchone()
            hold_time = result[0] if result else 5

            end_time = datetime.now()
            if take_date in ("0", "1"):
                work_time = 0
                worked_enough = False
            else:
                start_time = datetime.strptime(take_date, "%Y-%m-%d %H:%M:%S")
                work_time = (end_time - start_time).total_seconds() / 60
                worked_enough = work_time >= hold_time

            # –ü—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å–ª–∏ –Ω–æ–º–µ—Ä –æ—Ç—Å—Ç–æ—è–ª –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è, –∑–∞–ø—Ä–µ—â–∞–µ–º –ø–æ–º–µ—Ç–∏—Ç—å –∫–∞–∫ "—Å–ª–µ—Ç–µ–ª"
            if worked_enough:
                bot.reply_to(message, f"‚úÖ –ù–æ–º–µ—Ä {normalized_number} –æ—Ç—Ä–∞–±–æ—Ç–∞–ª –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è ({hold_time} –º–∏–Ω—É—Ç) –∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ —Å–ª–µ—Ç–µ–≤—à–∏–π!")
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ "–æ—Ç—Å—Ç–æ—è–ª", –µ—Å–ª–∏ –æ–Ω –µ—â—ë –Ω–µ –æ–±–Ω–æ–≤–ª—ë–Ω
                cursor.execute('UPDATE numbers SET STATUS = "–æ—Ç—Å—Ç–æ—è–ª" WHERE NUMBER = ?', (normalized_number,))
                conn.commit()
                logging.info(f"–ù–æ–º–µ—Ä {normalized_number} –æ—Ç—Å—Ç–æ—è–ª –≤—Ä–µ–º—è, —Å—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª—ë–Ω –Ω–∞ '–æ—Ç—Å—Ç–æ—è–ª' –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id}")
                return

            shutdown_date = end_time.strftime("%Y-%m-%d %H:%M:%S")
            cursor.execute('UPDATE numbers SET SHUTDOWN_DATE = ?, STATUS = "—Å–ª–µ—Ç–µ–ª" WHERE NUMBER = ?',
                          (shutdown_date, normalized_number))
            conn.commit()
            logging.info(f"–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä {user_id} –ø–æ–º–µ—Ç–∏–ª –Ω–æ–º–µ—Ä {normalized_number} –∫–∞–∫ —Å–ª–µ—Ç–µ–ª –≤ —á–∞—Ç–µ {chat_id} ({message.chat.type})")

            mod_message = (
            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
            "üìå <b>–û—Ç—á—ë—Ç –ø–æ –Ω–æ–º–µ—Ä—É</b>\n"
            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
            f"üí¨ <b>–¢–ì:</b> <code>{tg_number}</code>\n"
            f"üì± <b>–ù–æ–º–µ—Ä:</b> <code>{normalized_number}</code>\n"
            f"üìä <b>–°—Ç–∞—Ç—É—Å:</b> üü• <b>–°–õ–ï–¢–ï–õ</b>\n"
            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n")

            if take_date not in ("0", "1"):
                mod_message += f"üü¢ <b>–í—Å—Ç–∞–ª:</b> {take_date}\n"
            mod_message += f"üî¥ <b>–°–ª–µ—Ç–µ–ª:</b> {shutdown_date}\n"

            if not worked_enough:
                mod_message += f"‚ö†Ô∏è <b>–ù–µ –æ—Ç—Ä–∞–±–æ—Ç–∞–ª –º–∏–Ω–∏–º—É–º:</b> {hold_time} –º–∏–Ω\n"

            mod_message += f"‚è≥ <b>–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:</b> {work_time:.2f} –º–∏–Ω\n"
            mod_message += "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"


            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))

            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —á–∞—Ç–∞
            try:
                if message.chat.type in ['group', 'supergroup']:
                    bot.reply_to(message, mod_message, parse_mode='HTML', reply_markup=markup)
                else:
                    bot.send_message(chat_id, mod_message, parse_mode='HTML', reply_markup=markup)
            except telebot.apihelper.ApiTelegramException as e:
                logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç {chat_id}: {e}")
                if message.chat.type in ['group', 'supergroup']:
                    bot.send_message(user_id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç –≤ –≥—Ä—É–ø–ø—É. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –±–æ—Ç–∞.", parse_mode='HTML')
                return

            owner_message = (
                "üö´ <b>–í–∞—à –Ω–æ–º–µ—Ä –±—ã–ª —Å–Ω—è—Ç —Å –æ–±—Ä–∞–±–æ—Ç–∫–∏!</b>\n"
                "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
                f"üì± <b>–ù–æ–º–µ—Ä:</b> <code>{normalized_number}</code>\n"
                f"üìä <b>–°—Ç–∞—Ç—É—Å:</b> üü• <b>–°–õ–ï–¢–ï–õ</b>\n"
                "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
            )
            if take_date not in ("0", "1"):
                owner_message += f"üü¢ <b>–í—Å—Ç–∞–ª:</b> {take_date}\n"
            owner_message += f"üî¥ <b>–°–ª–µ—Ç–µ–ª:</b> {shutdown_date}\n"
            owner_message += f"‚è≥ <b>–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:</b> {work_time:.2f} –º–∏–Ω\n"
            owner_message += "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
            owner_message += "‚ö†Ô∏è <i>–í—ã –º–æ–∂–µ—Ç–µ —Å–¥–∞—Ç—å –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è.</i>"

            markup_owner = types.InlineKeyboardMarkup()
            markup_owner.add(types.InlineKeyboardButton("üì± –°–¥–∞—Ç—å –Ω–æ–º–µ—Ä", callback_data="submit_number"))
            markup_owner.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
            safe_send_message(owner_id, owner_message, parse_mode='HTML', reply_markup=markup_owner)

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã '—Å–ª–µ—Ç' –¥–ª—è –Ω–æ–º–µ—Ä–∞ {normalized_number}: {e}")
        bot.reply_to(message, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–æ–º–µ—Ä–∞.")
        
# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∫–æ–¥–æ–≤ –ø–æ user_id
active_code_requests = {}




@bot.callback_query_handler(func=lambda call: call.data.startswith("back_to_confirm_"))
def back_to_confirm(call):
    try:
        number = call.data.split("_")[3]
        
        with db_module.get_db() as conn:
            cursor = conn.cursor()
            cursor.execute('SELECT ID_OWNER, VERIFICATION_CODE, TAKE_DATE, TG_NUMBER, fa, (SELECT IS_AFK FROM users WHERE ID = numbers.ID_OWNER) AS is_afk FROM numbers WHERE NUMBER = ?', (number,))
            result = cursor.fetchone()
            
            if not result:
                markup = types.InlineKeyboardMarkup()
                markup.add(types.InlineKeyboardButton("üì≤ –ü–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä", callback_data="get_number"))
                markup.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
                bot.send_message(
                    call.message.chat.id,
                    f"‚ùå –ù–æ–º–µ—Ä {number} –±–æ–ª—å—à–µ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ª—É—á–∏—Ç–µ –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä.",
                    reply_markup=markup
                )
                return
            
            owner_id, code, take_date, tg_number, fa_code, is_afk = result
            if not tg_number:
                tg_number = 1
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ê–§–ö-—Å—Ç–∞—Ç—É—Å–∞ –≤–ª–∞–¥–µ–ª—å—Ü–∞ –Ω–æ–º–µ—Ä–∞
            if is_afk:
                markup = types.InlineKeyboardMarkup()
                markup.add(types.InlineKeyboardButton("üì≤ –ü–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä", callback_data="get_number"))
                markup.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
                bot.send_message(
                    call.message.chat.id,
                    f"‚ùå –ù–æ–º–µ—Ä {number} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Ä–µ–∂–∏–º–µ –ê–§–ö!\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π –Ω–æ–º–µ—Ä.",
                    reply_markup=markup
                )
                # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ –∏–∑ confirmation_messages –∏ code_messages
                confirmation_messages.pop(f"{number}_{owner_id}", None)
                code_messages.pop(number, None)
                return
            
            try:
                bot.delete_message(call.message.chat.id, call.message.message_id)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            
            fa_text = f"2FA: {fa_code}" if fa_code else "2FA: –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
            if code and take_date != "0":
                markup = types.InlineKeyboardMarkup()
                markup.add(
                    types.InlineKeyboardButton("‚úÖ –î–∞, –≤—Å—Ç–∞–ª", callback_data=f"number_active_{number}_{tg_number}"),
                    types.InlineKeyboardButton("‚ùå –ù–µ—Ç, –∏–∑–º–µ–Ω–∏—Ç—å", callback_data=f"number_invalid_{number}_{tg_number}")
                )
                bot.send_message(
                    call.message.chat.id,
                    f"üì± <b>–¢–ì {tg_number}</b>\n"
                    f"üì± –ö–æ–¥ –ø–æ –Ω–æ–º–µ—Ä—É {number}\n"
                    f"–ö–æ–¥: {code}\n"
                    f"{fa_text}\n\n"
                    "–í—Å—Ç–∞–ª –ª–∏ –Ω–æ–º–µ—Ä?",
                    parse_mode='HTML',
                    reply_markup=markup
                )
            else:
                markup = types.InlineKeyboardMarkup()
                markup.add(
                    types.InlineKeyboardButton("‚úâÔ∏è –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–¥", callback_data=f"send_code_{number}_{call.message.chat.id}_{tg_number}"),
                    types.InlineKeyboardButton("‚ùå –ù–æ–º–µ—Ä –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π", callback_data=f"invalid_{number}")
                )
                markup.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
                bot.send_message(
                    call.message.chat.id,
                    f"üì± <b>–¢–ì {tg_number}</b>\n"
                    f"üì± –ù–æ–≤—ã–π –Ω–æ–º–µ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏: <code>{number}</code>\n"
                    f"{fa_text}\n\n"
                    "–û–∂–∏–¥–∞–π—Ç–µ –∫–æ–¥ –æ—Ç –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∏–ª–∏ –æ—Ç–º–µ—Ç—å—Ç–µ –Ω–æ–º–µ—Ä –∫–∞–∫ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π.",
                    parse_mode='HTML',
                    reply_markup=markup
                )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ back_to_confirm: {e}")
        bot.answer_callback_query(call.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é!")       


@bot.callback_query_handler(func=lambda call: call.data == "toggle_afk")
def toggle_afk(call):
    user_id = call.from_user.id
    # –£–±–∏—Ä–∞–µ–º db.update_last_activity(user_id) ‚Äî –æ–Ω —Å–±–∏–≤–∞–µ—Ç –ê–§–ö
    new_afk_status = db_module.toggle_afk_status(user_id)
    
    print(f"[DEBUG] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∏–∑–º–µ–Ω–∏–ª —Å—Ç–∞—Ç—É—Å –ê–§–ö –Ω–∞ {'–≤–∫–ª—é—á—ë–Ω' if new_afk_status else '–≤—ã–∫–ª—é—á–µ–Ω'}")
    
    try:
        if new_afk_status:
            bot.send_message(
                call.message.chat.id,
                "üîî –í—ã –≤–æ—à–ª–∏ –≤ —Ä–µ–∂–∏–º –ê–§–ö. –í–∞—à–∏ –Ω–æ–º–µ—Ä–∞ —Å–∫—Ä—ã—Ç—ã. –ß—Ç–æ–±—ã –≤—ã–π—Ç–∏, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –í—ã–∫–ª—é—á–∏—Ç—å –∞—Ñ–∫.",
                parse_mode='HTML'
            )
        else:
            bot.send_message(
                call.message.chat.id,
                "üîî –í—ã –≤—ã—à–ª–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ –ê–§–ö. –í–∞—à–∏ –Ω–æ–º–µ—Ä–∞ —Å–Ω–æ–≤–∞ –≤–∏–¥–Ω—ã.",
                parse_mode='HTML'
            )
    except Exception as e:
        print(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–º–µ–Ω–µ –ê–§–ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
    
    with db_module.get_db() as conn:
        cursor = conn.cursor()
        cursor.execute('SELECT PRICE, HOLD_TIME FROM settings')
        result = cursor.fetchone()
        price, hold_time = result if result else (2.0, 5)
    
    is_admin = user_id in config.ADMINS_ID
    is_moderator = db_module.is_moderator(user_id)
    
    if is_moderator:
        welcome_text = "–ó–∞—è–≤–∫–∏"
    else:
        welcome_text = (
            f"<b>üì¢ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ {config.SERVICE_NAME}</b>\n\n"
            f"<b>‚è≥ –ì—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã:</b> <code>{config.WORK_TIME}</code>\n\n"
            "<b>üíº –ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç?</b>\n"
            "‚Ä¢ <i>–í—ã –ø—Ä–æ–¥–∞—ë—Ç–µ –Ω–æ–º–µ—Ä</i> ‚Äì <b>–º—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º —Å—Ç–∞–±–∏–ª—å–Ω—ã–µ –≤—ã–ø–ª–∞—Ç—ã.</b>\n"
            f"‚Ä¢ <i>–ú–æ–º–µ–Ω—Ç–∞–ª—å–Ω—ã–µ –≤—ã–ø–ª–∞—Ç—ã</i> ‚Äì <b>–ø–æ—Å–ª–µ {hold_time} –º–∏–Ω—É—Ç —Ä–∞–±–æ—Ç—ã.</b>\n\n"
            "<b>üí∞ –¢–∞—Ä–∏—Ñ—ã –Ω–∞ —Å–¥–∞—á—É –Ω–æ–º–µ—Ä–æ–≤:</b>\n"
            f"‚ñ™Ô∏è <code>{price}$</code> –∑–∞ –Ω–æ–º–µ—Ä (—Ö–æ–ª–¥ {hold_time} –º–∏–Ω—É—Ç)\n"
            f"<b>üìç –ü–æ—á–µ–º—É –≤—ã–±–∏—Ä–∞—é—Ç {config.SERVICE_NAME}?</b>\n"
            "‚úÖ <i>–ü—Ä–æ–∑—Ä–∞—á–Ω—ã–µ —É—Å–ª–æ–≤–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–∞</i>\n"
            "‚úÖ <i>–í—ã–≥–æ–¥–Ω—ã–µ —Ç–∞—Ä–∏—Ñ—ã –∏ –º–æ–º–µ–Ω—Ç–∞–ª—å–Ω—ã–µ –≤—ã–ø–ª–∞—Ç—ã</i>\n"
            "‚úÖ <i>–û–ø–µ—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ 24/7</i>\n\n"
            "<b>üîπ –ù–∞—á–Ω–∏—Ç–µ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!</b>"
        )
    
    markup = types.InlineKeyboardMarkup()
    if not is_moderator or is_admin:
        markup.row(
            types.InlineKeyboardButton("üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å", callback_data="profile"),
            types.InlineKeyboardButton("üì± –°–¥–∞—Ç—å –Ω–æ–º–µ—Ä", callback_data="submit_number")
        )
    if is_admin:
        markup.add(types.InlineKeyboardButton("‚öôÔ∏è –ê–¥–º–∏–Ω–∫–∞", callback_data="admin_panel"))
    if is_moderator:
        markup.add(
            types.InlineKeyboardButton("üì≤ –ü–æ–ª—É—á–∏—Ç—å –Ω–æ–º–µ—Ä", callback_data="get_number"),
            types.InlineKeyboardButton("üìã –ú–æ–∏ –Ω–æ–º–µ—Ä–∞", callback_data="moderator_numbers")
        )

    # –ù–æ–≤—ã–µ –∫–Ω–æ–ø–∫–∏
    markup.add(types.InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –Ω–æ–º–µ—Ä", callback_data="delete_number"))
    markup.add(types.InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –Ω–æ–º–µ—Ä", callback_data="change_number"))
    markup.add(types.InlineKeyboardButton("üì© –ê–ø–µ–ª–ª—è—Ü–∏—è –Ω–æ–º–µ—Ä–∞", callback_data="appeal_number"))
    markup.add(types.InlineKeyboardButton("üîê 2FA", callback_data="manage_2fa"))
    markup.add(types.InlineKeyboardButton("üîì –°–±—Ä–æ—Å–∏—Ç—å 2FA", callback_data="reset_2fa"))

    # –ö–Ω–æ–ø–∫–∞ –ê–§–ö
    afk_button_text = "üü¢ –í–∫–ª—é—á–∏—Ç—å –ê–§–ö" if not new_afk_status else "üî¥ –í—ã–∫–ª—é—á–∏—Ç—å –ê–§–ö"
    markup.add(types.InlineKeyboardButton(afk_button_text, callback_data="toggle_afk"))
    
    bot.edit_message_text(
        welcome_text,
        call.message.chat.id,
        call.message.message_id,
        parse_mode='HTML' if not is_moderator else None,
        reply_markup=markup
    )
    
    status_text = "–≤–∫–ª—é—á—ë–Ω" if new_afk_status else "–≤—ã–∫–ª—é—á–µ–Ω"
    bot.answer_callback_query(call.id, f"–†–µ–∂–∏–º –ê–§–ö {status_text}. –í–∞—à–∏ –Ω–æ–º–µ—Ä–∞ {'—Å–∫—Ä—ã—Ç—ã' if new_afk_status else '–≤–∏–¥–∏–º—ã'}.")


def init_db():
    db_module.create_tables()
    db_module.migrate_db()
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö, –¥–æ–±–∞–≤–ª—è—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ —Å—Ç–æ–ª–±—Ü—ã –≤ —Ç–∞–±–ª–∏—Ü—ã numbers –∏ users."""
    with db.get_db() as conn:
        cursor = conn.cursor()

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–æ–ª–±—Ü–æ–≤ –≤ —Ç–∞–±–ª–∏—Ü–µ numbers
        cursor.execute("PRAGMA table_info(numbers)")
        columns = [col[1] for col in cursor.fetchall()]
        
        if 'GROUP_CHAT_ID' not in columns:
            try:
                cursor.execute('ALTER TABLE numbers ADD COLUMN GROUP_CHAT_ID INTEGER')
                print("[INFO] –°—Ç–æ–ª–±–µ—Ü GROUP_CHAT_ID —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Ç–∞–±–ª–∏—Ü—É numbers.")
            except sqlite3.OperationalError as e:
                print(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Å—Ç–æ–ª–±–µ—Ü GROUP_CHAT_ID: {e}")

        if 'TG_NUMBER' not in columns:
            try:
                cursor.execute('ALTER TABLE numbers ADD COLUMN TG_NUMBER INTEGER DEFAULT 1')
                print("[INFO] –°—Ç–æ–ª–±–µ—Ü TG_NUMBER —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Ç–∞–±–ª–∏—Ü—É numbers.")
            except sqlite3.OperationalError as e:
                print(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Å—Ç–æ–ª–±–µ—Ü TG_NUMBER: {e}")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–æ–ª–±—Ü–æ–≤ –≤ —Ç–∞–±–ª–∏—Ü–µ users
        cursor.execute("PRAGMA table_info(users)")
        user_columns = [col[1] for col in cursor.fetchall()]
        
        if 'IS_AFK' not in user_columns:
            try:
                cursor.execute('ALTER TABLE users ADD COLUMN IS_AFK INTEGER DEFAULT 0')
                print("[INFO] –°—Ç–æ–ª–±–µ—Ü IS_AFK —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Ç–∞–±–ª–∏—Ü—É users.")
            except sqlite3.OperationalError as e:
                print(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Å—Ç–æ–ª–±–µ—Ü IS_AFK: {e}")

        if 'LAST_ACTIVITY' not in user_columns:
            try:
                cursor.execute('ALTER TABLE users ADD COLUMN LAST_ACTIVITY TEXT')
                print("[INFO] –°—Ç–æ–ª–±–µ—Ü LAST_ACTIVITY —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Ç–∞–±–ª–∏—Ü—É users.")
            except sqlite3.OperationalError as e:
                print(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Å—Ç–æ–ª–±–µ—Ü LAST_ACTIVITY: {e}")

        conn.commit()

@bot.callback_query_handler(func=lambda call: call.data.startswith("number_invalid_"))
def number_invalid(call):
    try:
        parts = call.data.split("_")
        if len(parts) < 4:
            bot.answer_callback_query(call.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö!")
            return
        number = parts[2]
        tg_number = int(parts[3])
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º tg_number –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        with db.get_db() as conn:
            cursor = conn.cursor()
            cursor.execute('UPDATE numbers SET TG_NUMBER = ? WHERE NUMBER = ?', (tg_number, number))
            conn.commit()
        
        markup = types.InlineKeyboardMarkup()
        markup.add(
            types.InlineKeyboardButton("‚úâÔ∏è –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–¥ –∑–∞–Ω–æ–≤–æ", callback_data=f"send_code_{number}_{call.message.chat.id}_{tg_number}"),
            types.InlineKeyboardButton("‚ùå –ù–µ –≤–∞–ª–∏–¥–Ω—ã–π", callback_data=f"invalid_{number}")
        )
        markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"back_to_confirm_{number}"))
        
        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ —É–¥–∞–ª–µ–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–æ–≥–æ
        bot.edit_message_text(
            f"üì± <b>–¢–ì {tg_number}</b>\n"
            f"üì± –ù–æ–º–µ—Ä: {number}\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            call.message.chat.id,
            call.message.message_id,
            reply_markup=markup,
            parse_mode='HTML'
        )
    
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ number_invalid: {e}")
        bot.answer_callback_query(call.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–æ–º–µ—Ä–∞.")

db_lock = Lock()

def check_inactivity():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç –∏—Ö –≤ –ê–§–ö —á–µ—Ä–µ–∑ 10 –º–∏–Ω—É—Ç."""
    while True:
        try:
            with db.get_db() as conn:
                cursor = conn.cursor()
                cursor.execute('SELECT ID, LAST_ACTIVITY, IS_AFK FROM users')
                users = cursor.fetchall()
                current_time = datetime.now()
                for user_id, last_activity, is_afk in users:
                    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –≤ –ê–§–ö –∏–ª–∏ –±–µ–∑ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
                    if is_afk or not last_activity:
                        continue
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º
                    cursor.execute('SELECT ID FROM personal WHERE ID = ? AND TYPE = ?', (user_id, 'moder'))
                    is_moder = cursor.fetchone() is not None
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∏–∑ config.ADMINS_ID
                    is_admin = user_id in config.ADMINS_ID
                    if is_moder or is_admin:
                        print(f"[DEBUG] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} ‚Äî {'–º–æ–¥–µ—Ä–∞—Ç–æ—Ä' if is_moder else ''}{'–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä' if is_admin else ''}, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ê–§–ö")
                        continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤ –∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
                    try:
                        last_activity_time = datetime.strptime(last_activity, "%Y-%m-%d %H:%M:%S")
                        if current_time - last_activity_time >= timedelta(minutes=10):
                            # –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ –ê–§–ö, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â—ë –Ω–µ –≤ –ê–§–ö
                            if not db_module.get_afk_status(user_id):
                                db_module.toggle_afk_status(user_id)
                                print(f"[DEBUG] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–µ—Ä–µ–≤–µ–¥—ë–Ω –≤ —Ä–µ–∂–∏–º –ê–§–ö")
                                try:
                                    bot.send_message(
                                        user_id,
                                        "üîî –í—ã –±—ã–ª–∏ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω—ã –≤ —Ä–µ–∂–∏–º –ê–§–ö –∏–∑-–∑–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (10 –º–∏–Ω—É—Ç). "
                                        "–í–∞—à–∏ –Ω–æ–º–µ—Ä–∞ —Å–∫—Ä—ã—Ç—ã. –ù–∞–∂–º–∏—Ç–µ '–í—ã–∫–ª—é—á–∏—Ç—å –ê–§–ö' –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è.",
                                        parse_mode='HTML'
                                    )
                                except Exception as e:
                                    print(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –ê–§–ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
                    except ValueError as e:
                        print(f"[ERROR] –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            time.sleep(60)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
        except Exception as e:
            print(f"[ERROR] –û—à–∏–±–∫–∞ –≤ check_inactivity: {e}")
            time.sleep(60)

if __name__ == "__main__":
    init_db()
    timeout_thread = threading.Thread(target=check_number_timeout, daemon=True)
    timeout_thread.start()
    hold_time_thread = threading.Thread(target=check_number_hold_time, daemon=True)
    hold_time_thread.start()
    inactivity_thread = threading.Thread(target=check_inactivity, daemon=True)
    inactivity_thread.start()
    code_timeout_thread = threading.Thread(target=check_code_timeout, daemon=True)
    code_timeout_thread.start()
    run_bot()